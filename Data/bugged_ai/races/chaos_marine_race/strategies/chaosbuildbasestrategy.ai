----------------------------------------
-- File: 'chaosbuildbasestrategy.ai'
-- Edited by Thudmeizer @ 02.10.2008

class 'ChaosBuildBaseStrategy' (BuildBaseStrategy)

function ChaosBuildBaseStrategy:__init( baseinfo ) super( baseinfo )

	-- Add build items that can cause an "invalid addon" console message
	CpuPrerequisites2.AddSpecialItem("chaos_squad_lord", CpuPrerequisites.BT_Squad)
	CpuPrerequisites2.AddSpecialItem("chaos_squad_daemon_prince", CpuPrerequisites.BT_Squad)
	--[[CpuPrerequisites2.AddSpecialItem("chaos_wargear_upgrade_lvl_1_banner_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("chaos_wargear_upgrade_lvl_1_helm_of_lorgar_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("chaos_wargear_upgrade_lvl_2_daemonic_gauntlets_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("chaos_wargear_upgrade_lvl_2_runic_boots_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("chaos_wargear_upgrade_lvl_3_daemonic_armor_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("chaos_wargear_upgrade_lvl_3_daemonic_ascension_addon", CpuPrerequisites.BT_AddOn)]]

	-- Add detector units (Best first, worst last)
	self:AddDetectorUnit("chaos_squad_lord")
	self:AddDetectorUnit("chaos_squad_sorcerer")
	self:AddDetectorUnit("chaos_squad_bloodthirster")
	self:AddDetectorUnit("chaos_squad_daemon_prince")
	
	self.heroeWargear = {}
	
	--Heroe Wargear
	-- Name, Req, Power
	--[[table.insert(self.heroeWargear, {"chaos_wargear_upgrade_lvl_1_banner_addon",60,30})
	table.insert(self.heroeWargear, {"chaos_wargear_upgrade_lvl_1_helm_of_lorgar_addon",60,50})
	table.insert(self.heroeWargear, {"chaos_wargear_upgrade_lvl_2_daemonic_gauntlets_addon",100,60})
	table.insert(self.heroeWargear, {"chaos_wargear_upgrade_lvl_2_runic_boots_addon",80,60})
	table.insert(self.heroeWargear, {"chaos_wargear_upgrade_lvl_3_daemonic_armor_addon",160,120})
	table.insert(self.heroeWargear, {"chaos_wargear_upgrade_lvl_3_daemonic_ascension_addon",200,300})]]
	
	--[[self.HeroSquadName = "chaos_squad_lord"
	
	local heroeDelayLimit = 10 --% of waiting for the upgrade 
	local heroeDelay = math.random (1,100)
	local heroeWargearCostFactor = 1.5
	aipushtrace ("BuildBaseStrategy:Heroe Wargear Election")
	
	--choose Upgrades
	self.heroeWargearPattern1 = math.random(1,2)
	self.heroeWargearPattern2 = math.random(3,4)
	self.heroeWargearPattern3 = math.random(5,6)
		
	aitrace ("Heroe Wargear T1: "..self.heroeWargear[self.heroeWargearPattern1][HeroeWargearNameIndex])
	aitrace ("Heroe Wargear T2: "..self.heroeWargear[self.heroeWargearPattern2][HeroeWargearNameIndex])
	aitrace ("Heroe Wargear T3: "..self.heroeWargear[self.heroeWargearPattern3][HeroeWargearNameIndex])
	
	if heroeDelay <= heroeDelayLimit then
		aipoptrace ("Heroe Wargear Delayed")
		for i = 1, table.getn(self.heroeWargear) do
			self.heroeWargear[i][HeroeWargearReqIndex]=self.heroeWargear[i][HeroeWargearReqIndex]*heroeWargearCostFactor
			self.heroeWargear[i][HeroeWargearPowIndex]=self.heroeWargear[i][HeroeWargearPowIndex]*heroeWargearCostFactor
		end
	else
		aipoptrace ("Heroe Wargear Not Delayed")
	end]]
end

function ChaosBuildBaseStrategy:ChooseBuildProgram()

	-- Modify probabilities according to the closest enemy player
	local oEnemy = cpu_manager:FindClosestEnemyPlayer(false)
	local sEnemy = oEnemy:GetPlayerRaceName()
	if (sEnemy == "necron_race" or sEnemy == "ork_race") then

		-- We have a 50% chance for a Khorne berserker rush
		return math.random(1, 2)

	elseif (math.random(1, 2) == 1) then
	
		-- We have a 25% chance for a chaos marine rush or a khorne berserker rush
		return math.random(2, 3)
	end
	return 1
end

function ChaosBuildBaseStrategy:EvaluateSquadCap()
	
	-- Check squad cap
	if (self:CheckSquadCap(250, 100)) then
		
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Research
		
		if (not cpu_manager.cpu_player:IsResearchComplete( "chaos_squad_cap_research" )) then
			tBuildType.name = "chaos_squad_cap_research"
		elseif not cpu_manager.cpu_player:IsResearchComplete( "chaos_squad_cap_research_1" ) then
			tBuildType.name = "chaos_squad_cap_research_1"
		elseif not cpu_manager.cpu_player:IsResearchComplete( "chaos_squad_cap_research_2" ) then
			tBuildType.name = "chaos_squad_cap_research_2"
		else
			return
		end
		
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic research of "..tBuildType.name)
		end
	end
		
	-- Check support cap
	if (self:CheckSupportCap(250, 100)) then
		
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Research
		
		if (not cpu_manager.cpu_player:IsResearchComplete( "chaos_support_cap_research" )) then
			tBuildType.name = "chaos_support_cap_research"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "chaos_support_cap_research_1" )) then
			tBuildType.name = "chaos_support_cap_research_1"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "chaos_support_cap_research_2" )) then
			tBuildType.name = "chaos_support_cap_research_2"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "chaos_support_cap_research_3" )) then
			tBuildType.name = "chaos_support_cap_research_3"
		else
			return
		end
		
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic research of "..tBuildType.name)
		end
	end
end

function ChaosBuildBaseStrategy:GetBuildingName( sType )

	-- Return race specific object string
	if (sType == "HQ") then
		return "chaos_hq"
		
	elseif (sType == "Generator") then
		return "chaos_plasma_generator"
		
	elseif (sType == "BiggerGenerator") then
		return "chaos_thermo_plasma_generator"
		
	elseif (sType == "VehicleBuilding") then
		return "chaos_machine_pit"
		
	elseif (sType == "ListeningPost") then
		return "chaos_listening_post"
		
	elseif (sType == "Turret") then
		return "chaos_turret_bolter"
		
	elseif (sType == "Mine") then
		return "chaos_mine_field"
	end
	
	return nil
end

function ChaosBuildBaseStrategy:GetAddonBuilding( sType )

	if (sType == "chaos_turret_addon") then
		return "chaos_turret_bolter"
		
	elseif (sType == "chaos_list_post_addon_1") then
		return "chaos_listening_post"
		
	elseif (sType == "chaos_list_post_addon_2") then
		return "chaos_listening_post"
		
	elseif (sType == "chaos_hq_addon_1") then
		return "chaos_hq"
		
	elseif (sType == "chaos_hq_addon_2") then
		return "chaos_hq"
	end

	--[[for i = 1, table.getn(self.heroeWargear) do
		if (sType == self.heroeWargear[i][HeroeWargearNameIndex]) then
			return "chaos_hq"
		end
	end]]
	return nil
end

-- Arkhan 01.2006: Inherited method to check if an addon is a tier addon
function ChaosBuildBaseStrategy:IsTierAddon( sName, iTargetTier )

	-- Check addon name and target tier
	if (sName == "chaos_hq_addon_1" and iTargetTier == 2) then
		return true
	elseif (sName == "chaos_hq_addon_2" and iTargetTier == 3) then
		return true
	end
	return false
end

-- Arkhan 11.2005: Returns the squad cap and support cap of the given squad
function ChaosBuildBaseStrategy:GetUnitStats(sSquadName)

	if (sSquadName == "chaos_squad_cultist") then
		return 2, 0
	elseif (sSquadName == "chaos_marine_squad") then
		return 3, 0
	elseif (sSquadName == "chaos_squad_raptor") then
		return 3, 0
	elseif (sSquadName == "chaos_squad_khorne_berserker") then
		return 3, 0
	elseif (sSquadName == "chaos_squad_horror") then
		return 2, 0
	elseif (sSquadName == "chaos_squad_possessed_marine") then
		return 4, 0
	elseif (sSquadName == "chaos_squad_obliterator") then
		return 5, 0
	elseif (sSquadName == "chaos_squad_defiler") then
		return 0, 3
	elseif (sSquadName == "chaos_squad_predator") then
		return 0, 4
  	elseif (sSquadName == "chaos_squad_rhino") then
		return 0, 1
	end
	return 0, 0
end

function ChaosBuildBaseStrategy:UpdateTierLevel()

	-- Reset tier level
	self.tierLevel = 1
	
	-- Prepare
	local iHQAddon1ID = cpu_manager.stats:GetAddOnID("chaos_hq_addon_1")
	local iHQAddon2ID = cpu_manager.stats:GetAddOnID("chaos_hq_addon_2")
	local oStats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )
	
	-- Check HQ's for addons
	for oBase in oStats:GetBases() do

		-- Check for valid building
		if (oBase:IsValid() and not oBase:IsListeningPost()) then

			-- Check for HQ addon 2
			if (oBase:HasAddOn(iHQAddon2ID)) then
				self.tierLevel = 3
				return
							
			-- Check for HQ addon 1 
			elseif (oBase:HasAddOn(iHQAddon1ID)) then
				self.tierLevel = 2
			end
		end
	end
end

function ChaosBuildBaseStrategy:BuildFlexible()

	-- Dynamic research
  	-- Item-Syntax: ResearchName, MinTier, RequisitionCost, PowerCost, MinSquadCap, MinSupportCap, SquadName, SquadMinCount
	local iDaemonCount = self:CountSquads("chaos_squad_possessed_marine") + self:CountSquads("chaos_squad_horror") + self:CountSquads("chaos_squad_obliterator")
	local iMarineCount = self:CountSquads("chaos_marine_squad") + self:CountSquads("chaos_squad_khorne_berserker")

	-- Compute tier 1 researches
	if (self.tierLevel >= 1 and self.m_iArmyStrength >= 1000) then
	
		-- Infantry upgrades
		if (iMarineCount >= 2) then
			self:DynamicResearch("chaos_frag_grenade_research", 1, 25, 75, 6, 0, nil, 0)
		end
		self:DynamicResearch("chaos_health_upgrade_research", 1, 120, 80, 6, 0, nil, 0)
		self:DynamicResearch("chaos_accuracy_upgrade_research", 1, 100, 60, 6, 0, "chaos_marine_squad", 2)
		self:DynamicResearch("chaos_furious_charge_research", 1, 100, 35, 8, 0, nil, 0)	
	end
	
	-- Compute tier 2 researches
	if (self.tierLevel >= 2 and self.m_iArmyStrength >= 1500) then
	
		-- Infantry upgrades
		self:DynamicResearch("chaos_max_weapons_research", 2, 100, 100, 8, 0, "chaos_marine_squad", 2)
		self:DynamicResearch("chaos_cultist_sight_research", 2, 80, 60, 8, 2, "chaos_squad_cultist", 2)		-- Path of damnation
		self:DynamicResearch("chaos_raptor_research", 2, 75, 25, 8, 3, "chaos_squad_raptor", 2)			-- Raptor speed
		
		-- Leader upgrades
		self:DynamicResearch("chaos_plasma_pistol_research", 2, 60, 60, 8, 2, nil, 0)
		self:DynamicResearch("chaos_sorcerer_research_1", 2, 50, 40, 8, 0, "chaos_squad_sorcerer", 1)	-- Chains of torment
		self:DynamicResearch("chaos_commander_health_research_1", 2, 80, 60, 8, 2, nil, 0)
		self:DynamicResearch("chaos_champion_melee_research_1", 2, 40, 40, 8, 2, nil, 0)	-- Power swords
		self:DynamicResearch("chaos_champion_melee_research_2", 2, 80, 80, 8, 2, nil, 0)	-- Power fists	
	end
	
	-- Compute tier 3 researches
	if (self.tierLevel >= 3 and self.m_iArmyStrength >= 2000) then
	
		-- Vehicle upgrades
		
		-- Daemon upgrades
		if (iDaemonCount >= 2) then
			self:DynamicResearch("chaos_personalteleporters", 3, 80, 60, 6, 6, "chaos_squad_obliterator", 1)
		end
		
		
		-- Leader upgrades
		self:DynamicResearch("chaos_sorcerer_research_2", 3, 80, 100, 6, 6, "chaos_squad_sorcerer", 1)	-- Corruption
		self:DynamicResearch("chaos_commander_health_research_2", 3, 100, 80, 6, 6, nil, 0)
	end

	-- DynamicAddon(sAddonName, iAddonCount, iMinTier, iRequisitionCost, iPowerCost, iMinSquadCap, iMinSupportCap, sSquadName, iSquadMinCount)
	if (self:CountSquads("chaos_squad_lord") > 0 and self.m_iArmyStrength >= 1000 + self.tierLevel * 250) then

		-- Hero wargear
		--[[self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern1][HeroeWargearNameIndex], 1, 1,self.heroeWargear[self.heroeWargearPattern1][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern1][HeroeWargearPowIndex],6, 0, self.HeroSquadName, 0)
		self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern2][HeroeWargearNameIndex], 1, 2,self.heroeWargear[self.heroeWargearPattern2][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern2][HeroeWargearPowIndex],12, 0, self.HeroSquadName, 0)
		self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern3][HeroeWargearNameIndex], 1, 3,self.heroeWargear[self.heroeWargearPattern3][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern3][HeroeWargearPowIndex],16, 4, self.HeroSquadName, 0)
		for i= 1, table.getn(self.heroeWargear) do
			self:DynamicAddon(self.heroeWargear[i][HeroeWargearNameIndex], 1, 2,self.heroeWargear[i][HeroeWargearReqIndex], self.heroeWargear[i][HeroeWargearPowIndex],10, 0,self.HeroSquadName, 0)
		end]]
	end
	
	-- Restrict dynamic builds to hard difficulty or higher
	if (CpuManager.AISettings.bMultiBuildings) then
	
		-- Item-Syntax: BuildingName, BuildingCount, MinTier, MinRequisition, MinPower, MinSquadCap, MinSupportCap
		if (self:GetBuildingCountByName("chaos_hq") > 1) then
			self:DynamicBuild("chaos_temple", 2, 2, 800, 200, 6, 2)
			self:DynamicBuild("chaos_machine_pit", 2, 2, 200, 800, 6, 2)
			self:DynamicBuild("chaos_sacrificial_circle", 2, 2, 600, 200, 6, 6)
		end		
	end
end

-- Arkhan 01.2006: Method to check if force tech should be computed
function ChaosBuildBaseStrategy:ForceTech()

	-- Check time
	if (g_iGMT < 60 * CpuManager.ForceTech.StartTier1) then
		return false
	end
	
	-- Check ressources
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

	-- Check tier
	local iTierLevel = self:GetTierLevel()
	if (iTierLevel == 1) then
	
		-- Check resources
		if (iRequisition > 600 and iPower > 200) then
			return false
		end
		return not self.m_bHQAddon1
		
	elseif (iTierLevel == 2) then
	
		-- Check for machine pit
		if (self:GetBuildingCountByName("chaos_machine_pit", false) < 1) then
			return true
		end
		
		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier2 and (iRequisition < 600 or iPower < 600)) then
			return true
		end
		
	end
	return false
end

-- Arkhan 03.2006: Return placement type for buildings
function ChaosBuildBaseStrategy:GetPlacementType(iBuildingID)
	
	-- Check building
	if (cpu_manager:IsHQ(iBuildingID)) then
		if (self:GetBuildingCountByName("chaos_hq") < 1) then
			return "HQ"
		else
			return "Safeplace"
		end
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("chaos_temple") or
			iBuildingID == cpu_manager.stats:GetBuildingID("chaos_machine_pit") or
			iBuildingID == cpu_manager.stats:GetBuildingID("chaos_sacrificial_circle")) then
		return "Military"
	elseif (cpu_manager:IsTurret(iBuildingID)) then
		return "Front2"
	elseif (cpu_manager:IsMine(iBuildingID)) then
		return "Mine"
	elseif (cpu_manager:IsGenerator(iBuildingID) or
			iBuildingID == cpu_manager.stats:GetBuildingID("chaos_armoury") or
			iBuildingID == cpu_manager.stats:GetBuildingID("chaos_greater_sacrificial_circle")) then
		return "BaseBack"
	end
	return "Basic"
end

-- Arkhan 03.2006: Inherited method to modify squad demand
function ChaosBuildBaseStrategy:ModifySquadDemand(iUnitID)

	-- No more icon bearers then khorne/possessed/cultist squads
	if (iUnitID == cpu_manager.stats:GetSquadID("chaos_squad_icon_bearer_undivided")) then

		-- Check number of squads
		local bearer_attach = function( squad_ai )
			return (squad_ai:GetProRatedCost() >= 250 and squad_ai:CanReceiveAttachment())
		end
		local num_attach = self:CountSquads("chaos_marine_squad", bearer_attach) + 
			self:CountSquads("chaos_squad_possessed", bearer_attach) + 
			self:CountSquads("chaos_squad_khorne_berserker", bearer_attach)
		
		-- Check number of icon bearers
		local num_bearer = self:CountSquads("chaos_squad_icon_bearer_undivided")
		if (num_bearer >= num_attach) then
			return 0
		end
	end
	return BuildBaseStrategy.ModifySquadDemand(self, iUnitID)
end

-- Arkhan 11.2006: Virtual method for checking out relic units
function ChaosBuildBaseStrategy:RelicRequired(sName)

	-- Check name
	if (sName == "chaos_bloodthirster_research") then
		return true
	elseif (sName == "chaos_squad_obliterator") then
		return true
	--[[elseif (sName == "chaos_wargear_upgrade_lvl_1_banner_addon") then
		return true
	elseif (sName == "chaos_wargear_upgrade_lvl_1_helm_of_lorgar_addon") then
		return true
	elseif (sName == "chaos_wargear_upgrade_lvl_2_daemonic_gauntlets_addon") then
		return true
	elseif (sName == "chaos_wargear_upgrade_lvl_2_runic_boots_addon") then
		return true
	elseif (sName == "chaos_wargear_upgrade_lvl_3_daemonic_armor_addon") then
		return true
	elseif (sName == "chaos_wargear_upgrade_lvl_3_daemonic_ascension_addon") then
		return true
	elseif (sName == "chaos_wargear_upgrade_01_manreaper_research_mp") then
		return true
	elseif (sName == "chaos_wargear_upgrade_02_accursed_crozius_research_mp") then
		return true]]
	end
	return false
end
