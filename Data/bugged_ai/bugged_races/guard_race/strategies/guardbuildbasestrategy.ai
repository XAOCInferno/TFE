----------------------------------------
-- File: 'guardbuildbasestrategy.ai'
-- Edited by Thudmeizer @ 02.10.2008

class 'GuardBuildBaseStrategy' (BuildBaseStrategy)

function GuardBuildBaseStrategy:__init( baseinfo ) super( baseinfo )
	
	-- Add build items that can cause an "invalid addon" console message
    CpuPrerequisites2.AddSpecialItem("addon_guard_kasrkin_quarters", CpuPrerequisites.BT_AddOn)
    CpuPrerequisites2.AddSpecialItem("addon_guard_ogryn_quarters", CpuPrerequisites.BT_AddOn)   
    CpuPrerequisites2.AddSpecialItem("guard_squad_kasrkin", CpuPrerequisites.BT_Squad)
    CpuPrerequisites2.AddSpecialItem("guard_squad_ogryns", CpuPrerequisites.BT_Squad)
	CpuPrerequisites2.AddSpecialItem("guard_wargear_upgrade_lvl_1_targeting_optics_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("guard_wargear_upgrade_lvl_2_pauldrons_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("guard_wargear_upgrade_lvl_3_chest_plate_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("guard_wargear_upgrade_lvl_3_governor_raiment_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("guard_wargear_upgrade_lvl_3_inquisitor_1", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("guard_wargear_upgrade_lvl_3_inquisitor_2", CpuPrerequisites.BT_AddOn)
	
	-- Add detector units (Best first, worst last)
	self:AddDetectorUnit("guard_squad_assassin")
	self:AddDetectorUnit("guard_squad_command_squad")
	self:AddDetectorUnit("guard_squad_inquisitor")
	self:AddDetectorUnit("guard_squad_psyker")
	self:AddDetectorUnit("guard_squad_commissar")
	self:AddDetectorUnit("guard_squad_priest")
	
	self.heroeWargear = {}
	--Heroe Wargear
	-- Name, Req, Power
	table.insert(self.heroeWargear, {"guard_wargear_upgrade_lvl_1_targeting_optics_addon",25,50})
	table.insert(self.heroeWargear, {"guard_wargear_upgrade_lvl_2_pauldrons_addon",25,50})
	table.insert(self.heroeWargear, {"guard_wargear_upgrade_lvl_3_chest_plate_addon",80,60})
	table.insert(self.heroeWargear, {"guard_wargear_upgrade_lvl_3_governor_raiment_addon",100,80})
	table.insert(self.heroeWargear, {"guard_wargear_upgrade_lvl_3_inquisitor_1",80,60})
	table.insert(self.heroeWargear, {"guard_wargear_upgrade_lvl_3_inquisitor_2",180,200})

	self.HeroSquadName = "guard_squad_command_squad"
	
	local heroeDelayLimit = 10 --% of waiting for the upgrade
	local heroeDelay = math.random (1,100)
	local heroeWargearCostFactor = 1.5
	
	--choose Upgrades
	self.heroeWargearPattern1 = math.random(1,2)
	self.heroeWargearPattern2 = math.random(3,4)
	self.heroeWargearPattern3 = math.random(5,6)
		
	aitrace ("Heroe Wargear T1: "..self.heroeWargear[self.heroeWargearPattern1][HeroeWargearNameIndex])
	aitrace ("Heroe Wargear T2: "..self.heroeWargear[self.heroeWargearPattern2][HeroeWargearNameIndex])
	aitrace ("Heroe Wargear T3: "..self.heroeWargear[self.heroeWargearPattern3][HeroeWargearNameIndex])
	
	if heroeDelay <= heroeDelayLimit then
		aipoptrace ("Heroe Wargear Delayed")
		for i = 1, table.getn(self.heroeWargear) do
			self.heroeWargear[i][HeroeWargearReqIndex]=self.heroeWargear[i][HeroeWargearReqIndex]*heroeWargearCostFactor
			self.heroeWargear[i][HeroeWargearPowIndex]=self.heroeWargear[i][HeroeWargearPowIndex]*heroeWargearCostFactor
		end
	else
		aipoptrace ("Heroe Wargear Not Delayed")
	end
end

function GuardBuildBaseStrategy:ChooseBuildProgram()
	return 1
end

function GuardBuildBaseStrategy:EvaluateSquadCap()
	--NOTE: Guards uses support for squads and pop for vehicles
	-- Check squad cap
	
	if (self:CheckSupportCap(250, 100)) then
	
		-- Check for squad cap research first
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Research
		if (self.tierLevel > 1 and not cpu_manager.cpu_player:IsResearchComplete( "guard_squad_cap_research_1" )) then
			tBuildType.name = "guard_squad_cap_research_1"
		elseif (self.tierLevel > 2 and not cpu_manager.cpu_player:IsResearchComplete( "guard_squad_cap_research_2" )) then
			tBuildType.name = "guard_squad_cap_research_2"
		else
			-- Check if a plan exists
			local iBuildingID = cpu_manager.stats:GetBuildingID("guard_infantry")
			if (self:PlanExists("Build Building Plan", iBuildingID)) then
				return
			end

			-- Check if any barracks are in production
			for oBuildChannel in build_manager:GetBuildChannelAIs() do
		
				-- Check building ID
				if (oBuildChannel:GetBlueprintID() == iBuildingID and not oBuildChannel:ConstructionDone()) then
					return
				end
			end
			
			-- Build a barracks
			tBuildType.btype = CpuPrerequisites.BT_Building
			tBuildType.name = "guard_infantry"
			if (self:TryBuild( tBuildType )) then
				aitrace("BuildController: Dynamic build of "..tBuildType.name)
			end
			return
		end
		
		-- Research squad cap
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic research of "..tBuildType.name)
		end
		return
	end
	
	-- Check Pop cap (used by vehicles)
	if (self:CheckSquadCap(250, 150)) then
	
		-- Check if a plan exists
		local iBuildingID = cpu_manager.stats:GetBuildingID("guard_mechanized")
		if (self:PlanExists("Build Building Plan", iBuildingID)) then
			return
		end
		
		-- Check if any vehicle buildings are in production
		for oBuildChannel in build_manager:GetBuildChannelAIs() do
	
			-- Check building ID
			if (oBuildChannel:GetBlueprintID() == iBuildingID and not oBuildChannel:ConstructionDone()) then
				return
			end
		end
		
		-- Build a vehicle building
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Building
		tBuildType.name = "guard_mechanized"
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic build of "..tBuildType.name)
		end
	end     
end

function GuardBuildBaseStrategy:GetBuildingName( sType )

	-- Return race specific object string
	if (sType == "HQ") then
		return "guard_hq"
		
	elseif (sType == "Generator") then
		return "guard_plasma_generator"
		
	elseif (sType == "BiggerGenerator") then
		return "guard_thermo_plasma"
		
	elseif (sType == "VehicleBuilding") then
		return "guard_mechanized"
		
	elseif (sType == "ListeningPost") then
		return "guard_listening_post"
		
	elseif (sType == "Turret") then
		return "guard_turret_heavy_bolter"
		
	elseif (sType == "Mine") then
		return "guard_mines"
	end
	
	return nil
end

function GuardBuildBaseStrategy:GetAddonBuilding( sType )

	if (sType == "addon_guard_turret") then
		return "guard_turret_heavy_bolter"
		
	elseif (sType == "addon_guard_list_post_1") then
		return "guard_listening_post"
		
	elseif (sType == "addon_guard_list_post_2") then
		return "guard_listening_post"
	
	elseif (sType == "addon_guard_kasrkin_quarters") then
		return "guard_infantry"
		
	elseif (sType == "addon_guard_ogryn_quarters") then
		return "guard_infantry"
	
	elseif (sType == "addon_guard_chimera_depot") then
		return "guard_hq"
	
	elseif (sType == "addon_guard_sentinel_depot") then
		return "guard_mechanized"
		
	elseif (sType == "addon_guard_hellhound_depot") then
		return "guard_mechanized"
	
	elseif (sType == "addon_guard_basilisk_depot") then
		return "guard_mechanized"
		
	elseif (sType == "addon_guard_lemanruss_depot") then
		return "guard_mechanized"
		
		elseif (sType == "addon_guard_demolisher_depot") then
		return "guard_mars_pattern"
		
	elseif (sType == "addon_guard_hq_1") then
		return "guard_hq"
		
	elseif (sType == "addon_guard_hq_2") then
		return "guard_hq"
		
	elseif (sType == "addon_guard_ministorum_temple") then
		return "guard_infantry"
		
	elseif (sType == "addon_guard_telepathica_temple") then
		return "guard_infantry"
	end	
	
	for i = 1, table.getn(self.heroeWargear) do
		if (sType == self.heroeWargear[i][HeroeWargearNameIndex]) then
			return "guard_hq"
		end
	end
	
	return nil
end

-- Arkhan 01.2006: Inherited method to check if an addon is a tier addon
function GuardBuildBaseStrategy:IsTierAddon( sName, iTargetTier )

	-- Check addon name and target tier
	if (sName == "addon_guard_hq_1" and iTargetTier == 2) then
		return true
	elseif (sName == "addon_guard_hq_2" and iTargetTier == 3) then
		return true
	end
	return false
end

-- Arkhan 11.2005: Returns the squad cap and support cap of the given squad
function GuardBuildBaseStrategy:GetUnitStats(sSquadName)

	if (sSquadName == "guard_squad_guardsmen") then
		return 0, 2
	elseif (sSquadName == "guard_squad_inquisitor") then
		return 0, 0
	elseif (sSquadName == "guard_squad_command_squad") then
		return 0, 0
	elseif (sSquadName == "guard_squad_hvy_weapons_platoon") then
		return 8, 0
	elseif (sSquadName == "guard_squad_hvy_weapons_platoon_lascannon") then
		return 8, 0
	elseif (sSquadName == "guard_squad_kasrkin") then
		return 0, 3
	elseif (sSquadName == "guard_squad_ogryns") then
		return 0, 3
	elseif (sSquadName == "guard_squad_chimera") then
		return 40, 0
	elseif (sSquadName == "guard_squad_sentinel") then
		return 20, 0
	elseif (sSquadName == "guard_squad_hellhound") then
		return 40, 0
	elseif (sSquadName == "guard_squad_basilisk") then
		return 50, 0
	elseif (sSquadName == "guard_squad_lemanruss") then
		return 80, 0
	elseif (sSquadName == "guard_squad_baneblade") then
		return 120, 0
	end
	return 0, 0
end

function GuardBuildBaseStrategy:UpdateTierLevel()

	-- Reset tier level
	self.tierLevel = 1
	
	-- Prepare
	local iHQAddon1ID = cpu_manager.stats:GetAddOnID("addon_guard_hq_1")
	local iHQAddon2ID = cpu_manager.stats:GetAddOnID("addon_guard_hq_2")
	local oStats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )

	-- Check HQ's for addons
	for oBase in oStats:GetBases() do
	  
		-- Check for valid building
		if (oBase:IsValid() and not oBase:IsListeningPost()) then

			-- Check for HQ addon 2
			if (oBase:HasAddOn(iHQAddon2ID)) then
				self.tierLevel = 3
				return
		
			-- Check for HQ addon 1 
			elseif (oBase:HasAddOn(iHQAddon1ID)) then
				self.tierLevel = 2
			end
		end
	end
end

function GuardBuildBaseStrategy:BuildFlexible()

	-- Dynamic research
	-- Item-Syntax: ResearchName, MinTier, RequisitionCost, PowerCost, MinSquadCap, MinSupportCap, SquadName, SquadMinCount
	
	-- Compute tier 1 researches
	if (self.tierLevel >= 1 and self.m_iArmyStrength >= 1000) then

		-- Basic infantry upgrades
		self:DynamicResearch("guard_guardsman_morale", 1, 80, 60, 0, 6, nil, 0)
		self:DynamicResearch("guard_upgrade_guardsmen_health", 1, 120, 80, 0, 8, nil, 0)
		self:DynamicResearch("guard_upgrade_guardsmen_range", 2, 100, 60, 0, 8, nil, 0)
		
		-- Command squad and hero upgrades
		self:DynamicResearch("guard_research_command_squad_size", 2, 100, 60, 40, 8, "guard_squad_command_squad", 1)
	end

	-- Compute tier 2 researches
	if (self.tierLevel >= 2 and self.m_iArmyStrength >= 1500) then

		-- Basic infantry upgrades
		self:DynamicResearch("guard_guardsman_morale_2", 2, 120, 80, 40, 8, nil, 0)
		self:DynamicResearch("guard_upgrade_weapon_specialization", 2, 150, 100, 40, 8, nil, 0)
		self:DynamicResearch("guard_upgrade_guardsmen_range_2", 2, 120, 80, 40, 8, nil, 0)
		self:DynamicResearch("guard_officer_melee_upgrade", 2, 150, 100, 40, 8, nil, 0)
		
		-- Command squad and hero upgrades
		self:DynamicResearch("guard_research_command_squad_size_2", 3, 120, 80, 40, 8, "guard_squad_command_squad", 1)
		self:DynamicResearch("guard_wargear_upgrade_01_master_power_claws_research_mp", 2, 60, 40, 40, 8, "guard_squad_command_squad", 1)
	end
	
	-- Compute tier 3 researches
	if (self.tierLevel >= 3 and self.m_iArmyStrength >= 2000) then
	
		-- Vehicle upgrades
		self:DynamicResearch("guard_supercharged_engines", 3, 80, 60, 40, 0, nil, 0)
		self:DynamicResearch("guard_sentinel_hull_plating", 3, 80, 60, 40, 0, "guard_squad_sentinel", 2)
		
		-- Elite infantry upgrades
		self:DynamicResearch("guard_research_kasrkin_elite", 3, 120, 80, 40, 6, "guard_squad_kasrkin", 2)
		self:DynamicResearch("guard_ogryn_elite", 3, 120, 80, 40, 6, "guard_squad_ogryns", 2)
		
		-- Command squad and hero upgrades
		self:DynamicResearch("guard_wargear_upgrade_02_power_fist_research_mp", 3, 80, 60, 40, 8, "guard_squad_command_squad", 1)
	end

	-- DynamicAddon(sAddonName, iAddonCount, iMinTier, iRequisitionCost, iPowerCost, iMinSquadCap, iMinSupportCap, sSquadName, iSquadMinCount)
	if (self:CountSquads("guard_squad_command_squad") > 0 and self.m_iArmyStrength >= 1000 + self.tierLevel * 250) then
	
		-- Hero wargear
		self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern2][HeroeWargearNameIndex], 1, 2,self.heroeWargear[self.heroeWargearPattern2][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern2][HeroeWargearPowIndex],0,12, self.HeroSquadName, 0)
		self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern3][HeroeWargearNameIndex], 1, 3,self.heroeWargear[self.heroeWargearPattern3][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern3][HeroeWargearPowIndex],4,16, "guard_squad_inquisitor", 0)
		for i= 1, table.getn(self.heroeWargear) do
			self:DynamicAddon(self.heroeWargear[i][HeroeWargearNameIndex], 1, 2,self.heroeWargear[i][HeroeWargearReqIndex], self.heroeWargear[i][HeroeWargearPowIndex],0,10,self.HeroSquadName, 0)
		end
	end
	
	-- Restrict dynamic builds to hard difficulty or higher
	if (CpuManager.AISettings.bMultiBuildings) then
	
		-- Item-Syntax: BuildingName, BuildingCount, MinTier, MinRequisition, MinPower, MinSquadCap, MinSupportCap	
		if (self:GetBuildingCountByName("guard_hq") > 1) then
			self:DynamicBuild("guard_infantry", 2, 2, 800, 200, 200, 6)
			self:DynamicBuild("guard_mechanized", 2, 2, 200, 800, 80, 6)			
		end
	end
end

-- Arkhan 01.2006: Method to check if force tech should be computed
function GuardBuildBaseStrategy:ForceTech()

	-- Check time
	if (g_iGMT < 60 * CpuManager.ForceTech.StartTier1) then
		return false
	end
	
	-- Check ressources
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	
	-- Check tier
	local iTierLevel = self:GetTierLevel()
	if (iTierLevel == 1) then
	
		-- Check resources
		if (iRequisition > 600 and iPower > 200) then
			return false
		end
		return not self.m_bHQAddon1
		
	elseif (iTierLevel == 2) then

		-- Check for vehicle building
		if (self:GetBuildingCountByName("guard_mechanized", false) < 1) then
			return true
		end
		
		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier2 and (iRequisition < 600 or iPower < 600)) then
			return true
		end
		
	end
	return false
end

-- Arkhan 03.2006: Return placement type for buildings
function GuardBuildBaseStrategy:GetPlacementType(iBuildingID)
	
	-- Check building
	if (cpu_manager:IsHQ(iBuildingID)) then
		if (self:GetBuildingCountByName("guard_hq") < 1) then
			return "HQ"
		else
			return "Safeplace"
		end
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("guard_infantry") or
			iBuildingID == cpu_manager.stats:GetBuildingID("guard_mechanized")) then
		return "Military"
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("guard_mars_pattern")) then
		return "Front1"
	elseif (cpu_manager:IsTurret(iBuildingID)) then
		return "Front2"
	elseif (cpu_manager:IsMine(iBuildingID)) then
		return "Mine"
	elseif (cpu_manager:IsGenerator(iBuildingID) or
			iBuildingID == cpu_manager.stats:GetBuildingID("guard_tactica")) then
		return "BaseBack"
	end
	return "Basic"
end

-- Arkhan 03.2006: Inherited method to modify squad demand
function GuardBuildBaseStrategy:ModifySquadDemand(iUnitID)

	-- No more guard leaders than guard/kasrkin/ogryn squads
	if (iUnitID == cpu_manager.stats:GetSquadID("guard_squad_commissar") or
		iUnitID == cpu_manager.stats:GetSquadID("guard_squad_priest") or
		iUnitID == cpu_manager.stats:GetSquadID("guard_squad_psyker")) then
			
		-- Check number of attachable squads
		local guard_attach1 = function( squad_ai )
			return (squad_ai:GetTactic():GetUnitStrength() >= 120 and squad_ai:CanReceiveAttachment())
		end
		local guard_attach2 = function( squad_ai )
			return (squad_ai:GetTactic():GetUnitStrength() >= 200 and squad_ai:CanReceiveAttachment())
		end
		local num_attach = self:CountSquads("guard_squad_guardsmen", guard_attach1) +
						   self:CountSquads("guard_squad_kasrkin", guard_attach2) + 
						   self:CountSquads("guard_squad_ogryns", guard_attach2)

		-- Check number of leaders
		local num_leader = self:CountSquads("guard_squad_commissar") +
						   self:CountSquads("guard_squad_priest") +
						   self:CountSquads("guard_squad_psyker")
		if (num_leader > 0 and num_leader >= num_attach) then
			return 0
		end
	end
	return BuildBaseStrategy.ModifySquadDemand(self, iUnitID)
end

-- Arkhan 11.2006: Virtual method for checking out relic units
function GuardBuildBaseStrategy:RelicRequired(sName)

	-- Check name
	if (sName == "guard_squad_baneblade") then
		return true
	elseif (sName == "guard_squad_assassin") then
		return true
	elseif (sName == "guard_wargear_upgrade_lvl_1_targeting_optics_addon") then
		return true
	elseif (sName == "guard_wargear_upgrade_lvl_2_pauldrons_addon") then
		return true
	elseif (sName == "guard_wargear_upgrade_lvl_3_chest_plate_addon") then
		return true
	elseif (sName == "guard_wargear_upgrade_lvl_3_governor_raiment_addon") then
		return true
	elseif (sName == "guard_wargear_upgrade_lvl_3_inquisitor_1") then
		return true
	elseif (sName == "guard_wargear_upgrade_lvl_3_inquisitor_2") then
		return true
	elseif (sName == "guard_wargear_upgrade_01_master_power_claws_research_mp") then
		return true
	elseif (sName == "guard_wargear_upgrade_02_power_fist_research_mp") then
		return true
	end
	return false
end

function GuardBuildBaseStrategy:CalculateSquadDemand( unit_id, unit_stats )

	--check if this squad type is locked out
	if not build_manager:CanBuildSquad( unit_id ) then
		return VALUE_LOCK_BUILD
	end

	local prereq = CpuPrerequisites( cpu_manager.cpu_player, unit_stats:GetSquadName(), CpuPrerequisites.BT_Squad )

	--check if we can even build it, ever
	if prereq:CannotFulfillPrereqs() then
		return VALUE_NEVER_BUILD
	end
   
	local squad_name = unit_stats:GetSquadName()
	local squad_count = self:CountSquads(squad_name)
	local demand = 0
	local deval = 0
	
	-- Modify for certain squads we like/dislike
	local squad_mod = self:ModifySquadDemand(unit_id)
	--aitrace ("    "..string.format("%-30.30s",unit_stats:GetSquadName()))
	
	-- get class demand
	local class_demand = self:GetClassDemand( unit_stats:GetClass() )
	--aitrace ("      class demand: "..string.format("%7.2f",class_demand))
	--if class_demand < 0 then
		--inverse scale for bigger units
		--class_demand = ( 10 - unit_stats:GetClassRating() ) * class_demand
	--else
		--class_demand = class_demand
	--end
  
	-- get standard effectiveness demand
	local effect_demand = 0	
	for class = 0, UnitStatsAI.UC_Count - 1 do
	  
		effect_demand = effect_demand + 
			self:GetEffectivenessDemand( class ) * unit_stats:GetEffectivenessRating( class )
		--aitrace ("      Class: "..string.format("%02.0f",class).." General Eff Dmd: "..string.format("%06.2f",self:GetEffectivenessDemand( class ))..
			--" Unit Eff Rat: "..string.format("%06.2f",unit_stats:GetEffectivenessRating( class )))
		--aitrace ("      Cumulative eff dmd : "..string.format("%08.2f",effect_demand))
	end
	--aitrace ("      effect demand: "..string.format("%7.2f",effect_demand))

	--effect_demand = effect_demand / UnitStatsAI.UC_Count commented by Kaiser Soze: reduces too much the effectiveness
	if effect_demand > 0 then
   		effect_demand = math.sqrt(effect_demand)
 	else
   		effect_demand = effect_demand / 3
   	end	
	  
   	--depress rating according to tier
   	--we depress according squad_mod
	if squad_mod == 0 then
		deval = VALUE_NO_ATTACH
	else --we depress accoring to standard race specific values
		deval = self:DevalueUnitByTier( unit_stats )
	end
	local unitRating = unitStatsUpdater:GetUnitRating( unit_stats:GetSquadName(), unit_stats ) * math.random( 1,2 )
	demand = class_demand + effect_demand
	if demand < 0 then
   		demand = 0
   	end	
	demand = demand + unitRating + deval
	
	aitrace ("      "..string.format("%-30.30s",squad_name).." Total Demand: "..string.format("%6.2f",demand))
	aitrace ("       Rating: "..string.format("%02d",unitRating).." Class: "..string.format("%6.2f",class_demand).." Effe: "..string.format("%6.2f",effect_demand).." Deval: "..string.format("%6.2f",deval)) 
   
	--if I can't build it right now because I don't have the money
	--figure out how long it'll take, and factor that in
	local power_needed = unit_stats:GetCost( ResourceAmount.RT_Power ) - 
		  resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local req_needed = unit_stats:GetCost( ResourceAmount.RT_Requisition ) - 
		  resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local req_weight = 0
	local power_weight = 0
	local ticks_per_second = 8
	
	if power_needed > 0 then
		  
	   --rate is measured in rate per minute. we want it per second
	   local power_rate = resource_manager:GetResourceRate( ResourceAmount.RT_Power ) / 60
	   
	   --if no power coming in, don't try to build stuff with power prereqs!
	   if power_rate == 0 then
		  return VALUE_RESOURCE_RATE
	   else
		  
		  power_weight = power_needed / power_rate		 
	   end	  
	end
	
	if req_needed > 0 then
	   
	   --rate is measured in rate per minute. we want it per second
	   local req_rate = resource_manager:GetResourceRate( ResourceAmount.RT_Requisition ) / 60
	   
	   if req_rate == 0 then
		  return VALUE_RESOURCE_RATE
	   else
		  req_weight = req_needed / req_rate
	   end
	end
	
	--how many seconds before I can build this thing
	local resource_time = 0
	if power_weight > req_weight then
	   resource_time = power_weight
	else
	   resource_time = req_weight
	end
	
	--check time cap
	if resource_time > 180 then
	   return VALUE_BUILD_TIME
	end
   
	-- Arkhan 11.2005: Check ressources
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

	-- Arkhan 11.2005: Check squad and support cap (IG use)
	local iSquadCap   = build_manager:GetSupportCapCurrentMax() - build_manager:GetSupportCapLeft()
	local iSupportCap = self:GetCurrentSquadCap()
   
	-- Modify unit demand
	if (self.m_bModifyUnitDemand) then
   
		-- Arkhan 11.2005: Force the build of vehicles if power is available and requisition rare
		if (iPower > 2 * iRequisition and iSquadCap >= 4) then
			if (unit_stats:GetSupportCapReq() > 0) then
				demand = demand * 2
			end
		end
		
		-- Arkhan 01.2006: Force the build of squads if requisition is available and power rare
		if (iRequisition > 2 * iPower and iSupportCap >= 80) then
			if (unit_stats:GetSquadCapReq() > 0) then
				demand = demand * 2
			end
		end
	end
	
	-- Arkhan 12.2005: Decrease squad demand for every already existing unit of this type by 20%, to increase unit diversity
	demand = math.max(demand * (100 - 20 * squad_count) / 100, demand / 2)
	aitrace ("      "..string.format("%-30.30s",squad_name).." Final Demand: "..string.format("%6.2f",demand))
	return demand   
end

-- Arkhan 11.2006: Check if we can reinforce
function GuardBuildBaseStrategy:CheckReinforce()

	-- Check resources
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition ) / self.m_iTechBreak
	local iPower       = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) / self.m_iTechBreak
	
	-- Keep some resources for strategic points and other things
	if (iRequisition < Tactic.ResourceFloor.requisition or iPower < Tactic.ResourceFloor.power) then
		return false
	end

	-- Don't reinforce if we've lots of power, rare requisition, and few vehicles
	local iSupportCapLeft = build_manager:GetSquadCapLeft()
	if (iSupportCapLeft >= 40 and iPower > 800 and iRequisition < 400) then
		return false
	end
	return true
end