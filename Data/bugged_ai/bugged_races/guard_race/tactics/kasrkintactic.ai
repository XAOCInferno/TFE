----------------------------------------
-- File: 'kasrkintactic.ai'
-- Edited by Thudmeizer @ 01.10.2008

class 'KasrkinTactic' (GuardInfantryTactic)

Kasrkin = {}

function KasrkinTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Kasrkin Tactic")
	
	-- Squad is able to occupy bunkers
	self.m_bBunkerSquad = true
	
	-- Set upgrade type
	self.bLongRange = (math.random(1, 3) ~= 1 and cpu_manager:GetTierLevel() > 1)
end

function KasrkinTactic:InitAbilities()

	-- Init ability ID's
	if (Kasrkindouble_id == nil) then
		Kasrkindouble_id = cpu_manager.stats:GetAbilityID( "guard_kasrkin_sergeant_double_time" )	
	end

	if (Kasrkin.infiltrate_id == nil) then
		Kasrkin.infiltrate_id = cpu_manager.stats:GetAbilityID( "ability_infiltrate_kasrkin" )	
	end

	if (Kasrkin.frag_id == nil) then
		Kasrkin.frag_id = cpu_manager.stats:GetAbilityID( "guard_kasrkin_frag_grenades" )	
	end

	if (Kasrkin.flashbang_id == nil) then
		Kasrkin.flashbang_id = cpu_manager.stats:GetAbilityID( "guard_kasrkin_flashbang_grenades" )	
	end
end

function KasrkinTactic:DoAbilities()

	-- Try to throw Krak grenade
	Ability.DoAbilityTarget( self.squad_ai, Kasrkin.frag_id, Ability.Filters.CloseEnemy, 4 )
	
	-- Try to throw Flashbang grenade
	Ability.DoAbilityTarget( self.squad_ai, Kasrkin.flashbang_id, Ability.Filters.CloseInfiltratedOrVisibleEnemyInfantry, 4 )

	-- Try to use march ability
	if (self.squad_ai:IsBroken() or self.stateID ~= Tactic.StateID.NoState or self.state == Tactic.States.Retreat) then

		if (self.squad_ai:CanDoAbility( Kasrkindouble_id )) then
			self.squad_ai:DoSpecialAbility( Kasrkindouble_id )
		end
	end

	-- Try to use infiltrate ability
	if (self.squad_ai:IsInCombat() and not self.squad_ai:IsBroken() or self.squad_ai:IsCapturing()) then

		if (self.squad_ai:CanDoAbility( Kasrkin.infiltrate_id )) then
			self.squad_ai:DoSpecialAbility( Kasrkin.infiltrate_id )
		end
	end
	
	-- Compute common abilities
	GuardInfantryTactic.DoAbilities(self)
end

function KasrkinTactic:Upgrade()

	-- Check if we are reinforcing
	if (self.squad_ai:IsReinforcing() or not self.squad_ai:HasUpgradableTrooper()) then
		return
	end

	-- If I am broken, don't upgrade!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
		return
	end	
	
	-- Only upgrade in healthy state
	if (self.squad_ai:GetNumTroopers() < self.squad_ai:GetMaxTroopers() * 0.6 or self.squad_ai:GetHealthPercentage() < 0.5 or self.squad_ai:IsUnderAttack()) then
		return
	end
	
	-- Check upgrade type
	if (self.bLongRange) then
	
		-- Upgrade to plasma rifle and melta gun
		if (math.random(1, 2) == 1) then
		
			-- Upgrade to plasma rifle
			self.squad_ai:DoBestUpgrade(UnitStatsAI.UC_HeavyInfantryMed)
		else
			-- Upgrade to melta gun
			self.squad_ai:DoBestUpgrade(UnitStatsAI.UC_VehicleMed)
		end
	else
		-- Upgrade to flamer
		self.squad_ai:DoBestUpgrade(UnitStatsAI.UC_MonsterMed)
	end
end