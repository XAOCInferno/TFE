----------------------------------------
-- File: 'TauCommandertactic.ai'
-- Edited by Thudmeizer @ 01.10.2008

class 'TauCommanderTactic' (TauInfantryTactic)

TauCommander = {}

function TauCommanderTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Tau Commander Tactic")

	self:InitAbilities()

	self.lastused_ability_snaretrap_time = g_iGMT
	self.lastused_ability_snaretrap_position = squad_ai:GetPosition()
end

function TauCommanderTactic:InitAbilities()

	-- Init ability ID's
	if (TauCommander.iInfiltrateID == nil) then
		TauCommander.iInfiltrateID = cpu_manager.stats:GetAbilityID( "ability_infiltrate_tau_commander" )	
	end

	if (TauCommander.turbo == nil) then
		TauCommander.turbo = cpu_manager.stats:GetAbilityID( "tau_turbo_boost_commander" )	
	end
	
	if (TauCommander.ability_snaretrap_id == nil) then
		TauCommander.ability_snaretrap_id = cpu_manager.stats:GetAbilityID( "tau_snare_trap")
		TauCommander.min_snaretrap_requisition = 300	-- Amount of requisition to have before typical use
		TauCommander.min_snaretrap_time = 160 			-- Wait between use, in possibly same location
		TauCommander.min_snaretrap_distance = self.squad_ai:GetAbilityRange(TauCommander.ability_snaretrap_id) * 2	-- Min distance between consecutive throws
	end
	
	-- Init common abilities
	TauInfantryTactic.InitAbilities(self)
end

-- Tau Commander is allowed to retreat even directly after a jump
function TauCommanderTactic:SetTarget( target, variant_type )

	self.variant_type = variant_type
	self.target = Vector3f(target)
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

-- Assassinate win condition -- never attack
function TauCommanderTactic:IsAttacker()	
	return (not cpu_manager.assassinate and self:IsCommanderAttacker())
end

-- Assassinate win condition -- never defend
function TauCommanderTactic:IsDefender()
	return (not cpu_manager.assassinate and self:IsCommanderDefender())
end

-- Assassinate win condition -- never jump into combat
function TauCommanderTactic:JumpAttack()
	if (not cpu_manager.assassinate) then
		Tactic.JumpAttack(self)
	end
end

function TauCommanderTactic:DoAbilities()

	-- Target generic enemy 
	--Ability.DoAbilityTarget( self.squad_ai, TauCommander.acquired, Ability.Filters.CloseEnemy, 1 )

	-- Commander infiltrate
	if (self.squad_ai:IsInCombat() and not self.squad_ai:IsBroken() or self.squad_ai:IsCapturing()) then

		if (self.squad_ai:CanDoAbility( TauCommander.iInfiltrateID )) then
			self.squad_ai:DoSpecialAbility( TauCommander.iInfiltrateID )
		end
	end

	-- Commander boost while moving
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then
	
		if (self.squad_ai:CanDoAbility(TauCommander.turbo)) then
			self.squad_ai:DoSpecialAbility(TauCommander.turbo)
		end
	end

	-- If surrounded, try to use the snare trap
	local range = self.squad_ai:GetAbilityRange(TauCommander.ability_snaretrap_id)
	if (self.squad_ai:IsInCombat()) then

		local vSquadPos = self.squad_ai:GetPosition()
		local fThrowFactor = 1 / 3
		local oEnemy = Ability.Filters.CloseEnemy(vSquadPos , range, 4)
		if (oEnemy ~= nil) then
		
			local vEnemyPos = oEnemy:GetPosition()
			local vTargetPos = Vector3f(vSquadPos)
			vTargetPos.x = vTargetPos.x + (vEnemyPos.x - vSquadPos.x) * fThrowFactor
			vTargetPos.z = vTargetPos.z + (vEnemyPos.z - vSquadPos.z) * fThrowFactor
			self:DoSpecialAbilitySnareTrap(vTargetPos, true)
		end
	end

	if (math.random(1, 2) == 1) then
	
		local target = Ability.Filters.CloseStrategicPoint( self.squad_ai:GetPosition(), range, 0 )
		if (target ~= nil) then
			self:DoSpecialAbilitySnareTrap(target:GetPosition(),false)
		end
	else		
		-- Game can crash if position is directly under commander
		local offset = Vector3f(0.5,0,0.5)
		self:DoSpecialAbilitySnareTrap(self.squad_ai:GetPosition() + offset, false)
	end
	
	-- Compute common abilities
	TauInfantryTactic.DoAbilities(self)
end

function TauCommanderTactic:Upgrade()

end

function TauCommanderTactic:Reinforce()

	if (not self.squad_ai:IsReinforcing()) then

		-- try for different types of squad members
		local decoyDroneIndex = 0
		local attackDroneIndex = 1
		local shieldDroneIndex = 2
		
		local numDecoyDrone = self.squad_ai:GetLeaderCount( decoyDroneIndex )
		local numAttackDrone = self.squad_ai:GetLeaderCount( attackDroneIndex )
		local numShieldDrone = self.squad_ai:GetLeaderCount( shieldDroneIndex )
			
		-- Desired number of each leader type
		local desiredDecoyDrone = 2
		local desiredAttackDrone = 3 
		local desiredShieldDrone = 1
		
		-- Desired order of reinforcing
		if (numShieldDrone < desiredShieldDrone) then
		
			if (self.squad_ai:CanReinforce( true, shieldDroneIndex )) then
				self.squad_ai:DoReinforce( true, shieldDroneIndex )
			end
		end
		if (numAttackDrone < desiredAttackDrone) then
		
			if (self.squad_ai:CanReinforce( true, attackDroneIndex )) then
				self.squad_ai:DoReinforce( true, attackDroneIndex )
			end
		end
		if (numDecoyDrone < desiredDecoyDrone) then
		
			if (self.squad_ai:CanReinforce( true, decoyDroneIndex )) then
				self.squad_ai:DoReinforce( true, decoyDroneIndex )
			end
		end
	end
end

function TauCommanderTactic:DoSpecialAbilitySnareTrap(position, skip_prereqs)

	local current_requisition = resource_manager:GetResourceAmount():Get(ResourceAmount.RT_Requisition)
	local last_time = self.lastused_ability_snaretrap_time
	local last_pos = self.lastused_ability_snaretrap_position
		
	if (skip_prereqs or 
		(current_requisition > TauCommander.min_snaretrap_requisition and g_iGMT - last_time > TauCommander.min_snaretrap_time) or 
		(current_requisition > TauCommander.min_snaretrap_requisition and distance(position, last_pos) > TauCommander.min_snaretrap_distance)) then
		if (self.squad_ai:CanDoAbility(TauCommander.ability_snaretrap_id)) then
			self.squad_ai:DoSpecialAbilityPos(TauCommander.ability_snaretrap_id, position)
			self.lastused_ability_snaretrap_time = g_iGMT
			self.lastused_ability_snaretrap_position = position
		end
	end
end

function TauCommanderTactic:Update()

    if (self:IsComplete()) then
		return false
	end

	-- State machine
	if (not InfantryTactic.Update( self )) then
		return false
	end
	
	-- Check for jump retreat
	self:JumpRetreat()
	
	return true
end
