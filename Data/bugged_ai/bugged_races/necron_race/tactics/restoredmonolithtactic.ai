----------------------------------------
-- File: 'restoredmonolithtactic.ai'
-- Created by Arkhan @ 31.10.2006

class 'RestoredMonolithTactic' (NecronVehicleTactic)

function RestoredMonolithTactic:__init( squad_ai ) super( squad_ai )
	
	self:SetName("Restored Monolith Tactic")
end

function RestoredMonolithTactic:JumpAttackRanged()

	-- Check if we can jump directly to the target
	if (Tactic.JumpAttackRanged(self)) then
		return true
	end
	
	-- Get position and jump range
	local vMonolithPosition = self.squad_ai:GetPosition()
	local iJumpRange = sqr(self.squad_ai:GetJumpDistance())
	local iCheckRange = sqr(self.squad_ai:GetJumpDistance() + 20)
	local iClosestDistance = distance_sqr(vMonolithPosition, self.target)
	local vTargetPos = nil

	-- Get closest squad to target position
	for oSquad in military_manager:GetSquads() do

		-- Check if squad is valid
		if (oSquad:IsValid()) then
		
			-- Check distance
			local vPosition = oSquad:GetPosition()
			local iDistanceToMonolith = distance_sqr(vPosition, vMonolithPosition)
			local iDistanceToTarget = distance_sqr(vPosition, self.target)
			if (iDistanceToMonolith < iCheckRange and iDistanceToTarget < iClosestDistance) then
				iClosestDistance = iDistanceToTarget
				vTargetPos = vPosition
			end
		end
	end
	
	-- Get closest building to target position
	for oBuilding in military_manager:GetBases() do
	
		-- Check if building is valid
		if (oBuilding:IsValid()) then
		
			-- Check distance
			local vPosition = oBuilding:GetPosition()
			local iDistanceToMonolith = distance_sqr(vPosition, vMonolithPosition)
			local iDistanceToTarget = distance_sqr(vPosition, self.target)
			if (iDistanceToMonolith < iCheckRange and iDistanceToTarget < iClosestDistance) then
				iClosestDistance = iDistanceToTarget
				vTargetPos = vPosition
			end
		end
	end
	
	-- Don't jump if we didn't find a target
	if (vTargetPos == nil) then
		return false
	end
	
	-- Check if target is too close
	local iTargetDistance = distance_sqr(vMonolithPosition, vTargetPos)
	if (iTargetDistance < sqr(35)) then
		return false
	end
	
	-- Calculate direction vector
	local vDirVec = Vector3f()
	vDirVec.x = (vMonolithPosition.x - vTargetPos.x) / iTargetDistance
	vDirVec.y = 0
	vDirVec.z = (vMonolithPosition.z - vTargetPos.z) / iTargetDistance
	
	-- Try to jump in target range (3 tries with offset 10, 20, 30)
	for iLoop1 = 1, 3 do
	
		-- Create a jump position
		local vJumpPosition = vTargetPos
		local iOffset = iLoop1 * 10
		vJumpPosition.x = vJumpPosition.x + iOffset * vDirVec.x
		vJumpPosition.z = vJumpPosition.z + iOffset * vDirVec.z
			
		-- Check if we can jump to position
		local iJumpDistanceSqr = distance_sqr(vMonolithPosition, vJumpPosition)
		if (iJumpDistanceSqr <= iJumpRange and iJumpDistanceSqr > sqr(60) and
			cpu_manager.terrain_analyzer:GetPathingDistance(vMonolithPosition, vJumpPosition) >= 0 and
			self.squad_ai:CanJumpToPosition(vJumpPosition)) then
			
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return true
		end
	end
	return false
end
