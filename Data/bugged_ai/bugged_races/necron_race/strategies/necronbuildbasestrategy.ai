----------------------------------------
-- File: 'Necronbuildbasestrategy.ai'
-- Edited by Thudmeizer @ 02.10.2008

class 'NecronBuildBaseStrategy' (BuildBaseStrategy)

function NecronBuildBaseStrategy:__init( baseinfo ) super( baseinfo )

	-- Add build items that can cause an "invalid addon" console message
	CpuPrerequisites2.AddSpecialItem("necron_wargear_upgrade_lvl_1_death_mask_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("necron_wargear_upgrade_lvl_1_mantle_of_doom_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("necron_wargear_upgrade_lvl_2_gauntlets_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("necron_wargear_upgrade_lvl_2_under_shoulder_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("necron_wargear_upgrade_lvl_3_death_shroud_addon", CpuPrerequisites.BT_AddOn)
	CpuPrerequisites2.AddSpecialItem("necron_wargear_upgrade_lvl_3_ribcage_addon", CpuPrerequisites.BT_AddOn)

	-- Add detector units (Best first, worst last)
	self:AddDetectorUnit("necron_lord_squad")
	self:AddDetectorUnit("necron_deceiver_squad")
	self:AddDetectorUnit("necron_lord_destroyer_squad")
	self:AddDetectorUnit("necron_wraith_squad")
	self:AddDetectorUnit("necron_builder_scarab_squad")

	-- Build first two HQ's at start pos
	self.m_iNumHQAtStartPos = 2
	
	-- Don't modify unit demand if we've excess ressources
	self.m_bModifyUnitDemand = false
	
	-- Maximum amount of generators to build
	self.m_iMaxGenerators = 10
	
	self.heroeWargear = {}
	
	--Heroe Wargear
	-- Name, Req, Power
	table.insert(self.heroeWargear, {"necron_wargear_upgrade_lvl_1_death_mask_addon",0,80})
	table.insert(self.heroeWargear, {"necron_wargear_upgrade_lvl_1_mantle_of_doom_addon",0,100})
	table.insert(self.heroeWargear, {"necron_wargear_upgrade_lvl_2_gauntlets_addon",0,150})
	table.insert(self.heroeWargear, {"necron_wargear_upgrade_lvl_2_under_shoulder_addon",0,120})
	table.insert(self.heroeWargear, {"necron_wargear_upgrade_lvl_3_death_shroud_addon",0,450})
	table.insert(self.heroeWargear, {"necron_wargear_upgrade_lvl_3_ribcage_addon",0,350})

	self.HeroSquadName = "necron_lord_squad"
	
	local heroeDelayLimit = 10 --% of waiting for the upgrade
	local heroeDelay = math.random (1,100)
	local heroeWargearCostFactor = 1.5
	aipushtrace ("BuildBaseStrategy:Heroe Wargear Election")
	
	--choose Upgrades
	self.heroeWargearPattern1 = math.random(1,2)
	self.heroeWargearPattern2 = math.random(3,4)
	self.heroeWargearPattern3 = math.random(5,6)
		
	aitrace ("Heroe Wargear T1: "..self.heroeWargear[self.heroeWargearPattern1][HeroeWargearNameIndex])
	aitrace ("Heroe Wargear T2: "..self.heroeWargear[self.heroeWargearPattern2][HeroeWargearNameIndex])
	aitrace ("Heroe Wargear T3: "..self.heroeWargear[self.heroeWargearPattern3][HeroeWargearNameIndex])
	
	if heroeDelay <= heroeDelayLimit then
		aipoptrace ("Heroe Wargear Delayed")
		for i = 1, table.getn(self.heroeWargear) do
			self.heroeWargear[i][HeroeWargearReqIndex]=self.heroeWargear[i][HeroeWargearReqIndex]*heroeWargearCostFactor
			self.heroeWargear[i][HeroeWargearPowIndex]=self.heroeWargear[i][HeroeWargearPowIndex]*heroeWargearCostFactor
		end
	else
		aipoptrace ("Heroe Wargear Not Delayed")
	end
end

function NecronBuildBaseStrategy:ChooseBuildProgram()
	return 1
end

function NecronBuildBaseStrategy:GetBuildingName( sType )

	-- Return race specific object string
	if (sType == "HQ") then
		return "monolith"
		
	elseif (sType == "Generator") then
		return "necron_plasma_generator"
		
	elseif (sType == "BiggerGenerator") then
		return "necron_thermoplasma_generator"
		
	elseif (sType == "VehicleBuilding") then
		return "necron_greater_summoning_core"
		
	elseif (sType == "ListeningPost") then
		return "necron_listening_post"
		
	elseif (sType == "Turret") then
		return "necron_turret"

	elseif (sType == "Mine") then
		return "necron_turret"
	end
	return nil
end

function NecronBuildBaseStrategy:GetAddonBuilding( sType )

	if (sType == "addon_necron_hq_1") then
		return "monolith"
		
	elseif (sType == "addon_necron_hq_2") then
		return "monolith"
		
	elseif (sType == "addon_necron_list_post_1") then
		return "necron_listening_post"
		
	elseif (sType == "addon_necron_list_post_2") then
		return "necron_listening_post"
		
	elseif (sType == "addon_necron_turret") then
		return "necron_turret"
	end
	
	for i = 1, table.getn(self.heroeWargear) do
		if (sType == self.heroeWargear[i][HeroeWargearNameIndex]) then
			return "necron_forbidden_archive"
		end
	end
	
	return nil
end

-- Arkhan 11.2005: Returns the squad cap and support cap of the given squad
function NecronBuildBaseStrategy:GetUnitStats(sSquadName)

	if (sSquadName == "necron_basic_warrior_squad") then
		return 3, 0
	elseif (sSquadName == "necron_flayed_one_squad") then
		return 3, 0
	elseif (sSquadName == "necron_immortal_squad") then
		return 3, 0
	elseif (sSquadName == "necron_wraith_squad") then
		return 0, 1
	elseif (sSquadName == "necron_pariah_squad") then
		return 4, 0
	elseif (sSquadName == "necron_scarab_squad") then
		return 0, 0
	elseif (sSquadName == "necron_tomb_spyder_squad") then
		return 0, 3
	elseif (sSquadName == "necron_destroyer_squad") then
		return 0, 2
	elseif (sSquadName == "necron_heavy_destroyer_squad") then
		return 0, 3
	elseif (sSquadName == "necron_lord_destroyer_squad") then
		return 0, 0
	end
	return 0, 0
end

-- Arkhan 01.2006: Inherited method to check if an addon is a tier addon
function NecronBuildBaseStrategy:IsTierAddon( sName, iTargetTier )

	-- Check addon name and target tier
	if (sName == "addon_necron_hq_1" and iTargetTier == 2) then
		return true
	elseif (sName == "addon_necron_hq_2" and iTargetTier == 3) then
		return true
	end
	return false
end

function NecronBuildBaseStrategy:UpdateTierLevel()

	-- Reset tier level
	self.tierLevel = 1
	
	-- Prepare
	local iHQAddon1ID = cpu_manager.stats:GetAddOnID("addon_necron_hq_1")
	local iHQAddon2ID = cpu_manager.stats:GetAddOnID("addon_necron_hq_2")
	local oStats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )
	
	-- Check HQ's for addons
	for oBase in oStats:GetBases() do

		-- Check for valid building
		if (oBase:IsValid() and not oBase:IsListeningPost()) then

			-- Check for HQ addon 2
			if (oBase:HasAddOn(iHQAddon2ID)) then
				self.tierLevel = 3
				return
				
			-- Check for HQ addon 1 
			elseif (oBase:HasAddOn(iHQAddon1ID)) then
				self.tierLevel = 2
			end
		end
	end
end

-- Arkhan 01.2006: Method to check if force tech should be computed
function NecronBuildBaseStrategy:ForceTech()

	-- Check time
	if (g_iGMT < 60 * CpuManager.ForceTech.StartTier1) then
		return false
	end
	
	-- Check ressources
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

	-- Check tier
	local iTierLevel = self:GetTierLevel()
	if (iTierLevel == 1) then
	
		-- Check resources
		if (iPower > 600) then
			return false
		end
		return not self.m_bHQAddon1
		
	elseif (iTierLevel == 2) then

		-- Check buildings for greater summoning core
		if (self:GetBuildingCountByName("necron_greater_summoning_core", false) < 1) then
			return true
		end
		
		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier2 and iPower < 1000) then
			return true
		end
		
	end
	return false
end

function NecronBuildBaseStrategy:BuildFlexible()

	-- Dynamic research
	-- Item-Syntax: ResearchName, MinTier, RequisitionCost, PowerCost, MinSquadCap, MinSupportCap, SquadName, SquadMinCount
	
	-- Compute tier 1 researches
	if (self.tierLevel >= 1 and self.m_iArmyStrength >= 1000) then
	
		-- Basic infantry upgrades
		self:DynamicResearch("necron_warrior_boost", 1, 0, 280, 8, 0, "necron_basic_warrior_squad", 2)
		
		-- Deceiver ranged combat research
		if (self:CountSquads("necron_deceiver_squad") > 0) then
		
			self:DynamicResearch("necron_deceiver_awakening", 1, 0, 50, 8, 0, nil, 0)
		end
		
		-- Necron lord upgrades
		if (self:CountSquads("necron_lord_squad") > 0) then
		
			-- Timed: Lord and phase-shifted units are immune to all forms of damage, but cannot attack.	
			self:DynamicResearch("necron_phase_shifter_research", 1, 0, 100, 8, 0, nil, 0)
			
			-- Timed: Necron units advance normally while their opponents move in slow motion.
			self:DynamicResearch("necron_chronometron_research", 1, 0, 180, 8, 0, nil, 0)
		end
	end
	
	-- Compute tier 2 researches
	if (self.tierLevel >= 2 and self.m_iArmyStrength >= 1500) then
	
		-- Basic infantry upgrades
		self:DynamicResearch("necron_warrior_boost_2", 2, 0, 380, 8, 2, "necron_basic_warrior_squad", 2)
		self:DynamicResearch("necron_wraith_boost", 2, 0, 180, 8, 2, "necron_wraith_squad", 2)
		
		-- Basic Hero Weapons
		self:DynamicResearch("necron_wargear_upgrade_01_skinning_blades_research_mp", 2, 0, 100, 8, 2, nil, 0)
		--self:DynamicResearch("necron_wargear_upgrade_03_necrotyr_sigils_research_mp", 2, 0, 80, 8, 3, nil, 0)
		
		-- Deceiver destroyer research
		if (self:CountSquads("necron_deceiver_squad") > 0) then
		
			self:DynamicResearch("necron_deceiver_the_destroyer", 2, 0, 200, 8, 0, nil, 0)
		end

		-- Passive: Cloak nearby friendly units unless Necron Lord gets injured.
		self:DynamicResearch("necron_veil_of_darkness_research", 2, 0, 250, 8, 2, "necron_lord_squad", 1)
		
		-- Destroyer lord upgrades
		if (self:CountSquads("necron_lord_destroyer_squad") > 0) then
			
			-- Passive: Reduces damage from ranged attacks while slowly healing Necron Lord.
			self:DynamicResearch("necron_phylactery_research", 2, 0, 250, 8, 2, "necron_lord_destroyer_squad", 1)
			
			-- Target Pos: Infiltrated units revealed, blinds units causing them firing inaccuracies.
			self:DynamicResearch("necron_solar_pulse_research", 2, 0, 150, 8, 2, "necron_lord_destroyer_squad", 1)
			
			-- Target Pos: Infiltrated units revealed, blinds units causing them firing inaccuracies.
			self:DynamicResearch("necron_lightning_field_research", 2, 0, 200, 8, 2, "necron_lord_destroyer_squad", 1)
		end
	end
	
	-- Compute tier 3 researches
	if (self.tierLevel >= 3 and self.m_iArmyStrength >= 2000) then
	
		-- Basic infantry upgrades
		self:DynamicResearch("necron_finality_of_the_cull_research", 3, 0, 150, 8, 0, nil, 0)

		-- Basic Hero Weapons
		self:DynamicResearch("necron_wargear_upgrade_02_reaping_blades_research_mp", 3, 0, 150, 6, 6, nil, 0)
		--self:DynamicResearch("necron_wargear_upgrade_04_gauss_flayer_research_mp", 3, 0, 120, 6, 6, nil, 0)
	
		-- Vehicle upgrades
		self:DynamicResearch("necron_destroyer_boost", 3, 0, 180, 6, 6, "necron_destroyer_squad", 1)
	
		-- Timed / Passive: Mass Resurrection / Necron units in the Necron Lord's vicinity have a chance of returning to life.
		self:DynamicResearch("necron_resurrection_orb_research", 3, 0, 350, 6, 6, "necron_lord_squad", 1)
		
		-- Passive The Nightmare Shroud makes the Necron Destroyer Lord inmune to morale damage
		self:DynamicResearch("necron_nightmare_shroud_research", 3, 0, 150, 6, 6, "necron_lord_destroyer_squad", 1)
	end

	-- DynamicAddon(sAddonName, iAddonCount, iMinTier, iRequisitionCost, iPowerCost, iMinSquadCap, iMinSupportCap, sSquadName, iSquadMinCount)
	if (self:CountSquads("necron_lord_squad") > 0 and self.m_iArmyStrength >= 1000 + self.tierLevel * 250) then
	
		-- Hero wargear
		self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern1][HeroeWargearNameIndex], 1, 1,self.heroeWargear[self.heroeWargearPattern1][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern1][HeroeWargearPowIndex],6, 0, self.HeroSquadName, 1)
		self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern2][HeroeWargearNameIndex], 1, 2,self.heroeWargear[self.heroeWargearPattern2][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern2][HeroeWargearPowIndex],12, 0, self.HeroSquadName, 1)
		self:DynamicAddon(self.heroeWargear[self.heroeWargearPattern3][HeroeWargearNameIndex], 1, 3,self.heroeWargear[self.heroeWargearPattern3][HeroeWargearReqIndex], self.heroeWargear[self.heroeWargearPattern3][HeroeWargearPowIndex],16, 4, self.HeroSquadName, 1)
		for i = 1, table.getn(self.heroeWargear) do
			self:DynamicAddon(self.heroeWargear[i][HeroeWargearNameIndex], 1, 2,self.heroeWargear[i][HeroeWargearReqIndex], self.heroeWargear[i][HeroeWargearPowIndex],10, 0,self.HeroSquadName, 1)
		end
	end
	
	-- Restrict dynamic builds to hard difficulty or higher
	if (CpuManager.AISettings.bMultiBuildings) then
	
		-- Item-Syntax: BuildingName, BuildingCount, MinTier, MinRequisition, MinPower, MinSquadCap, MinSupportCap
		if self:GetBuildingCountByName("monolith") > 1 then
			self:DynamicBuild("necron_greater_summoning_core", 2, 2, 0, 600, 6, 2)
			self:DynamicBuild("necron_forbidden_archive", 2, 3, 0, 600, 6, 6)
			self:DynamicBuild("necron_summoning_core", 2, 3, 0, 600, 6, 6)
		end
	end
end

-- Arkhan 10.2005: Modified to allow bigger generators in tier2
function NecronBuildBaseStrategy:DoBuildGenerators()

	aitrace("BuildController: Check generators...")

	local numGenerators1 = resource_manager:GetNumOwnedPowerGenerators()
	local numGenerators2 = self:HasBuilding("necron_plasma_generator")
  	
	aitrace("BuildController: Check generators: "..tostring(numGenerators1).." : "..tostring(numGenerators2))
		
	-- Check power
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local iPowerGen = 20 * numGenerators2 - 20
	local iPowerBigGen = 350
	
	if (iPower < iPowerGen) then
		aitrace("BuildController: Not enough power: "..tostring(iPower))
		return
	end
	
	-- Get maximum amount of generators
	local max_gen = self:HasBuilding("monolith") * 12
	
	-- We don't want more than this even if we have multiple HQs
	if (max_gen > self.m_iMaxGenerators) then
		max_gen = self.m_iMaxGenerators
	end

	if (numGenerators2 >= max_gen) then
		aitrace("BuildController: Max generators: "..tostring(iPower).." generators: "..tostring(numGenerators2))
		return
	end
		
	-- Build if we are below min power per tier
	if ((self.tierLevel == 1 and self.m_iArmyStrength < 1000 and numGenerators2 >= 4) or
		(self.tierLevel == 2 and self.m_iArmyStrength < 1250 and numGenerators2 >= 6) or
		(self.tierLevel >= 3 and self.m_iArmyStrength < 1500 and numGenerators2 >= 8)) then
		aitrace("BuildController: Enough power: "..tostring(iPower))
		return
	end
		
	-- Check build plans for generators
	local iBiggerGeneratorID = cpu_manager.stats:GetBuildingID(self:GetBuildingName("BiggerGenerator"))
	if (self:PlanExists("Build Building Plan", iBiggerGeneratorID))  then
		aitrace("BuildController: Plan for big generator already exists...")
		return
	end
	
	local iGeneratorID = cpu_manager.stats:GetBuildingID(self:GetBuildingName("Generator"))
	local plan_count = self:PlanCount("Build Building Plan", iGeneratorID) 
	if (plan_count > 1) then
		aitrace("BuildController: Plans for generators: "..tostring(plan_count))
		return
	end
	
	-- Check if any generators are in production
	local under_construction = 0
	for oBuildChannel in build_manager:GetBuildChannelAIs() do

		-- Check building ID
		if (oBuildChannel:GetBlueprintID() == iGeneratorID and not oBuildChannel:ConstructionDone()) then
			under_construction = under_construction + 1
		end
	end
	
	-- Don't build too much at a time
	if (under_construction > 1) then
		aitrace("BuildController: Under construction: "..tostring(under_construction))
		return
	end
	
	-- Find closest enemy
	local oEnemy, iBaseToBaseDistance = cpu_manager:FindClosestEnemyPlayer()
	if (oEnemy == nil) then
		return nil
	end
	local vEnemyPos = oEnemy:GetStartingPosition()
	
	-- Check if we can afford a bigger generator
	local iSlagHeapCount = 0
	if (iPower > iPowerBigGen or g_iGMT < 60) then
	 	
		-- Update where the free slag heaps are
		resource_manager:UpdateFreeSlagHeaps(iBiggerGeneratorID)
		
		-- Look for the closest slag heap to build a bigger generator
		local slag_table = {}
		local max_dist = 50 + self.tierLevel * 50
		for slag_heap in resource_manager:GetSlagHeaps() do
		   
			local slag_pos = slag_heap:GetPosition()					
			if (not cpu_manager.terrain_analyzer:HasThreat( slag_pos, 35 )) then

				-- Init find available engineer functor
				local oFindEngineer = function( squad_ai )
					return (squad_ai:IsEngineer() and squad_ai:CanBuild(iBiggerGeneratorID) == SquadAI.CANBUILD_Ok and
							not cpu_manager:HasThreatOnPath( squad_ai:GetPosition(), slag_pos, 35 ))
				end
			
				-- Find available engineer
				local engineer = cpu_manager:GetClosestUnlockedSquad( slag_pos, 500, oFindEngineer )
				if (engineer ~= nil) then
				
					-- Only close slag heaps at low tier levels
					local iDistToBase = cpu_manager:GetShortestPathingDistance( cpu_manager.start_pos, slag_pos, true )
					local iDistToEnemy = cpu_manager:GetShortestPathingDistance( vEnemyPos, slag_pos, true )
					-- If slag is uncontestet by nearest enemy, we can accept those a bit further away
					if ( iDistToBase * 2 < iDistToEnemy ) then
						max_dist = max_dist + 50
					end 
					aitrace("BuildController: Build bigger generator check: "..tostring(iDistToBase).." / "..tostring(iDistToEnemy))
					if (iDistToBase > 0 and iDistToBase <= max_dist) then
					
						-- Add slag heap to available slag table
						local can_build = engineer:CanBuildAt(iBiggerGeneratorID, slag_pos)
						table.insert( slag_table, { slag_pos, engineer,  iDistToBase - iDistToEnemy, can_build } ) 
					end
				end
			end
		end
		
		-- Check slag heap count
		iSlagHeapCount = table.getn( slag_table )
		if (iSlagHeapCount > 0) then
		
			-- Check for multiple entries
			if (iSlagHeapCount > 1) then
			
				-- Sort by distance
				sortfunc = function( item1, item2 )					
					return item1[3] < item2[3]
				end
				table.sort( slag_table, sortfunc )
			end
		
			-- Try to build bigger generator
			if (slag_table[1][4]) then
		
				-- Add the plan to build, can_build is true
				aitrace("BuildManager: Dynamic build of bigger generator at "..tostring(slag_table[1][1].x)..", "..tostring(slag_table[1][1].z))
				self:AddPlan( BuildBuildingPlan(iBiggerGeneratorID, slag_table[1][1]) )
			else
				-- Send engineer to slag position
				if (not cpu_manager:JumpBuilder( slag_table[1][2], slag_table[1][1] )) then
					cpu_manager:DoMove( slag_table[1][2], slag_table[1][1], false, "Go to bigger generator")
				end
			end
			
			-- Concentrate on early big generator in first minute
			if (g_iGMT < 60) then
				return
			end
		end
	end
	
	-- No big generator possible or power is enough for both
	if (iSlagHeapCount <= 0 or iPower > iPowerGen + iPowerBigGen) then

		-- Build basic generator
		---Kaiser Soze
		aitrace ("BuildManager: Using fixed generator placement (necronbuildbasestrategy.ai)")
		
		-- Count finished buildings of this type
		local gen_pos_table = {}
		local sGeneratorName = self:GetBuildingName("Generator")
		local oStats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )
		for oBuilding in oStats:GetBases() do
			
			-- Check if building is valid
			if (oBuilding:IsValid()) then

				-- Check building ID
				if (oBuilding:GetBaseName() == sGeneratorName) then
					table.insert(gen_pos_table, oBuilding:GetPosition())
				end
			end
		end
		aitrace ("BuildManager: Number of necrons generator: "..tostring (table.getn( gen_pos_table)))
		
		-- Now check the table for free slags
		local occupied = 0
		for index_slag = 1, table.getn( SlagPositions) do
			
			for index_gen = 1, table.getn( gen_pos_table) do
				
				if (distance_sqr(gen_pos_table[index_gen], SlagPositions[index_slag][2]) < 9) then
					SlagPositions[index_slag][1] = "Not Free"
					occupied = occupied + 1
				else
					SlagPositions[index_slag][1] = "Free"
				end
			end
		end
		aitrace ("BuildManager: Number of necrons slags: "..tostring (table.getn( SlagPositions)))
		aitrace ("BuildManager: Number of necrons slags used : "..tostring (occupied))
		
		-- Look for the closest slag volcano to build a generator
		local available_slag_table = {}
		for index_slag = 1, table.getn( SlagPositions) do
		
			-- Check slag pos
			local slag_pos = SlagPositions[index_slag][2]				
			if (SlagPositions[index_slag][1] == "Free" and not cpu_manager.terrain_analyzer:HasThreat(slag_pos, 35)) then

				-- Init find available engineer functor
				local oFindEngineer = function( squad_ai )
					return (squad_ai:IsEngineer() and squad_ai:CanBuild(iGeneratorID) == SquadAI.CANBUILD_Ok and
						not cpu_manager:HasThreatOnPath( squad_ai:GetPosition(), slag_pos, 25 ))
				end
			
				-- Find available engineer
				local engineer = cpu_manager:GetClosestUnlockedSquad( slag_pos, 500, oFindEngineer )
				if (engineer ~= nil) then
					
					-- Add slag volcano to available slag table
					local iDistToBase = cpu_manager:GetShortestPathingDistance( cpu_manager.start_pos, slag_pos, true )
					local iDistToEnemy = cpu_manager:GetShortestPathingDistance( vEnemyPos, slag_pos, true )
					can_build = engineer:CanBuildAt(iGeneratorID, slag_pos)
					table.insert( available_slag_table, { slag_pos, engineer, iDistToBase - iDistToEnemy, can_build } ) 
				end
			end
		end
		
		-- Check slag volcano count
		local num_items = table.getn ( available_slag_table )
		if (num_items > 0) then	

			-- Check for multiple entries
			if (num_items > 1) then
			
				-- Sort by distance
				sortfunc = function( item1, item2 )	
					return item1[3] < item2[3]
				end
				table.sort( available_slag_table, sortfunc )
			end

			-- Try to build basic generator
			aitrace ("BuildManager: Number of necrons available slags: "..tostring (num_items))
			for i = 1, num_items, 1 do
			
				-- We can build a generator
				aitrace ("BuildManager: Distance to slag "..tostring(i).." : "..tostring(available_slag_table[i][3]))
				if (available_slag_table[i][4]) then
				
					-- Add the plan to build, can_build is true
					aitrace("BuildManager: Dynamic build generator at "..tostring(available_slag_table[i][1].x)..", "..tostring(available_slag_table[i][1].z))
					self:AddPlan( BuildBuildingPlan(iGeneratorID, available_slag_table[i][1]) )
					return
				end				
			end
			
			-- We have to move to nearest non buildable sight range and check if we can build afterwards
			aitrace("BuildManager: Move builder to slag position at "..tostring(available_slag_table[1][1].x)..", "..tostring(available_slag_table[1][1].z))
			cpu_manager:DoMove(available_slag_table[1][2], available_slag_table[1][1], false, "Go to slag position")				
		else
			aitrace ("BuildManager: Not found any free necron slags")
		end
	end
end

function NecronBuildBaseStrategy:Update()

	aitrace("BuildBaseStrategy: Update...", true)

	-- Superclass
	Strategy.Update(self)
	
	-- Check current tier
	self:UpdateTierLevel()
	
	-- Check my army strength
	self.m_iArmyStrength = cpu_manager:GetArmyStrength()
	
	-- Update HQ count
	self.num_hq = self:GetBuildingCountByName("monolith") > 0
				
	-- Build buildings, research and addons
	self:ComputeBuildProgram()
	
	-- Build generators
	self:DoBuildGenerators()
	
	-- Always want more strategic points
	if (self:PlanCount( "Resource Plan" ) < self.info.post_builder and self:GetCurrentSquadCap() >= 6) then
		self:AddPlan( ResourcePlan() )	
	end
	
	if (self:PlanCount( "Capture Plan" ) < self.info.flag_capture) then
		self:AddPlan( CapturePlan( cpu_manager.start_pos ) )	
	end
		
	-- Check if we need more cap !
	if (not cpu_manager:HQThreat()) then 
		self:EvaluateSquadCap()
	end
	
	-- Check last update
	if (g_iGMT > self.m_iNextUpdate) then
	
		-- Build LP's if possible (Necessary because of DC 1.2 bug)
		local sPostName = self:GetBuildingName("ListeningPost")
		if (sPostName ~= nil and resource_manager:GetResourceAmount():Get(ResourceAmount.RT_Requisition) > 100) then
		
			-- Check if post plan exist
			local iID = cpu_manager.stats:GetBuildingID(sPostName)
			if (not self:PlanExists("Build Building Plan", iID)) then
			
				-- Try to build post
		        local tBuildType = CpuBuildType()
		        tBuildType.btype = CpuPrerequisites.BT_Building
		        tBuildType.name = sPostName
		        if (self:TryBuild( tBuildType )) then
		            aitrace("BuildController: Dynamic build of "..tBuildType.name)
		        end
			end
		end

		-- Race specific builds
		self:BuildFlexible()
				
		-- Finish buildings
		self:FinishBuildings()
		
		-- Set next update time
		self.m_iNextUpdate = g_iGMT + 10
	end
	
	-- Build units
	self:DoBuildUnits()
		
	-- Either defend or check if I should attack
	self.military_stance( self )
	
end

-- Return placement type for buildings
function NecronBuildBaseStrategy:GetPlacementType(iBuildingID)
	
	-- Check building
	if (cpu_manager:IsHQ(iBuildingID)) then
		if (self:GetBuildingCountByName("monolith") < 1) then
			return "HQ"
		else
			return "Front1"
		end
	elseif (cpu_manager:IsTurret(iBuildingID)) then
		return "Front2"
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("necron_summoning_core") or
			iBuildingID == cpu_manager.stats:GetBuildingID("necron_greater_summoning_core")) then
		return "Military"
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("necron_forbidden_archive") or
			iBuildingID == cpu_manager.stats:GetBuildingID("necron_energy_core")) then
		return "BaseBack"
	end
	return "Basic"
end

-- Arkhan 11.2006: Always reinforce
function NecronBuildBaseStrategy:CheckReinforce()
	return true
end

-- Arkhan 11.2006: Virtual method for checking out relic units
function NecronBuildBaseStrategy:RelicRequired(sName)

	-- Check name
	if (sName == "necron_restored_monolith_squad") then
		return true
	elseif (sName == "necron_pariah_squad") then
		return true
	elseif (sName == "necron_wargear_upgrade_lvl_1_death_mask_addon") then
		return true
	elseif (sName == "necron_wargear_upgrade_lvl_1_mantle_of_doom_addon") then
		return true
	elseif (sName == "necron_wargear_upgrade_lvl_2_gauntlets_addon") then
		return true
	elseif (sName == "necron_wargear_upgrade_lvl_2_under_shoulder_addon") then
		return true
	elseif (sName == "necron_wargear_upgrade_lvl_3_death_shroud_addon") then
		return true
	elseif (sName == "necron_wargear_upgrade_lvl_3_ribcage_addon") then
		return true
	elseif (sName == "necron_wargear_upgrade_01_skinning_blades_research_mp") then
		return true
	elseif (sName == "necron_wargear_upgrade_02_reaping_blades_research_mp") then
		return true
	end
	return false
end

-- Arkhan 03.2006: Inherited method to modify squad demand
function NecronBuildBaseStrategy:ModifySquadDemand(iUnitID)

	-- Check for tomb spyder
	if (iUnitID == cpu_manager.stats:GetSquadID("necron_tomb_spyder_squad")) then
	
		-- Only build tomb spyders when we have a decent army size
		local iArmyStrength = cpu_manager:GetArmyStrength()
		if (iArmyStrength < 2000) then
			return 0
		end
	end
	return BuildBaseStrategy.ModifySquadDemand(self, iUnitID)
end

-- Arkhan 11.2006: Check if we have enough resources for a bigger generator
function NecronBuildBaseStrategy:HasResourcesForBiggerGenerator(iRequisition, iPower)

	-- Check requisition
	if (iPower < 350) then
		return false
	end
	return true
end

-- Arkhan 06.2007: Check if we have a resource overflow
function NecronBuildBaseStrategy:HasResourceOverflow()

	-- Don't reinforce if we've lots of power, rare requisition, and few vehicles
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power ) / self.m_iTechBreak
	local iTier	= self:GetTierLevel()
	if ((iTier == 1 and iPower > 600) or 
		(iTier == 2 and iPower > 800) or 
		(iTier == 3 and iPower > 1500)) then
		return true
	end
	return false
end

function NecronBuildBaseStrategy:HQEmergency()

	-- Check monolith count
	local iMonolithCount = self:GetBuildingCountByName("monolith")
	if (iMonolithCount >= 2) then
		return false
	end

	-- Build a second monolith if first one is severly damaged
	local bMonolithDamaged = false
	for oBuilding in military_manager:GetBases() do
	
		-- Check for valid building
		if (oBuilding:IsValid() and not oBuilding:IsListeningPost() and oBuilding:GetBaseName() == "monolith") then
	  
			-- Check health
			if (oBuilding:GetHealthPercentage() < 0.6) then

				-- Adjust current build program
				for iLoop1 = 1, table.getn(self.info.BuildPrograms[BuildBaseStrategy.iBuildProgram]) do
				
					-- Search monolith entry and set build count to two
					if (self.info.BuildPrograms[BuildBaseStrategy.iBuildProgram][iLoop1][7] == "monolith") then
						self.info.BuildPrograms[BuildBaseStrategy.iBuildProgram][iLoop1][5] = 2
						return true
					end
				end
			end
		end
	end
	return false
end
