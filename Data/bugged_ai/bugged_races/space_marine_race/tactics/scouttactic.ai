----------------------------------------
-- File: 'scouttactic.ai'
-- Edited by Thudmeizer	@ 02.10.2008

class 'ScoutTactic' (SpaceMarineInfantryTactic)

Scout = {}

function ScoutTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Scout Tactic")
		
	-- Set upgrade type
	if (cpu_manager:GetTierLevel() < 2) then
		self.bLongRange = (math.random(1, 3) ~= 1)
	else
		self.bLongRange = false
	end
end

function ScoutTactic:InitAbilities()

	-- Init common abilities
	SpaceMarineInfantryTactic.InitAbilities(self)
end

function ScoutTactic:DoAbilities()

	-- Check if I should enable/disable infiltration
	self:DoAbilityInfiltrate()
	
	-- Compute common abilities
	SpaceMarineInfantryTactic.DoAbilities(self)
end

function ScoutTactic:ToggleInfiltrate( squad_ai, state )


end

-- Dreddnott edit (April 16th)
function ScoutTactic:DoAbilityInfiltrate()

	-- Check if we can use infiltrate ability
	if (not self.squad_ai:CanDoAbility(Scout.iInfiltrateID)) then
		return
	end

    -- Check whether we're using the ability
    local bIsUsing = self.squad_ai:IsUsingAbility(Scout.iInfiltrateID)

    -- Check if we're attack moving
    local bIsInCombat = self.squad_ai:IsInStateAttackMove()

    -- Check if we're shooting
    local bShooting = self.squad_ai:IsAttacking()

    -- Check if we're in a state that should Infiltrate regardless of enemy presence
    local bRunAWay = (self.squad_ai:IsBroken() or (self.stateID == Tactic.StateID.AvoidDeath) or (self.stateID == Tactic.StateID.DoDance))

    -- Check if we're doing any sort of moving
    local bMoving = self:IsMoving()

    -- Check if we're moving around or capping
    local bCapping = (self.squad_ai:IsCapturing() or self.squad_ai:IsInStateMove())

    -- Check if we should slow down for enemies nearing range
    local vSquadPos = self.squad_ai:GetPosition()
    local oEnemy = cpu_manager.cpu_player:FindFirstEnemy(vSquadPos, 40, 1)
    local bNoEnemy = (oEnemy == nil)

    -- Check if Infiltrate should be toggled
    if ((bIsUsing == true and ((bIsInCombat == true and bNoEnemy == false) or bMoving == false)) or
        (bIsUsing == false and ((bIsInCombat == true and bNoEnemy == true and bShooting == false) or bCapping == true or bRunAway == true))) then
        self.squad_ai:DoSpecialAbility(Scout.iInfiltrateID)
    end
end

function ScoutTactic:Upgrade()

	-- Check if we are reinforcing
	if (self.squad_ai:IsReinforcing() or not self.squad_ai:HasUpgradableTrooper() or self.bWaitForThreat) then
		return
	end

	-- If I am broken, don't upgrade!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
		return
	end	
	
	-- Only upgrade in healthy state
	if (self.squad_ai:GetNumTroopers() < self.squad_ai:GetMaxTroopers() * 0.6 or self.squad_ai:GetHealthPercentage() < 0.5 or self.squad_ai:IsUnderAttack()) then
		return
	end
	
	-- Check upgrade type
	if (self.bLongRange) then
	
		-- Upgrade to sniper rifle
		self.squad_ai:DoBestUpgrade(UnitStatsAI.UC_LightInfantryHigh)
	else
		-- Upgrade to flamer and plasma rifle
		if (cpu_manager:GetTierLevel() < 2) then
		
			-- Upgrade to flamer
			self.squad_ai:DoBestUpgrade(UnitStatsAI.UC_MonsterMed)
		else
			-- Upgrade to plasma rifle
			self.squad_ai:DoBestUpgrade(UnitStatsAI.UC_HeavyInfantryMed)
		end	
	end
end
