----------------------------------------
-- File: 'spacemarineinfantrytactic.ai'
-- Edited by Thudmeizer         @ 16.09.2008

class 'SpaceMarineInfantryTactic' (InfantryTactic)

SpaceMarineInfantry = {}

function SpaceMarineInfantryTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Space Marine Infantry Tactic")
	
	-- Set infantry options
	local sSquadName = squad_ai:GetSquadName()
	if (sSquadName == "space_marine_squad_scout" or
		sSquadName == "space_marine_squad_apothecary" or
		sSquadName == "space_marine_squad_force_commander" or
		sSquadName == "space_marine_squad_librarian2" or
		sSquadName == "space_marine_squad_chaplain2") then
		
		-- Squads are transportable
		self.m_iTransportable = 1
		
	elseif (sSquadName == "space_marine_squad_tactical" or
			sSquadName == "space_marine_squad_grey_knights") then
		
		-- Squads are transportable and able to deepstrike	
		self.m_iTransportable = 1
		self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID("space_marine_orbital_relay")
		
	elseif (sSquadName == "space_marine_squad_terminator" or
			sSquadName == "space_marine_squad_terminator_assault") then
		
		-- Squads are transportable and able to deepstrike	
		self.m_iTransportable = 2
		self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID("space_marine_orbital_relay")
	end
end

function SpaceMarineInfantryTactic:AddCommanders()
	table.insert(self.commander, { "space_marine_squad_force_commander", true })
	table.insert(self.commander, { "space_marine_squad_librarian2", false })
	table.insert(self.commander, { "space_marine_squad_chaplain2", false })
end

function SpaceMarineInfantryTactic:InitAbilities()

	-- Init ability ID's
	if (SpaceMarineInfantry.iRallyID == nil) then
		SpaceMarineInfantry.iRallyID = cpu_manager.stats:GetAbilityID( "marines_rally" )
	end
end

function SpaceMarineInfantryTactic:DoAbilities()

	-- I might have these attached
	if (self.squad_ai:IsAttached()) then
	
		if (self.squad_ai:HasSquadAttached("space_marine_squad_force_commander")) then
			ForceCommanderTactic.InitAbilities( self )
			ForceCommanderTactic.DoAbilities( self )
		elseif (self.squad_ai:HasSquadAttached("space_marine_squad_librarian2")) then
			LibrarianTactic.InitAbilities( self )
			LibrarianTactic.DoAbilities( self )
		elseif (self.squad_ai:HasSquadAttached("space_marine_squad_chaplain2")) then
			ChaplainTactic.InitAbilities( self )
			ChaplainTactic.DoAbilities( self )
		end
	end
end

function SpaceMarineInfantryTactic:CheckForBroken()

	-- Try to restore morale when broken
	if (self.squad_ai:IsBroken() and self.squad_ai:CanDoAbility(SpaceMarineInfantry.iRallyID)) then
		self.squad_ai:DoSpecialAbility(SpaceMarineInfantry.iRallyID)
	end
	
	-- Call basic broken check method
	InfantryTactic.CheckForBroken(self)
end

function SpaceMarineInfantryTactic:CheckDance(oSquad)

	-- Check opponent
	if (oSquad == nil) then
		return false
	end
	
	-- Compare opponents
	local sSquadName = self.squad_ai:GetSquadName()
	if (sSquadName == "space_marine_squad_tactical" or sSquadName == "space_marine_squad_terminator") then
		
		-- Check opponent
		if (oSquad:GetSquadName() == "chaos_squad_cultist" or
		    oSquad:GetSquadName() == "eldar_guardian_squad" or
		    oSquad:GetSquadName() == "guard_squad_guardsmen" or
		    oSquad:GetSquadName() == "dark_eldar_squad_warrior") then
			return false
		end
	end
	return true
end