----------------------------------------
-- File: 'daemonhunt_vehiclegktactic.ai'
-- Created by Gambit	@ 31.03.2017

class 'DaemonhuntVehicleGKTactic' (VehicleTactic)

function DaemonhuntVehicleGKTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Daemonhunt Vehicle GK Tactic")

	-- Set vehicle options
	local sSquadName = squad_ai:GetSquadName()
	if (sSquadName == "inquisition_squad_dreadnought" or
		sSquadName == "inquisition_squad_dreadnought_venerable" or
		sSquadName == "inquisition_squad_dreadnought_venerable_hf") then
		-- Vehicles of the GK branch that are able to DS - The dreadknight is better left out
		self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID( "inquisition_astra_telepathica_gk" )
		-- Vehicles are transportable - remains to decide if the Stormraven can get them
		-- self.m_iTransportable = 1
	elseif (sSquadName == "inquisition_squad_stormraven_fury") then
		-- The Stormraven is a heavy transport
		self.m_iTransportVehicle = 1
		self.m_iTransportSlots = 3
	end

	-- Used for the stuck check code for the squads that can jump
	self.initialPosition = self.squad_ai:GetPosition()
	self.isStuck = false
end


function DaemonhuntVehicleGKTactic:DoAbilities()

    -- Jump squads' unstuck code call. Put ANYWHERE in the DoAbilities() function
    -- Checks jump-able stuck squads, and force them to jump nearby
	if self.squad_ai:CanJump() then
		self:SolveStuckCase()
	end
end


-- Check if the vehicle should dance away in melee
function DaemonhuntVehicleGKTactic:CheckVehicleDance(sName)

	if (sName == "inquisition_squad_dreadnought_venerable_hf" or
	    sName == "inquisition_squad_razorback" or
	    sName == "inquisition_squad_stormraven_fury") then
		return true
	end
	return false
end


-- Updated function that takes the number of occupied slots per squad, into account.
function DaemonhuntVehicleGKTactic:LoadSquad(oSquad, iSquadStrength)
	-- Update transport data
	self.m_iLoadedTroopStrength = self.m_iLoadedTroopStrength + iSquadStrength
	self.m_iUsedTransportSlots = self.m_iUsedTransportSlots + (OccupiedSlotsIDH[oSquad:GetSquadName()] or 1)
	self.m_iUnloadTries = 2
	-- Load squad
	cpu_manager:DoMove(self.squad_ai, oSquad:GetPosition(), false, "Load troops")
	for oEntity in self.squad_ai:GetEntities() do
		oSquad:DoDefault(oEntity)
		break
	end
	self.m_iMoveDelay = g_iGMT - 3
end


-- Unstuck Code
function DaemonhuntVehicleGKTactic:SolveStuckCase()
	local iPosition = self.squad_ai:GetPosition()
	if iPosition.x ~= self.initialPosition.x or iPosition.z ~= self.initialPosition.z then
		self.isStuck = false
	elseif (self.squad_ai:IsInStateMove() or self.squad_ai:IsInStateAttackMove()) and not self.squad_ai:IsInCombat()
	and iPosition.x == self.initialPosition.x and iPosition.z == self.initialPosition.z then
		self.isStuck = true
	end
	if self.isStuck then
		self:ForceSquadJumpNear(iPosition)
	end
	self.initialPosition = self.squad_ai:GetPosition()
end

function DaemonhuntVehicleGKTactic:ForceSquadJumpNear(pos)
	-- Try to jump somewhere near, perform 16 checks for a viable position
	local jumpDisSqr = sqr(self.squad_ai:GetJumpDistance())
	for iLoop1 = 1, 16 do
		-- Create a jump position
		local vJumpPosition = pos
		local vDir = cpu_manager:GetDirectionToEnemy(pos)
		vJumpPosition.x = vJumpPosition.x + vDir.x * math.random(-20, 50)
		vJumpPosition.z = vJumpPosition.z + vDir.z * math.random(-20, 50)
		-- Check if target position is in range and if unit is able to jump to target position
		local iDistance = distance_sqr(vJumpPosition, pos)
		if iDistance < jumpDisSqr and self.squad_ai:CanJumpToPosition(vJumpPosition) then
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return
		end
	end
end
