g_AllAutomaticBaseBuildingManagers = {}

AutomaticBaseBuildingManager = {}
function AutomaticBaseBuildingManager:new (_Player, _BuildingStruct)

    local AutomaticBaseBuildingManagerObject = 
    {
    	--Constants
		Player = _Player,
		BuildingStruct = _BuildingStruct,
		BuildingStructLength = TableLength(_BuildingStruct),

		--Variables
		IsTryingToBuild = false,
		IsTryingToBuildExtra = false
    }

	self.__index = self
   	return setmetatable(AutomaticBaseBuildingManagerObject, self)

end

function AutomaticBaseBuildingManager:Update()

	if(self.IsTryingToBuild == false) then
		local AllOwnedStratPoints = GetAllStrategicPointsOwnedByPlayer(self.Player)
		--[[local _, entityPositions = Get_EntityDataFromEntityBP("tyranids_hq", self.Player.PlayerIndex + 1)
		local _, entityPositions2 = Get_EntityDataFromEntityBP("tyranids_reclemation_pool", self.Player.PlayerIndex + 1)

		--Ideally we want to build outwards instead of always from the HQ
		if(TableLength(entityPositions2) > 0 ) then

			entityPositions = entityPositions2

		end]]
		
		local _, lpPositions = Get_EntityDataFromEntityBP("tyranids_listening_post", self.Player.PlayerIndex + 1)
		for i = 1, TableLength(g_AllStrategicPointsStructs) do

			--local TmpOwner = Entity_GetPlayerOwner(g_AllStrategicPointsStructs[i].ID)
			--local OwnerPlayer = World_GetPlayerIndex(TmpOwner)
			
			if(g_AllStrategicPointsStructs[i].OwnedBy == self.Player.PlayerIndex and Entity_GetBlueprintName(g_AllStrategicPointsStructs[i].ID) ~= "strategic_objective_struct") then

				local error = false
				local UniquePointEGroup = GetUniqueEG("tmpPointEGroup")
				local UniquePointEGroupName = EGroup_GetName(UniquePointEGroup)
				EGroup_Add(UniquePointEGroup, g_AllStrategicPointsStructs[i].ID)			
				local PointPos = Entity_GetPosition(g_AllStrategicPointsStructs[i].ID)

				for j = 1, TableLength(lpPositions) do

					if(World_DistancePointToPoint(g_AllEntityData[self.Player.PlayerIndex + 1][lpPositions[j]].EntityPosition, PointPos) < 1) then
						error = true
						break
					end

				end

				if(error == false) then
					--TyranidsAutoConstructLP( g_AllStrategicPointsStructs[i], self.Player )
				end

			end

		end

		local allReclemationPools, _ = Get_EntityDataFromEntityBP("tyranids_reclemation_pool", self.Player.PlayerIndex + 1)
		local numberLPs = TableLength(lpPositions)
		local numberCompletedLPs = 0
		local reclemationCountMultiplier = 2 
		for i = 1, numberLPs do

			if(Entity_GetBuildingProgress( g_AllEntityData[self.Player.PlayerIndex + 1][lpPositions[i]].EntityID ) == 1) then

				numberCompletedLPs = numberCompletedLPs + 1

			end

		end

		if(Player_GetResearchState(self.Player.Player, ResourceGlobalNames.tyranids_race.RT_Requistion[2]) == RS_Complete ) then

			reclemationCountMultiplier = 4

		elseif(Player_GetResearchState(self.Player.Player, ResourceGlobalNames.tyranids_race.RT_Requistion[1]) == RS_Complete ) then

			reclemationCountMultiplier = 3

		end

		if(numberCompletedLPs * reclemationCountMultiplier > TableLength(allReclemationPools)) then
			--for i = 1, TableLength(AllOwnedStratPoints) do
			for i = 1, numberLPs do

				if(Entity_GetBuildingProgress( g_AllEntityData[self.Player.PlayerIndex + 1][lpPositions[i]].EntityID ) == 1) then
				
					local Success = false
					print(g_AllEntityData[self.Player.PlayerIndex+1][lpPositions[i]].EntityPosition.x)
					local Offset = 
					{
						x = g_AllEntityData[self.Player.PlayerIndex+1][lpPositions[i]].EntityPosition.x + World_GetRand(-5,5), 
						y = g_AllEntityData[self.Player.PlayerIndex+1][lpPositions[i]].EntityPosition.y + World_GetRand(-5,5), 
						z = g_AllEntityData[self.Player.PlayerIndex+1][lpPositions[i]].EntityPosition.z + World_GetRand(-5,5)
					}
					self.IsTryingToBuild = true
					for i = 1, 25 do
						Success = TyranidsDebugActivateAutoConstructionAbility(World_Pos(Offset.x, Offset.y, Offset.z), self.Player, "tyranids_reclemation_pool")

						if (Success) then

							self.IsTryingToBuild = false
							break

						end

						Offset.x = Offset.x + World_GetRand(-2, 2)
						Offset.z = Offset.z + World_GetRand(-2, 2)

					end

					if (Success == false) then

						self.IsTryingToBuild = false
						print("TOTAL FAILURE!")

					end
				end
			end
		end

		--local GauntStructure = { name = "tyranids_tech_gaunt", requiredAddon = "addon_tyranids_tech_gaunt", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
	
		for i = 1, self.BuildingStructLength do

			local BuiltBuildings, _ = Get_EntityDataFromEntityBP(self.BuildingStruct[i].name, self.Player.PlayerIndex + 1)
			local BuiltFromEntities, _ = Get_EntityDataFromEntityBP(self.BuildingStruct[i].builtFromEntity, self.Player.PlayerIndex + 1)

			for j = 1, TableLength(BuiltFromEntities) do

				local HasAddon = Entity_ContainsAddOn(BuiltFromEntities[j].EntityID, self.BuildingStruct[i].requiredAddon)

				if(HasAddon == false) then

					BuiltFromEntities[j] = nil

				end

			end

			for z = 1, TableLength(BuiltFromEntities) do

				if(TableLength(BuiltFromEntities) - TableLength(BuiltBuildings) + self.BuildingStruct[i].numberPerAddon - 1 <= 0) then

					break

				end

				if(BuiltFromEntities[z] == nil) then

					break

				end

				local Success = false
				print(self.BuildingStruct[i].name)
				print(BuiltFromEntities[z])
				local Offset = 
				{
					x = BuiltFromEntities[z].EntityPosition.x + World_GetRand(-self.BuildingStruct[i].distanceFromBuilding, self.BuildingStruct[i].distanceFromBuilding), 
					y = BuiltFromEntities[z].EntityPosition.y + World_GetRand(-self.BuildingStruct[i].distanceFromBuilding, self.BuildingStruct[i].distanceFromBuilding), 
					z = BuiltFromEntities[z].EntityPosition.z + World_GetRand(-self.BuildingStruct[i].distanceFromBuilding, self.BuildingStruct[i].distanceFromBuilding)
				}
				self.IsTryingToBuildExtra = true
				for x = 1, 40 do
					Success = TyranidsDebugActivateAutoConstructionAbility(World_Pos(Offset.x, Offset.y, Offset.z), self.Player, self.BuildingStruct[i].name)

					if (Success) then

						print("SPAWNING "..self.BuildingStruct[i].name)
						self.IsTryingToBuildExtra = false
						break

					end

					Offset.x = Offset.x + World_GetRand(-4, 4)
					Offset.z = Offset.z + World_GetRand(-4, 4)

				end

				if (Success == false) then

					self.IsTryingToBuildExtra = false
					print("TOTAL FAILURE!")

				end

			end			
				
		end
		--end
	end

end

--FML change this one later..
function TyranidsDebugActivateAutoConstructionAbility(_pos, _PlayerStruct, _structureEbps)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)

	_pos = World_Pos(_pos.x,_pos.y,_pos.z)

	Entity_CreateBuildingPosition(_PlayerStruct.Player, UniqueBuildingEGroupName, _structureEbps, _pos, 0)

	--If group size is 0 we have not created the above entity. Likely due to it being placed in a bad position. Must show error and stop function
	if(EGroup_Count(UniqueBuildingEGroup) == 0) then

		return false

	end

	Util_CreateSquadsAtPositionRandom(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _pos, 1)
	Command_SquadEntity( _PlayerStruct.Player, UniqueBuilderSGroup, SCMD_BuildStructure, UniqueBuildingEGroup )
	--table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	--g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

	return true

end

--FML change this one later..
function TyranidsAutoConstructLP(_TargetPoint, _PlayerStruct)

	print("ATTEMPTING TO BUILD NIDS LP")
	local UniquePointEGroup = GetUniqueEG("tmpPointEGroup")
	local UniquePointEGroupName = EGroup_GetName(UniquePointEGroup)
	EGroup_Add(UniquePointEGroup, _TargetPoint.ID)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)

	_pos = Entity_GetPosition(_TargetPoint.ID)
	Util_CreateSquadsAtPositionRandom(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _pos, 1)

	Cmd_ConstructBlueprintOnEGroup(UniqueBuilderSGroupName, "tyranids_listening_post", UniquePointEGroupName)

	--table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	--g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

end

--Integrate this with StrategicPoints class, not here in nids... obviously...
function GetAllStrategicPointsOwnedByPlayer(_Player)

	--AddStacktrace("GetAllStrategicPointsOwnedByPlayer")
	
	local AllOwnedStratPoints = {}
	for i = 1, TableLength(g_AllStrategicPointsStructs) do

		if(g_AllStrategicPointsStructs[i].OwnedBy == _Player.PlayerIndex) then

			table.insert(AllOwnedStratPoints, g_AllStrategicPointsStructs[i])

		end
	
	end

	--RemoveStacktrace()

	return AllOwnedStratPoints

end

function Tyranids_GameSetup()

	--AddStacktrace("Tyranids_GameSetup")
	
	Log(0, 0, "Starting: 'Tyranids_GameSetup'...")
	
	for i = 1, g_PlayerCount do

		if(g_AllPlayers[i].RaceDetails.RaceName == "tyranids_race") then
			
			--Log(0, 0, "Player: "..g_AllPlayers[i].PlayerIndex.."' is Tyranids, assigning them an AutomaticBaseBuildingManager.")
			print("Player: "..g_AllPlayers[i].PlayerIndex.."' is Tyranids, assigning them an AutomaticBaseBuildingManager.")
			local GauntStructure = { name = "tyranids_tech_gaunt", requiredAddon = "addon_tyranids_tech_gaunt", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local LictorStructure = { name = "tyranids_tech_lictor", requiredAddon = "addon_tyranids_tech_lictor", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local WarriorStructure = { name = "tyranids_tech_warrior", requiredAddon = "addon_tyranids_tech_warrior", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local RavenerStructure = { name = "tyranids_tech_ravener", requiredAddon = "addon_tyranids_tech_ravener", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local Tier2InfantryStructure = { name = "tyranids_tech_tier2_infantry", requiredAddon = "addon_tyranids_tech_tier2_infantry", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 40 }
			local GeneratorStructure = { name = "tyranids_generator", requiredAddon = "addon_tyranids_generator", numberPerAddon = 3, builtFromEntity = "tyranids_listening_post", distanceFromBuilding = 5 }
			local BasicVehiclesStructure = { name = "tyranids_tech_basic_vehicles", requiredAddon = "addon_tyranids_tech_basic_vehicles", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 50 }
			local AdvancedVehiclesStructure = { name = "tyranids_tech_advanced_vehicles", requiredAddon = "addon_tyranids_tech_advanced_vehicles", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 50 }
			local Tier4Structure = { name = "tyranids_tech_tier4", requiredAddon = "addon_tyranids_tech_tier4", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 50 }
			local NewHQ = { name = "tyranids_hq", requiredAddon = "addon_tyranids_new_hq", numberPerAddon = 2, builtFromEntity = "tyranids_hq", distanceFromBuilding = 70 }
			local NidsBuildings = { GauntStructure, LictorStructure, WarriorStructure, RavenerStructure, Tier2InfantryStructure, GeneratorStructure, BasicVehiclesStructure, AdvancedVehiclesStructure, Tier4Structure, NewHQ }
			table.insert(g_AllAutomaticBaseBuildingManagers, AutomaticBaseBuildingManager:new(g_AllPlayers[i], NidsBuildings))

		else

			--Log(0, 0, "Player: "..g_AllPlayers[i].PlayerIndex.."' is not Tyranids.")
			print("Player: "..g_AllPlayers[i].PlayerIndex.."' is not Tyranids.")

		end

	end
	
	Log(0, 0, "Finished: 'Tyranids_GameSetup'...")

	Rule_AddInterval(Update_AutomaticBaseBuildingManagers, 3)

	--RemoveStacktrace()

end

function Update_AutomaticBaseBuildingManagers()

	--AddStacktrace("Update_AutomaticBaseBuildingManagers")
	if(World_GetRand(0,100) >= 45) then

		for i = 1, TableLength(g_AllAutomaticBaseBuildingManagers) do

			g_AllAutomaticBaseBuildingManagers[i]:Update()

		end

	end

	--RemoveStacktrace()

end
