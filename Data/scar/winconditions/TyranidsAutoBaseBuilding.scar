import("TFE_Core/TFECore.scar");

g_AllAutomaticBaseBuildingManagers = {}

AutomaticBaseBuildingManager = {}
function AutomaticBaseBuildingManager:new (_Player)

    local AutomaticBaseBuildingManagerObject = 
    {
    	--Constants
		Player = _Player,

		--Variables
		IsTryingToBuild = false
    }

	self.__index = self
   	return setmetatable(AutomaticBaseBuildingManagerObject, self)

end

function AutomaticBaseBuildingManager:Update()

	if(self.IsTryingToBuild == false) then
		local AllOwnedStratPoints = GetAllStrategicPointsOwnedByPlayer(self.Player)
	
		--for i = 1, TableLength(AllOwnedStratPoints) do
			print("SPAWNING RECLEMATION POOL")

			local Success = false
			local Offset = {x = 0, y = 0, z = 0}
			self.IsTryingToBuild = true
			for i = 1, 1000 do
				Success = TyranidsDebugActivateAutoConstructionAbility(World_Pos(0 + Offset.x, 0 + Offset.y, 0 + Offset.z), self.Player, "tyranids_reclemation_pool")

				if (Success) then

					self.IsTryingToBuild = false
					break

				end

				Offset.x = Offset.x + World_GetRand(-1, 1)
				Offset.z = Offset.z + World_GetRand(-1, 1)

			end

			if (Success == false) then

				self.IsTryingToBuild = false
				print("TOTAL FAILURE!")

			end
		--end
	end

end

--FML change this one later..
function TyranidsDebugActivateAutoConstructionAbility(_pos, _PlayerStruct, _structureEbps)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)

	_pos = World_Pos(_pos.x,_pos.y,_pos.z)

	Entity_CreateBuildingPosition(_PlayerStruct.Player, UniqueBuildingEGroupName, _structureEbps, _pos, 0)

	--If group size is 0 we have not created the above entity. Likely due to it being placed in a bad position. Must show error and stop function
	if(EGroup_Count(UniqueBuildingEGroup) == 0) then

		return false

	end

	Util_CreateSquadsAtPosition(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _pos, 1)

	table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

	return true

end

--Integrate this with StrategicPoints class, not here in nids... obviously...
function GetAllStrategicPointsOwnedByPlayer(_Player)

	--AddStacktrace("GetAllStrategicPointsOwnedByPlayer")
	
	local AllOwnedStratPoints = {}
	for i = 1, TableLength(g_AllStrategicPointsStructs) do

		if(g_AllStrategicPointsStructs[i].OwnedBy == _Player.PlayerIndex) then

			table.insert(AllOwnedStratPoints, g_AllStrategicPointsStructs[i])

		end
	
	end

	--RemoveStacktrace()

	return AllOwnedStratPoints

end

function Tyranids_GameSetup()

	--AddStacktrace("Tyranids_GameSetup")
	
	Log(0, 0, "Starting: 'Tyranids_GameSetup'...")
	
	for i = 1, g_PlayerCount do

		if(g_AllPlayers[i].RaceDetails.RaceName == "tyranids_race") then
			
			--Log(0, 0, "Player: "..g_AllPlayers[i].PlayerIndex.."' is Tyranids, assigning them an AutomaticBaseBuildingManager.")
			print("Player: "..g_AllPlayers[i].PlayerIndex.."' is Tyranids, assigning them an AutomaticBaseBuildingManager.")
			table.insert(g_AllAutomaticBaseBuildingManagers, AutomaticBaseBuildingManager:new(g_AllPlayers[i]))

		else

			--Log(0, 0, "Player: "..g_AllPlayers[i].PlayerIndex.."' is not Tyranids.")
			print("Player: "..g_AllPlayers[i].PlayerIndex.."' is not Tyranids.")

		end

	end
	
	Log(0, 0, "Finished: 'Tyranids_GameSetup'...")

	Rule_AddInterval(Update_AutomaticBaseBuildingManagers, 5)

	--RemoveStacktrace()

end

function Update_AutomaticBaseBuildingManagers()

	--AddStacktrace("Update_AutomaticBaseBuildingManagers")
	
	for i = 1, TableLength(g_AllAutomaticBaseBuildingManagers) do

		g_AllAutomaticBaseBuildingManagers[i]:Update()

	end

	--RemoveStacktrace()

end
