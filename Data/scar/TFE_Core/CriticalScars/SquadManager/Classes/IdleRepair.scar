--[[TODO: We currently only repair structures here. It would be good to also repair vehicles and stuff like the NL]]

IdleRepair = {}
function IdleRepair:new (_Player, _OwnerSquad, _IdleController, _RepairRadius )

	AddStacktrace("IdleRepair:new")
	
    local IdleRepairObject = 
    {
		--Constants
		IdleController = _IdleController or IdleControl:new(_Player, _OwnerSquad),
		RepairRadius = _RepairRadius,

		--Vars
		EntityRepairing = nil,
		IsRepairingSquad = false
    }

	self.__index = self

	RemoveStacktrace()

	return setmetatable(IdleRepairObject, self)

end

function IdleRepair:Update()
	
	AddStacktrace("IdleRepair:Update")

	if(self.IdleController.IsPerformingLogic) then

		self.IdleController:Update()

		--Need second if as previous logic can change this value
		if(self.IdleController.IsPerformingLogic) then
		
			self:HandleStates()	

		end

	end

	RemoveStacktrace()

end

function IdleRepair:UpdateEachTick() 
	
	AddStacktrace("IdleRepair:UpdateEachTick")

	self:HandleStates()

	RemoveStacktrace()

end

function IdleRepair:HandleStates()

	AddStacktrace("IdleRepair:HandleStates")
    
	if (self.IdleController.IsIdle == true) then		
		--Don't forget to comment out
		--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "IdleRepair: Applying IDLE state")

		local getNewEntity = false

		if (self.EntityRepairing ~= nil) then
			
			if (self.EntityRepairing.EntityAvgHealth == 1.0 or self.EntityRepairing.SquadAvgHealth == 1.0) then

				getNewEntity = true
				self.EntityRepairing = nil

			end

		else

			getNewEntity = true

		end

		local linkedSquad = self.IdleController.OwnerSquad
		if(getNewEntity) then

			local damagedSquads = GetAllDamagedAlliedSquadsInAoE(linkedSquad.OwnerPlayer, linkedSquad.SquadPosition, self.RepairRadius)
			local closestDamagedSquad = GetClosestSquadInList(linkedSquad.SquadPosition, damagedSquads)
			local damagedStructures = GetAllDamagedAlliedStructuresInAoE(linkedSquad.OwnerPlayer, linkedSquad.SquadPosition, self.RepairRadius)
			local closestDamagedEntity = GetClosestEntityInList(linkedSquad.SquadPosition, damagedStructures)

			if(closestDamagedEntity ~= nil and closestDamagedSquad ~= nil) then

				local squadDistFromIdler = World_DistancePointToPoint(linkedSquad.SquadPosition, closestDamagedSquad.SquadPosition)
				local entityDistFromIdler = World_DistancePointToPoint(linkedSquad.SquadPosition, closestDamagedEntity.EntityPosition)

				if(squadDistFromIdler <= entityDistFromIdler) then

					self.EntityRepairing = closestDamagedSquad
					self.IsRepairingSquad = true

				else

					self.EntityRepairing = closestDamagedEntity
					self.IsRepairingSquad = false

				end	

			else
				
				if(closestDamagedEntity ~= nil) then
					
					self.EntityRepairing = closestDamagedEntity
					self.IsRepairingSquad = false

				elseif(closestDamagedSquad ~= nil) then
					
					self.EntityRepairing = closestDamagedSquad
					self.IsRepairingSquad = true

				else
					
					self.EntityRepairing = nil

				end

			end

		end

		if(self.EntityRepairing ~= nil) then

			if(self.IsRepairingSquad == true) then

				Command_SquadSquad(linkedSquad.OwnedByPlayer, linkedSquad.SquadGroupID, SCMD_Repair, self.EntityRepairing.SquadGroupID)

			else
				
				Command_SquadEntity(linkedSquad.OwnedByPlayer, linkedSquad.SquadGroupID, SCMD_Repair, self.EntityRepairing.EntityGroupID)

			end

		end

	else
		--Don't forget to comment out
		--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "IdleRepair: Applying NOT IDLE state")

		self.EntityRepairing = nil

	end	

	RemoveStacktrace()

end