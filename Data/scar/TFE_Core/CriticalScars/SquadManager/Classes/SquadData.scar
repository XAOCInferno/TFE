SquadData = {}
function SquadData:new (_sGameID, _sGroupID, _sIndex, _sID, _sRace, _sBP, _player, _IsRelicUnit, _IdleState)

	AddStacktrace("SquadData:new")
	
	local tmpSGroupID = _sGroupID
	
	if(_sGroupID == false) then

		tmpSGroupID = GetUniqueSG("SquadData_".._sBP)
		SGroup_Add(tmpSGroupID, _sID)

	end
	
	local tmpSGroupName = SGroup_GetName(tmpSGroupID)
	local squadRepairable, _ = TableContains(g_AllRepairableSquads, _sBP)

	---------------------------------------------------------------------------------------
	----If adding any new attributes, ensure to update Create copy and Total Copy funcs----
	---------------------------------------------------------------------------------------
    local SquadDataObject = 
    {
		SquadUniqueID = _sGameID,	
		SquadGroupID = tmpSGroupID,
		SquadGroupName = tmpSGroupName,	
		SquadIndex = _sIndex, 
		SquadID = _sID,	
		SquadUnitRace = _sRace,
		SquadBlueprint = _sBP,
		IsRelicUnit = _IsRelicUnit,
		SquadLoadout = Squad_Count(_sID),
		SquadHasLeader = Squad_HasLeader(_sID),
		SquadLeaderCount = Squad_CountLeaders(_sID),
		SquadMultiLeaders = g_MultiSquadLeaders[_sRace][_sBP] or {},
		SquadMultiLeaderCount = 0,
		SquadInitTime = g_WorldTime,	
		SquadPosition = Squad_GetPosition(_sID),
		SquadHasBeenAttachedTo = false,
		SquadHasAttachedToThis = nil,
		SquadHasAttached = false,
		SquadIsAttached = Squad_IsAttached(_sID),
		SquadAttachedTo = nil,
		SquadDetachedFrom = nil,
		SquadAvgHealth = SGroup_GetAvgHealth( tmpSGroupName ),
		SquadAvgMorale = SGroup_GetAvgMorale( tmpSGroupName ),
		SquadUpgradedWeapons = {},
		SquadValidWeapons = g_ValidSquadWeapons[_sRace][_sBP] or {},
		SquadActiveCommand = Squad_GetActiveCommand( _sID ),
		SquadIsRepairable = squadRepairable,
		OwnedByPlayer = Squad_GetPlayerOwner(_sID),
		OwnerPlayer = _player, 
		IsSelected_Unsynced = Misc_IsSquadSelected(_sID),
		IdleBehaviourController = nil,

		XP = XPManager:new(),

		SquadAppliedCoverMods = {},
		SquadAppliedCoverMods_IDs = {},
		SquadAppliedCoverMods_Index = {},

		--Variables
		History = FixedLengthTable:new(g_MaximumHistories, SquadDataHistory:new(-1, nil)), --A collection of timestamped squad states 
		NextHistoryTime = g_WorldTime + g_HistoryUpdateRate,
		IsUnderAttack = false,
		IsAttacking = false,
		IsMoving = false,
		PreviousSquadLoadout = Squad_Count(_sID),
		PreviousSquadLeaderCount = Squad_CountLeaders(_sID),
		PreviouslyAttackedByPlayers = {},
		PreviouslyAttackedTime = 0,
		PreviouslyAttackedBySquads = {},
		PreviouslyAttackingTime = 0,
		
		IdleState = _IdleState,
		IsIdle = false,
		HasPerformedIdleState = false,
		TimeSinceIdle = 0,
		IdleStartTime = 0,
		AppliedIdleModifiers = {}
	}


	self.__index = self

	local globalObject = setmetatable(SquadDataObject, self)

	RegisterClass(globalObject, "SquadData")

	globalObject:LateConstructor()

	RemoveStacktrace()

	return globalObject

end

function SquadData:LateConstructor()

	self.XP.LinkedSquadData = self --VERY MESSY! Change this later...
	self.SquadMultiLeaderCount = table.getn(self.SquadMultiLeaders)
	
	self:SetInitialWeaponData()
	self:SetWeaponLoadout()

end

function SquadData:GetIfAlive()

	AddStacktrace("SquadData:GetIfExists")

	local alive = true

	if Squad_Exists(self.SquadUniqueID) == false then

		alive = false

	elseif Squad_Count(self.SquadID) + Squad_CountLeaders(self.SquadID) == 0 then

		alive = false

	end

	RemoveStacktrace()

	return alive 

end

function SquadData:SetInitialWeaponData()

	for weapon in self.SquadValidWeapons do

		self.SquadUpgradedWeapons[weapon] = { Count = 0 }

	end

end

function SquadData:SetWeaponLoadout()

	for weapon in self.SquadValidWeapons do
		
		self.SquadUpgradedWeapons[weapon].Count = Squad_WeaponCount( self.SquadID, self.SquadValidWeapons[weapon] )

	end

end

function SquadData:ReaffirmConstants()

	local SetSquadDetails = function(_sgroupid, _itemindex, _squadID)

		self.SquadID = _squadID
		self.SquadIndex = _itemindex
		self.SquadUniqueID = Squad_GetGameID( _squadID )
		self.SquadBlueprint = Squad_GetBlueprintName( _squadID )

	end

	SGroup_ForEach(self.SquadGroupID, SetSquadDetails)

end

function SquadData:GetUpToDateSquadID()

	return Squad_GetSquadFromGameID(self.SquadUniqueID)

end

function SquadData:CreateCopy()

	return SquadData:new(self.SquadUniqueID, self.SquadGroupID, self.SquadIndex, self.SquadID, self.SquadUnitRace, self.SquadBlueprint, self.OwnerPlayer, self.IsRelicUnit, self.IdleState)

end

function SquadData:CreateTotalCopy()

	--Get new squad data entry based on current details
	local copy = self:CreateCopy()

	--Manually add extra stats
	copy.History = self.History
	copy.PreviouslyAttackedByPlayers = self.PreviouslyAttackedByPlayers
	copy.PreviouslyAttackedTime = self.PreviouslyAttackedTime
	copy.PreviouslyAttackedBySquads = self.PreviouslyAttackedBySquads
	copy.IsUnderAttack = self.IsUnderAttack
	copy.SquadAppliedCoverMods = self.SquadAppliedCoverMods
	copy.SquadAppliedCoverMods_IDs = self.SquadAppliedCoverMods_IDs
	copy.SquadAppliedCoverMods_Index = self.SquadAppliedCoverMods_Index
	copy.SquadDetachedFrom = self.SquadDetachedFrom
	copy.SquadAttachedTo = self.SquadAttachedTo	
	copy.SquadHasAttached = self.SquadHasAttached	
	copy.SquadIsAttached = self.SquadIsAttached	
	copy.SquadUpgradedWeapons = self.SquadUpgradedWeapons
	copy.SquadActiveCommand = self.SquadActiveCommand
	copy.IdleBehaviourController = self.IdleBehaviourController
	copy.IsMoving = self.IsMoving

	return copy

end

function SquadData:GoBackInTime(_TimeTravelAmmount)
		
	AddStacktrace("SquadData:GoBackInTime")

	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, self.SquadBlueprint.." attempting to go back in time.")

	World_FXEvent("data:Art/Events/races/necron/abilities/necron_AoE_time_travel_squad", self.SquadPosition)

	--Get the nearest recorded history, if no history is provided we will need to handle it a different way
	local ClosestHistoryStateIndex = self:GetClosestHistoryIndexToDesired(_TimeTravelAmmount)

	--I don't necessarily want a null check here, need to implement logic to create a proxy history if one isn't found
	if ClosestHistoryStateIndex ~= -1 then

		--Convert the current state into the synced state then updates the game to the synced state
		self:SyncSquadDataStates(self.History.Data[ClosestHistoryStateIndex].State)
		self:SyncGameStateToDataState()

	end

	World_FXEvent("data:Art/Events/races/necron/abilities/necron_AoE_time_travel_squad", self.SquadPosition)

	RemoveStacktrace()

end

function SquadData:GetClosestHistoryIndexToDesired(_TimeTravelAmmount)

	AddStacktrace("SquadData:GetClosestHistoryIndexToDesired")

	local ClosestTimeToDesired = 10000
	local ClosestStateIndex = -1
	local DesiredGameTime = g_WorldTime - _TimeTravelAmmount

	for i = 1, self.History.MaximumTableEntries do
		
		if self.History.Data[i].Time ~= -1 then

			local TimeToDesired = self.History.Data[i].Time - DesiredGameTime
			
			if TimeToDesired == _TimeTravelAmmount then

				ClosestState = i
				break

			elseif TimeToDesired < ClosestTimeToDesired  then

				ClosestStateIndex = i
				ClosestTimeToDesired = TimeToDesired

			end

		end

	end
	
	if self.SquadHasAttached then

		self:ReaffirmConstants()

	end

	RemoveStacktrace()
	
	return ClosestStateIndex

end

function SquadData:Update(_self)
		
	AddStacktrace("SquadData:Update")

	--Store current state in our history
	local copy = _self:CreateCopy()

	--Update history at set intervals
	if g_WorldTime >= _self.NextHistoryTime then
		
		_self.History:Insert(SquadDataHistory:new(g_WorldTime, copy))
		_self.NextHistoryTime = _self.NextHistoryTime + g_HistoryUpdateRate

	end

	_self.IsAttacking = GetWorldLifetime(_self.PreviouslyAttackingTime) <= g_CombatTimeWindow 

	--Update current state, doesn't matter which order we do this as 
	if copy ~= nil then

		_self.IsMoving = World_DistancePointToPoint(_self.SquadPosition, copy.SquadPosition) ~= 0 	
		
		_self:SyncSquadDataStates(copy)

	end

	if _self.IdleState.Behaviour ~= eIDLE_STATE_BEHAVIOUR_NONE then

		_self:ManageIdleState()

	end

	RemoveStacktrace()

end

function SquadData:ManageIdleState()
		
	AddStacktrace("SquadData:ManageIdleState")

	local isIdle = (self.SquadActiveCommand == SQUADSTATEID_Idle) and (self.IsMoving == false) and (self.IsAttacking == false) and (self.SquadIsAttached == false)

	if isIdle == true and self.IsIdle == false then

		--Set to idle if we are not already set as idle
		self:SetIdleStateToActive()

	elseif isIdle == false and self.IsIdle == true then

		--Set to not idle if we are already set as idle
		self:SetIdleStateToInactive()

	end

	--If we've been idle for enough time, perform the idle behaviour
	self.TimeSinceIdle = GetWorldLifetime(self.IdleStartTime)

	if self.IsIdle then

		if self.HasPerformedIdleState == false then

			if self.TimeSinceIdle > self.IdleState.TimeMustBeIdleFor then

				self:DoIdleState()

			end

		elseif(self.IdleBehaviourController ~= nil) then			

			self.IdleBehaviourController:UpdateEachTick()

		end

	end

	RemoveStacktrace()

end

function SquadData:DoIdleState()

	AddStacktrace("SquadData:DoIdleState")
	
	if self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_CANNIBALIZE then

		Command_Squad(self.OwnedByPlayer, self.SquadGroupID, SCMD_Cannibalize)

	elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_REPAIR then

		if(self.IdleBehaviourController == nil) then

			self.IdleBehaviourController = IdleRepair:new(self.OwnedByPlayer, self, nil, self.IdleState.Radius)
	
		end

		self.IdleBehaviourController:Update()

	elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_CONSTRUCT then

		if(self.IdleBehaviourController == nil) then

			self.IdleBehaviourController = IdleConstruct:new(self.OwnedByPlayer, self, nil, self.IdleState.Radius)
	
		end

		self.IdleBehaviourController:Update()

	elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_REPAIR_CONSTRUCT then

		if(self.IdleBehaviourController == nil) then

			self.IdleBehaviourController = IdleBuilder:new (self.OwnedByPlayer, self, self.IdleState.Radius, self.IdleState.Radius, false)

		end
		
		self.IdleBehaviourController:Update()

	elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_REPAIR_CONSTRUCT_CANNIBALIZE then

		if(self.IdleBehaviourController == nil) then

			self.IdleBehaviourController = IdleBuilder:new (self.OwnedByPlayer, self, self.IdleState.Radius, self.IdleState.Radius, true)

		end

		self.IdleBehaviourController:Update()

	elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_WORSHIP_CHAOS then

		if(self.IdleBehaviourController == nil) then

			self.IdleBehaviourController = IdleSummmonEntity:new(self.OwnedByPlayer, self, nil, self.IdleState.EntityToSummon)
	
		end

		self.IdleBehaviourController:Update()

		Anim_PlaySquadAnim(self.SquadID, "sp_ritual")
		table.insert(self.AppliedIdleModifiers, Modifier_ApplyToSquad(gMod_DisableShooting, self.SquadID))
		table.insert(self.AppliedIdleModifiers, Modifier_ApplyToSquad(gMod_SightRadiusReduction60, self.SquadID))
		table.insert(self.AppliedIdleModifiers, Modifier_ApplyToSquad(gMod_KeenSightRadiusReduction60, self.SquadID))

	end

	self.HasPerformedIdleState = true

	RemoveStacktrace()

end

function SquadData:SetIdleStateToActive()
	
	AddStacktrace("SquadData:SetIdleStateToActive")

	--Set that idle state is activated
	self.IsIdle = true
	self.IdleStartTime = g_WorldTime
	self.TimeSinceIdle = 0

	--Trigger post-activation effects
	self:OnIdleActivate()

	RemoveStacktrace()

end

function SquadData:OnIdleActivate()

	AddStacktrace("SquadData:OnIdleActivate")

	RemoveStacktrace()

end

function SquadData:SetIdleStateToInactive()

	AddStacktrace("SquadData:SetIdleStateToInactive")

	--Set we've ended idle
	self.IsIdle = false

	--Activate post-idle effects
	self:OnIdleEnd()

	--Set we've not performed the idle state
	self.HasPerformedIdleState = false
	
	RemoveStacktrace()

end

function SquadData:OnIdleEnd()

	AddStacktrace("SquadData:OnIdleEnd")

	if self.HasPerformedIdleState == true then

		if self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_WORSHIP_CHAOS then

			Anim_StopSquadAnim(self.SquadID, "sp_ritual")
				
		end

		if(self.IdleBehaviourController ~= nil) then

			self.IdleBehaviourController:Update()

		end

		for i = 1, table.getn(self.AppliedIdleModifiers) do
			
			pcall(Modifier_Remove, self.AppliedIdleModifiers[i])

		end

	end

	RemoveStacktrace()

end

function SquadData:SyncSquadDataStates(copyFromState)

	AddStacktrace("SquadData:SyncSquadDataStates")

	self.SquadLoadout = copyFromState.SquadLoadout
	self.SquadHasLeader = copyFromState.SquadHasLeader
	self.SquadLeaderCount = copyFromState.SquadLeaderCount
	self.SquadPosition = copyFromState.SquadPosition
	self.SquadIsAttached = copyFromState.SquadIsAttached
	self.OwnedByPlayer = copyFromState.OwnedByPlayer
	self.IsSelected_Unsynced = copyFromState.IsSelected_Unsynced --Not online synced!
	self.SquadAvgHealth = copyFromState.SquadAvgHealth
	self.SquadAvgMorale = copyFromState.SquadAvgMorale
	self.SquadUpgradedWeapons = copyFromState.SquadUpgradedWeapons
	self.SquadActiveCommand = copyFromState.SquadActiveCommand

	RemoveStacktrace()

end

function SquadData:SyncGameStateToDataState()

	AddStacktrace("SquadData:SyncGameStateToDataState")

	--Despawn and clear squad
	SGroup_DeSpawn(self.SquadGroupName)
	Squad_Destroy(self.SquadID)
	SGroup_Clear(self.SquadGroupID)

	--Summon replacement squad at location with loadout
	self.SquadID = ActivateSummonSquadAbility(self.SquadBlueprint, self.OwnedByPlayer, self.SquadPosition, self.SquadLoadout)

	--Setup new squad constants
	SGroup_Add(self.SquadGroupID, self.SquadID)
	self.SquadUniqueID = Squad_GetGameID(self.SquadID)

	for weapon in self.SquadValidWeapons do
		
		for i = 1, self.SquadUpgradedWeapons[weapon].Count do

			Squad_UpgradeWeapon( self.SquadID, self.SquadValidWeapons[weapon] )

		end

	end

	--Add leader if history had one
	if self.SquadHasLeader then

		if self.SquadMultiLeaderCount > 0 then
			
			for i = 1, self.SquadLeaderCount do

				--Need to add functionality to record which types of Leader are in the squad, currently we pick at random
				Squad_AddLeaderAtIndex(self.SquadID, World_GetRand(1, self.SquadMultiLeaderCount))

			end

		else

			for i = 1, self.SquadLeaderCount do

				Squad_AddLeader(self.SquadID)

			end

		end

	end

	--Set stats
	Squad_SetHealth(self.SquadID, self.SquadAvgHealth)
	Squad_SetMorale(self.SquadID, self.SquadAvgMorale)

	RemoveStacktrace()

end


function SquadData:CheckForDetachAndUpdateLoadout()
	
	AddStacktrace("SquadData:CheckForDetachAndUpdateLoadout")

	--If we think we have been attched to, but no longer have an attached model, reduce the expected squad size by 1 to compensate for the detach 
	local isAttached = Squad_IsAttached(self.SquadID)
	if(self.SquadHasBeenAttachedTo and isAttached == false) then

		self.PreviousSquadLoadout = self.PreviousSquadLoadout - 1
		self.SquadHasBeenAttachedTo = false

	end

	RemoveStacktrace()

end

function SquadData:Deconstruct()

	AddStacktrace("SquadData:Deconstruct")
	
	self.XP:Deconstruct()
	self.History:Deconstruct()

	RemoveStacktrace()

	DeconstructClass(self)

end