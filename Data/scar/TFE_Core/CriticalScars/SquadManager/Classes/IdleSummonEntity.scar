IdleSummmonEntity = {}
function IdleSummmonEntity:new (_Player, _OwnerSquad, _EntityToSummon)

	AddStacktrace("FiresightVisionCircle:new")
	
    local IdleSummmonEntityObject = 
    {
		--Constants
		OwnerSquad = _OwnerSquad,
        
        --Variables
		LinkedEntityID = ActivateSummonEntityAbility(_EntityToSummon, _Player, _OwnerSquad.SquadPosition),
        EntityIsSpawned = true,
        IsPerformingLogic = true,
        IsIdle = false
    }

	self.__index = self

	RemoveStacktrace()

	return setmetatable(IdleSummmonEntityObject, self)

end

function IdleSummmonEntity:Update()
	
	AddStacktrace("IdleSummmonEntity:Update")

	if(self.IsPerformingLogic) then

		self:ValidateOwnerSquad()
		
		--Need second if as previous logic can change this value
		if(self.IsPerformingLogic) then

            self.IsIdle = self.OwnerSquad.SquadActiveCommand == SQUADSTATEID_Idle
			self:HandleStates()
			
		end

	end

	RemoveStacktrace()

end

function IdleSummmonEntity:HandleStates()

	AddStacktrace("IdleSummmonEntity:HandleStates")
    
	if (self.IsIdle == true) then
		--Don't forget to comment out
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "IdleEntitySummoner: Applying IDLE state")

		if(self.EntityIsSpawned == false) then

            Entity_SetPosition( self.LinkedEntityID, self.OwnerSquad.SquadPosition )
            Entity_Spawn( self.LinkedEntityID )
            self.EntityIsSpawned = true

        end

	else
		--Don't forget to comment out
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "IdleEntitySummoner: Applying NOT IDLE state")
        
		if(self.EntityIsSpawned == true) then

            Entity_DeSpawn( self.LinkedEntityID )
            self.EntityIsSpawned = false

        end

	end	

	RemoveStacktrace()

end

function IdleSummmonEntity:ValidateOwnerSquad()

	AddStacktrace("IdleSummmonEntity:ValidateOwnerSquad")

	local isValid = true

	if(self.OwnerSquad == nil) then

		isValid = false

	elseif(self.OwnerSquad:GetIfAlive() == false) then

		isValid = false

	end

	if(isValid == false) then

		Entity_Destroy(self.LinkedEntityID)
		self.IsPerformingLogic = false

	end

	RemoveStacktrace()

end