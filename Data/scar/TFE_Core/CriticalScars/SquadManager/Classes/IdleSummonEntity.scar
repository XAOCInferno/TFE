IdleSummmonEntity = {}
function IdleSummmonEntity:new (_Player, _OwnerSquad, _IdleController, _EntityToSummon)

	AddStacktrace("FiresightVisionCircle:new")
	
    local IdleSummmonEntityObject = 
    {
		--Constants
		IdleController = _IdleController or IdleControl:new(_Player, _OwnerSquad),
        
        --Variables
		LinkedEntityID = ActivateSummonEntityAbility(_EntityToSummon, _Player, _OwnerSquad.SquadPosition),
        EntityIsSpawned = true
    }

	self.__index = self

	local globalObject = setmetatable(IdleSummmonEntityObject, self)

	RegisterClass(globalObject, "IdleSummmonEntity")

	RemoveStacktrace()

	return globalObject

end

function IdleSummmonEntity:UpdateEachTick() end

function IdleSummmonEntity:Update()
	
	AddStacktrace("IdleSummmonEntity:Update")

	if(self.IdleController.IsPerformingLogic) then

		self.IdleController:Update()

		--Need second if as previous logic can change this value
		if(self.IdleController.IsPerformingLogic) then
		
			self:HandleStates()	

		else
			
			self:Deconstruct()

		end

	end

	RemoveStacktrace()

end

function IdleSummmonEntity:HandleStates()

	AddStacktrace("IdleSummmonEntity:HandleStates")
    
	if (self.IdleController.IsIdle == true) then
		--Don't forget to comment out
		--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "IdleEntitySummoner: Applying IDLE state")

		if(self.EntityIsSpawned == false) then

            Entity_SetPosition( self.LinkedEntityID, self.IdleController.OwnerSquad.SquadPosition )
            Entity_Spawn( self.LinkedEntityID )
            self.EntityIsSpawned = true

        end

	else
		--Don't forget to comment out
		--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "IdleEntitySummoner: Applying NOT IDLE state")
        
		if(self.EntityIsSpawned == true) then

            Entity_DeSpawn( self.LinkedEntityID )
            self.EntityIsSpawned = false

        end

	end	

	RemoveStacktrace()

end

function IdleSummmonEntity:Deconstruct()

	AddStacktrace("IdleSummmonEntity:Deconstruct")

	pcall(Entity_Destroy, self.LinkedEntityID )
	self.IdleController:Deconstruct()

	RemoveStacktrace()

	DeconstructClass(self)
	
	self.__index = nil
	self = nil

end