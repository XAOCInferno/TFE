import("TFE_Core/CriticalScars/SquadManager/Imports/SquadManager_Imports.scar")

---------------
--Main Script--
---------------
function Setup_SquadManager()
	
	AddStacktrace("Setup_SquadManager")

	Set_AllSquads_Immediate()

	RemoveStacktrace()

end

function Set_AllSquads_Immediate()
	
	AddStacktrace("Set_AllSquads_Immediate")

	for i = 1, g_PlayerCount do
		
		Set_PlayerSquads_Immediate(i)
		
	end

	RemoveStacktrace()

end

function Set_PlayerSquads_Immediate(_PlayerIndex)	

	AddStacktrace("Set_PlayerSquads_Immediate")
					
	local AddSGroupData = function(_sgroupid, _itemindex, _squadID)
		
		AddStacktrace("AddSGroupData")

		local newSquadGameID = Squad_GetGameID( _squadID )
		local squadBP = Squad_GetBlueprintName( _squadID )		
		local criticalError = false

		local shouldIgnore, _ = TableContains(g_SquadBlueprintToIgnore, squadBP)
		
		if(shouldIgnore == true) then 
			
			criticalError = true

		else

			if(squadBP ~= nil) then
			
				for l = 1, TableLength(g_AllSquadsData[_PlayerIndex]) do

					--Do we need this functionality here? It should probably be in a seperate Update.
					if(g_AllSquadsData[_PlayerIndex][l] == nil) then

						table.remove(g_AllSquadsData[_PlayerIndex], l)	
						--I don't think we need to return here?
						--return false

					end
					
					if(g_AllSquadsData[_PlayerIndex][l].SquadUniqueID == newSquadGameID) then
								
						criticalError = true
						break
												
					end

				end

			else

				LogOnce(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Can't add squad data, BP is nil!")
				criticalError = true
			
			end

		end		
		
		if(criticalError == false) then
			
			--Need to probably move the relic units table to a global place
			local isRelicUnit, _ = TableContains({"chaos_squad_bloodthirster", "dark_eldar_squad_dais_of_destruction", "eldar_squad_avatar", "guard_squad_baneblade", "inquisition_squad_land_raider_crusader", "necron_restored_monolith_squad", "ork_squad_squiggoth", "sisters_squad_living_saint", "space_marine_squad_land_raider", "space_marine_squad_land_raider_veteran", "tau_krootox_squad", "tyranids_squad_swarmlord"},squadBP)
			--Might need to create a unique sgroupid later...
			local tmpData = SquadData:new( newSquadGameID, _sgroupid, _itemindex, _squadID, g_AllPlayers[_PlayerIndex].RaceDetails.RaceName, squadBP, g_AllPlayers[_PlayerIndex], isRelicUnit)
			table.insert(g_AllSquadsData[_PlayerIndex], tmpData)	

		end

		RemoveStacktrace()

	end
	
	--We should only run the squad checker if the player is alive
	if (Player_IsAlive(g_AllPlayers[_PlayerIndex].Player)) then

		Update_ExistingSquadDetails()		
		SGroup_ForEachEx(Player_GetSquads(g_AllPlayers[_PlayerIndex].Player), AddSGroupData, true, false)				
		
		for k = 1, TableLength(g_AllSquadsData[_PlayerIndex]) do

			if(g_AllSquadsData[_PlayerIndex][k] ~= nil) then
				
				local shouldIgnore, _ = TableContains(g_SquadBlueprintToIgnore, g_AllSquadsData[_PlayerIndex][k].SquadBlueprint)

				if(g_AllSquadsData[_PlayerIndex][k].SquadBlueprint == nil or g_AllSquadsData[_PlayerIndex][k].SquadLoadout == 0 or shouldIgnore) then

					table.remove(g_AllSquadsData[_PlayerIndex], k)
					
				end

			end

		end
			
		g_PlayerSquadCount[_PlayerIndex] = Player_GetActiveSquadCount(g_AllPlayers[_PlayerIndex].Player)

	end

	RemoveStacktrace()

end

function Update_ExistingSquadDetails()

	AddStacktrace("Update_ExistingSquadDetails")

	for i = 1, g_PlayerCount do

		for l = 1, TableLength(g_AllSquadsData[i]) do

			--Simple check to avoid null ref
			if(g_AllSquadsData[i][l] == nil) then

				table.remove(g_AllSquadsData[i], l)	


			--Squad has been destroyed since our last check, so we grant red resource.
			elseif(Squad_Exists(g_AllSquadsData[i][l].SquadUniqueID) == false) then	--Does this work?
				
				Set_SquadCombatDetails(g_AllSquadsData[i][l], true)	
				g_AllSquadsData[i][l].SquadHasPreviouslyExisted = true
				table.remove(g_AllSquadsData[i], l)							
			
			--Squad exists and has more than 0 members so let's update their squad details.
			else						
				g_AllSquadsData[i][l]:Update(g_AllSquadsData[i][l])
				--[[g_AllSquadsData[i][l].SquadLoadout = Squad_Count(g_AllSquadsData[i][l].SquadID)
				g_AllSquadsData[i][l].SquadHasLeader = Squad_HasLeader(g_AllSquadsData[i][l].SquadID)
				g_AllSquadsData[i][l].SquadLeaderCount = Squad_CountLeaders(g_AllSquadsData[i][l].SquadID)]]
				Set_SquadCombatDetails(g_AllSquadsData[i][l], false)		

				--Squad exists but now has 0 members. At 0 members the squad is destroyed so this likely will never happen. If log isn't ever observed, delete this.
				if(g_AllSquadsData[i][l].SquadLoadout == 0 and g_AllSquadsData[i][l].SquadHasPreviouslyExisted == true) then

					Log(eLOG_TYPE_INFO, eLOG_FULL, "Squad has been destroyed but squad still exists?")	
					Set_SquadCombatDetails(g_AllSquadsData[i][l], true)			
					table.remove(g_AllSquadsData[i],l)	

				else
					--Squad is alive and we update their combat status to look for dead members etc
					Set_SquadCombatDetails(g_AllSquadsData[i][l], false)

				end
			end

		end	

	end

	RemoveStacktrace()

end

function CheckForSquadLosses(SquadStruct)

	AddStacktrace("CheckForSquadLosses")

	local Losses = 0
	local LeaderLosses = 0
	
	if(SquadStruct.PreviousSquadLoadout > SquadStruct.SquadLoadout) then

		Losses = SquadStruct.PreviousSquadLoadout - SquadStruct.SquadLoadout

	end
	
	if(SquadStruct.PreviousSquadLeaderCount > SquadStruct.SquadLeaderCount) then

		LeaderLosses = SquadStruct.PreviousSquadLeaderCount - SquadStruct.SquadLeaderCount

	end

	SquadStruct.PreviousSquadLoadout = SquadStruct.SquadLoadout
	SquadStruct.PreviousSquadLeaderCount = SquadStruct.SquadLeaderCount

	RemoveStacktrace()

	return Losses, LeaderLosses

end

--Use 1 or 0 for SquadDead with 0 being false and 1 being true
function UpdateSquadCombatDeathResources(_DefenderSquadStruct, _RedReceiverPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

	AddStacktrace("UpdateSquadCombatDeathResources")

	local TotalRed = 0
	TotalRed = TotalRed + (0.5 * _ModelLosses)
	TotalRed = TotalRed + (1.5 * _LeaderLosses)
	TotalRed = TotalRed + (3 * _SquadDead)
	TotalRed = TotalRed + (3 * _CommanderLosses)
	TotalRed = TotalRed * g_RedGainMultiplier

	_RedReceiverPlayer.CurrentResources.RT_Red = _RedReceiverPlayer.CurrentResources.RT_Red + TotalRed	
	_DefenderPlayer.CurrentResources.RT_Red = _DefenderPlayer.CurrentResources.RT_Red + (TotalRed * 0.5)	

	--Debug	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player ".._RedReceiverPlayer.PlayerIndex.." current Red = ".._RedReceiverPlayer.CurrentResources.RT_Red)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player ".._DefenderPlayer.PlayerIndex.." current Red = ".._DefenderPlayer.CurrentResources.RT_Red)

	RemoveStacktrace()

end

--Use 1 or 0 for SquadDead with 0 being false and 1 being true
function UpdateSquadCombatDeathStats( _DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

	AddStacktrace("UpdateSquadCombatDeathStats")

	_AttackerPlayer.StatsManager:AddKills( _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead, _DefenderSquadStruct)
	_DefenderPlayer.StatsManager:AddLosses( _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead )

	RemoveStacktrace()

end

function SquadSetLastCombats(_DefenderSquadStruct, _AttackerPlayer)

	for i = 1, g_PlayerSquadCount[_AttackerPlayer.PlayerIndex + 1] do

		local EnemySquad = g_AllSquadsData[_AttackerPlayer.PlayerIndex + 1][i]
		if(EnemySquad ~= nil) then

			if(SGroup_WasAttacked(_DefenderSquadStruct.SquadGroupID, EnemySquad.SquadGroupID)) then

				local contains, _  = TableContains(_DefenderSquadStruct.PreviouslyAttackedBySquads, EnemySquad)

				if(contains == false) then

					table.insert(_DefenderSquadStruct.PreviouslyAttackedBySquads, EnemySquad)

				end

			end
			
		end

	end

end

function UpdateSquadCombatDeath(_DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

	UpdateSquadCombatDeathResources(_DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 
	UpdateSquadCombatDeathStats(_DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

end

function Get_SquadLosses(_SquadStruct)

	--We don't need to add Stacktrace here as simple getter
	return _SquadStruct.PreviousSquadLoadout - _SquadStruct.SquadLoadout, _SquadStruct.SquadLeaderCount - _SquadStruct.PreviousSquadLeaderCount

end

--[[
	TODO!!!
	I am concerned this may be applying multiple times due to multiple players being the aggressor
	Please test in multiplayer to be certain
	If so will require a small change to how we apply red and stats
]]
function Set_SquadCombatDetails(_SquadStruct, _IsDead)
	
	AddStacktrace("Set_SquadCombatDetails")

	local ModelLosses = 0
	local LeaderLosses = 0
	local CommanderLosses = 0 --Functionality to be added
	local SquadDeath = 0

	--Squad is dead. Time to give big reward to killers...
	if(_IsDead) then

		local AttackerPlayerLength = table.getn(_SquadStruct.PreviouslyAttackedByPlayers) or 0

		if(AttackerPlayerLength == 0) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No players have fought this squad, so who killed it?")	
			
		else

			for i = 1, AttackerPlayerLength do

				ModelLosses, LeaderLosses = Get_SquadLosses(_SquadStruct)
				ModelLosses = ModelLosses + LeaderLosses
				ModelLosses = math.max(ModelLosses, 1) --Should we fix CheckForSquadLosses instead of this?
				
				Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Squad destroyed! Adding large Red for Player ".._SquadStruct.PreviouslyAttackedByPlayers[i].PlayerIndex..".")	
				UpdateSquadCombatDeath(_SquadStruct, _SquadStruct.PreviouslyAttackedByPlayers[i], _SquadStruct.OwnerPlayer, ModelLosses, LeaderLosses, CommanderLosses, 1)

			end

		end

	--Squad is still alive so we need to calculate who is fighting them
	elseif(Squad_IsUnderAttack(_SquadStruct.SquadID)) then
			
		local PlayersToRemove = {}
		for i = 1, g_PlayerCount do
			
			if(Squad_IsUnderAttackByPlayer(_SquadStruct.SquadID, g_AllPlayers[i].Player)) then
				
				local contains, _  = TableContains(_SquadStruct.PreviouslyAttackedByPlayers, g_AllPlayers[i])

				if(contains == false) then

					table.insert(_SquadStruct.PreviouslyAttackedByPlayers, g_AllPlayers[i])

				end				

				SquadSetLastCombats(_SquadStruct, g_AllPlayers[i])

				ModelLosses, LeaderLosses = CheckForSquadLosses(_SquadStruct)

				if(ModelLosses > 0 or LeaderLosses > 0) then

					UpdateSquadCombatDeath(_SquadStruct, g_AllPlayers[i], _SquadStruct.OwnerPlayer, ModelLosses, LeaderLosses, CommanderLosses, 0)
					
					Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Adding Red for Player "..g_AllPlayers[i].PlayerIndex..".")					
	
				end	
			
			else

				--We don't know who attacked? we should calculate a player here based on distance perhaps, or just assign to assassin who is only one we know can do this.
				table.insert(PlayersToRemove, g_AllPlayers[i])

			end			

		end

		_SquadStruct.PreviouslyAttackedByPlayers = TableRemoveDuplicates(_SquadStruct.PreviouslyAttackedByPlayers, PlayersToRemove)

	--It's been quite a long time since we've been in a fight so we shouldn't remember last fighting players, especially as we can be scuttled.
	elseif(g_WorldTime - _SquadStruct.PreviouslyAttackedTime > 5) then--Move this 5 into a global "attack time"
		
		_SquadStruct.PreviouslyAttackedByPlayers = {}

	end

	RemoveStacktrace()

end

function GetAllSelectedSquads()
	
	AddStacktrace("GetAllSelectedSquads")

	local allSelectedSquads = {}

	for playerIndex = 1, g_AllSquadsData do

		for squadIndex = 1, g_AllSquadsData[playerIndex] do

			if(g_AllSquadsData[playerIndex][squadIndex].IsSelected == true) then

				table.insert(allSelectedSquads, g_AllSquadsData[playerIndex][squadIndex])

			end

		end

	end

	RemoveStacktrace()

	return allSelectedSquads
	
end

function GetIfSquadSelected(_DesiredSquad)

	AddStacktrace("GetIfSquadSelected")

	local AllSelectedSquads = GetAllSelectedSquads()
	local contains, _ = TableContains(AllSelectedSquads, _DesiredSquad)

	RemoveStacktrace()

	return contains
end

--Use for AoE 
function GetAllSquadsInArea_NonPlayerSpecific(_pos, _proximity)
	
	AddStacktrace("GetAllSquadsInArea_NonPlayerSpecific")	
	
	SquadsInRange = {}

	for z = 1, g_PlayerCount do

		for i = 1, g_PlayerSquadCount[z] do
			
			if(g_AllSquadsData[z][i] ~= nil) then
				
				if(World_DistancePointToPoint(_pos, g_AllSquadsData[z][i].SquadPosition) <= _proximity) then

					Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[z][i].SquadBlueprint.." Is in range.")	
					table.insert(SquadsInRange, g_AllSquadsData[z][i])

				end

			end

		end

	end

	RemoveStacktrace()

	return SquadsInRange

end

--Use for AoE 
function GetAllSquadsInArea(_player, _pos, _proximity)
	
	AddStacktrace("GetAllSquadsInArea")	

	SquadsInRange = {}

	for i = 1, g_PlayerSquadCount[_player] do

		if(g_AllSquadsData[_player][i] ~= nil) then

			if(World_DistancePointToPoint(_pos, g_AllSquadsData[_player][i].SquadPosition) <= _proximity) then

				Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[_player][i].SquadBlueprint.." Is in range.")	
				table.insert(SquadsInRange, g_AllSquadsData[_player][i])

			end

		end

	end

	RemoveStacktrace()

	return SquadsInRange

end

--Use for AoE 
function GetAllSquadsInAreaFromPlayerTable(_players, _pos, _proximity)
	
	AddStacktrace("GetAllSquadsInAreaFromPlayerTable")

	SquadsInRange = {}

	for j = 1, TableLength(_players) do

		for i = 1, g_PlayerSquadCount[j] do

			if(World_DistancePointToPoint(_pos, g_AllSquadsData[j][i].SquadPosition) <= _proximity) then

				Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[j][i].SquadBlueprint.." Is in range.")	
				table.insert(SquadsInRange, g_AllSquadsData[j][i])

			end

		end

	end

	RemoveStacktrace()

end

--Use for single target
function GetClosestSquadToPos(_player, _pos, _maxDistance)

	AddStacktrace("GetClosestSquadToPos")

	if(TableLength(g_PlayerSquadCount[_player]) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are near that position as player has no squads.")
	
	else

		ClosestSquad = nil
		ShortestDistance = 10000

		for i = 1, g_PlayerSquadCount[_player] do

			if(g_AllSquadsData[_player][i] ~= nil) then

				local DistanceToPoint = World_DistancePointToPoint(_pos, g_AllSquadsData[_player][i].SquadPosition)

				if(DistanceToPoint <= ShortestDistance and DistanceToPoint < _maxDistance) then

					--We should probably remove this log as it will spew info to other players...
					Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[_player][i].SquadBlueprint.." Is closer with distance of "..DistanceToPoint)
					ShortestDistance = DistanceToPoint
					ClosestSquad = g_AllSquadsData[_player][i].SquadPosition

				end

			end

		end

		
		if(ClosestSquad == nil) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are in range of that position. You may need to increae the max distance.")

		end

	end

	RemoveStacktrace()

	return ClosestSquad 

end

--Use for single target in given group
function GetClosestSquadInSquadTableToPos(_squads, _pos, _maxDistance)

	AddStacktrace("GetClosestSquadInSquadTableToPos")	

	if(TableLength(_squads) ~= 0) then
	
		ClosestSquad = nil
		ShortestDistance = 10000

		for i = 1, TableLength(_squads) do

			local point1 = World_Pos(_squads[i].SquadPosition.x, _squads[i].SquadPosition.y, _squads[i].SquadPosition.z )
			local point2 = World_Pos(_pos.x, _pos.y, _pos.z )
			local DistanceToPoint = World_DistancePointToPoint(point1, point2)

			if(DistanceToPoint <= ShortestDistance and DistanceToPoint < _maxDistance) then

				--We should probably remove this log as laggy + will spew info in the console for other players...
				Log(eLOG_TYPE_INFO, eLOG_VERBOSE, _squads[i].SquadBlueprint.." Is closer with distance of "..DistanceToPoint)
				ShortestDistance = DistanceToPoint
				ClosestSquad = _squads[i]

			end

		end

		if(ClosestSquad == nil) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are in range of that position. You may need to increae the max distance.")

		end

	else
		
		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are near that position as player has no squads.")
		
	end

	RemoveStacktrace()

	return ClosestSquad 

end

function GetAllSquadsOfBlueprint(_player, _acceptedBlueprints)

	AddStacktrace("GetAllSquadsOfBlueprint")

	local AllSquadsOfBlueprint = {}

	for i = 1, TableLength(_acceptedBlueprints) do

		for j = 1, g_PlayerSquadCount[_player] do
			
			if(g_AllSquadsData[_player][j] ~= nil) then

				if(g_AllSquadsData[_player][j].SquadBlueprint == _acceptedBlueprints[i]) then

					table.insert(AllSquadsOfBlueprint, g_AllSquadsData[_player][j])

				end

			end

		end

	end

	if(TableLength(AllSquadsOfBlueprint) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified blueprint are owned by player.")

	end

	RemoveStacktrace()

	return AllSquadsOfBlueprint

end

function GetRelicUnit(_player)

	AddStacktrace("GetRelicUnit")

	local RelicUnit = nil

	for j = 1, g_PlayerSquadCount[_player] do

		if(g_AllSquadsData[_player][j] ~= nil) then --We shouldn't need a nil check here...

			if(g_AllSquadsData[_player][j].IsRelicUnit) then
				
				RelicUnit = g_AllSquadsData[_player][j]
				break

			end

		end

	end

	RemoveStacktrace()

	return RelicUnit

end

function GetAllSquadsOfArmourType(_player, _acceptedArmourTypes)

	AddStacktrace("GetAllSquadsOfArmourType")

	local AllSquadsOfArmourType = {}

	for i = 1, TableLength(_acceptedArmourTypes) do

		for j = 1, g_PlayerSquadCount[_player] do

			if(Squad_HasArmourType(g_AllSquadsData[_player][j].SquadID, _acceptedArmourTypes[i])) then

				table.insert(AllSquadsOfArmourType, g_AllSquadsData[_player][j])

			end

		end

	end

	if(TableLength(AllSquadsOfArmourType) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified armour types exist.")

	end

	RemoveStacktrace()

	return AllSquadsOfArmourType

end

function GetAllSquadsOfArmourTypeFromSquadTable(_squads, _acceptedArmourTypes)

	AddStacktrace("GetAllSquadsOfArmourTypeFromSquadTable")

	if(TableLength(_squads) ~= 0) then

		local AllSquadsOfArmourType = {}

		for i = 1, TableLength(_acceptedArmourTypes) do

			for j = 1, TableLength(_squads) do

				if(Squad_HasArmourType(_squads[j].SquadID, _acceptedArmourTypes[i])) then

					table.insert(AllSquadsOfArmourType, _squads[j])

				end
				
			end

		end

		if(TableLength(AllSquadsOfArmourType) == 0) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified armour types exist.")

		end

	else

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "_squads table is nil.")
		return nil
	
	end

	RemoveStacktrace()

	return AllSquadsOfArmourType

end

function GetAllSquadsOfArmourTypeFromPlayerTable(_players, _acceptedArmourTypes, _allowAttached)

	AddStacktrace("GetAllSquadsOfArmourTypeFromPlayerTable")

	local AllSquadsOfArmourType = {}

	for i = 1, TableLength(_acceptedArmourTypes) do

		for p = 1, TableLength(_players) do

			local pIndex = _players[p].PlayerIndex+1
			--Continue from here, the max limit in this loop is wrong ofc lol..

			for j = 1, TableLength(g_AllSquadsData[pIndex]) do
				
				if(Squad_HasArmourType(g_AllSquadsData[pIndex][j].SquadID, _acceptedArmourTypes[i])) then
					
					if(_allowAttached == true or g_AllSquadsData[pIndex][j].SquadIsAttached == false) then

						table.insert(AllSquadsOfArmourType, g_AllSquadsData[pIndex][j])

					end
					
				end
				
			end

		end

	end

	if(TableLength(AllSquadsOfArmourType) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified armour types exist.")

	end
	
	RemoveStacktrace()

	return AllSquadsOfArmourType

end

