debug_GlobalsDebug_FileName = "GlobalsDebug"

--Log Type ENUMS
eLOG_TYPE_INFO = 0
eLOG_LOG_TYPE_WARNING = 1
eLOG_LOG_TYPE_ERROR = 2
eLOG_LOG_TYPE_CRITICAL = 3

--Verbosity ENUMS
eLOG_FULL = 0
eLOG_VERBOSE = 1
eLOG_SIMPLE = 2
eLOG_MOD_ONLY = 3
eLOG_NONE = 4

local LogTypes = {}
LogTypes[0] = "i" --Basic Log
LogTypes[1] = "?" --Concern / Warning
LogTypes[2] = "!!" --Basic Error
LogTypes[3] = "!!!!" --Severe Error
local LogTypesLength = TableLength(LogTypes)

local WrittenLogs = {}

local StacktracePath = "@"
local StacktraceStack = {}

local function GetLogType(_LogType)

	if(_LogType > LogTypesLength) then

		Log(eLOG_SIMPLE, eLOG_LOG_TYPE_WARNING, debug_GlobalsDebug_FileName, "GetLogType", "Log type of '".._LogType.."' is invalid! Number must be bellow "..LogTypesLength)
		return "nil"

	end

	return LogTypes[0]

end

function AddStacktrace(_FunctionName)

	table.insert(StacktraceStack, _FunctionName)

end

function RemoveStacktrace()

	table.remove(StacktraceStack, table.getn(StacktraceStack))

end

function ClearStacktrace()

	StacktracePath = "@"
	StacktraceStack = {}

end

local function SetStacktracePath()

	StacktracePath = "@"
	for i = 1, table.getn(StacktraceStack) do

		StacktracePath = StacktracePath.."/"..StacktraceStack[i]

	end
	--StacktracePath[1] = ""
end

--Writes a custom log to the console
function Log(_LogType, _Verbosity, _ModuleName, _FunctionName, _Line)
	SetStacktracePath()
	print("("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ("..g_WorldTime.."s) "..StacktracePath..":  ".._Line)

--[[
	if(g_DebugMode) then

		if(_Verbosity == 0) then
			
			--Warning type, Mod Name, world time, function path, line
			print("("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ("..g_WorldTime.."s) ".._ModuleName.."/".._FunctionName..":  ".._Line)
			
		elseif(_Verbosity == 1) then
		
			--Warning type, Mod Name, world time, line
			print("("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ("..g_WorldTime.."s) ".._Line)
			
		elseif(_Verbosity == 2) then
		
			--Warning type, Mod Name, line
			print("("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ".._Line)
			
		elseif(_Verbosity == 3) then	
		
			--Just mod name and line
			print("["..g_ModAbbreviation.."] ".._Line)
			
		elseif(_Verbosity == 4) then
			
			--What dummy makes a print statement called from a function... me -q-q
			print(_Line)

		else
			--Just print the line, also in case they put an invalid number
			Log(2,0,_ModuleName, _FunctionName, "Verbosity: '".._Verbosity.."' Is not valid! Defaulting to Print.") 
			print(_Line)
			
		end

	end
]]
end


--Writes a custom log to the console, if it hasn't been written before
function LogOnce(_LogType, _Verbosity, _ModuleName, _FunctionName, _Line)

	local LogID = _Verbosity.._ModuleName.._FunctionName.._Line
	contains, _ = TableContains(WrittenLogs, LogID)

	if(contains) then 

		return true 

	else

		table.insert(WrittenLogs, LogID)
		Log(_LogType, _Verbosity, _ModuleName, _FunctionName, _Line)

	end
	
end

function LogError(_ModuleName, _FunctionName, _Line)
	
	g_DebugMode = true --Error is so severe we should force debug on!
	UIWarning_Show( "--------------------------------------------\n------TFE CORE FATAL ERROR------\n-----------CORE STOPPED------------\n--------------------------------------------" )
	Log(eLOG_LOG_TYPE_CRITICAL, eLOG_FULL, _ModuleName, _FunctionName, _Line)
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "", "", "|")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "", "", "--------------------------------------------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "", "", "------TFE CORE FATAL ERROR------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "", "", "-----------CORE STOPPED------------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "", "", "--------------------------------------------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "", "", "|")
	ErrorPause()

end

--This function will do something illegal that should warrant game to crash
--Good to use this to check for thoroughness of error checking
function DoFatalError()

	print(""..{}.."")

end