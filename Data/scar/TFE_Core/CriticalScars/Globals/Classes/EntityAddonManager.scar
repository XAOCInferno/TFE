EntityAddonManager = {}
function EntityAddonManager:new (_AttachedEntity, _ValidAddons)

	AddStacktrace("EntityAddonManager:new")

    local EntityAddonManagerObject = 
    {
        --Constants
	    AttachedEntity = _AttachedEntity,
        ValidAddons = _ValidAddons,
        NumberOfAddons = table.getn(_ValidAddons),

        --Variables
        CompletedAddons = {}
    }

	self.__index = self
    
	RemoveStacktrace()

    return setmetatable(EntityAddonManagerObject, self)

end

function EntityAddonManager:LateConstructor()

	AddStacktrace("EntityAddonManager:LateConstructor")

    for i = 1, self.NumberOfAddons do

        self.CompletedAddons[i] = PurchasedItem:new(self.ValidAddons[i],0)

    end

    RemoveStacktrace()

end

function EntityAddonManager:UpdateAddonsList()

	AddStacktrace("EntityAddonManager:UpdateAddonsList")

    for i = 1, self.NumberOfAddons do
        
        if(Entity_ContainsAddOn(self.AttachedEntity, self.CompletedAddons[i].ID)) then

            print("YES HAS ADDON")
            self.CompletedAddons[i].Count = 1

        else

            self.CompletedAddons[i].Count = 0
            
        end

    end

    RemoveStacktrace()

end

function EntityAddonManager:GetAddonCount(_AddonID)

	AddStacktrace("EntityAddonManager:GetAddonCount")

    local count = 0
    print("starting")
    if(self.CompletedAddons[_AddonID]) then
        
        count = self.CompletedAddons[_AddonID].Count
        print("COUNTING "..count)

    end

    RemoveStacktrace()

    return count

end

--[[This can likely be a shared function later]]
function EntityAddonManager:Deconstruct()

    setmetatable(self, nil)

end