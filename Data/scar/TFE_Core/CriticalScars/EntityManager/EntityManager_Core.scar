import("TFE_Core/CriticalScars/EntityManager/Imports/EntityManager_Imports.scar")

---------------
--Main Script--
---------------
function Setup_EntityManager()
	
	AddStacktrace("Setup_EntityManager")

	Set_AllEntities_Immediate()

	RemoveStacktrace()

end

function Set_AllEntities_Immediate()
	
	AddStacktrace("Set_AllEntities_Immediate")

	for i = 1, g_PlayerCount do
		
		Set_PlayerEntities_Immediate(i)
		
	end

	RemoveStacktrace()

end

function Set_PlayerEntities_Immediate(_PlayerIndex)	

	AddStacktrace("Set_PlayerEntities_Immediate")
	
	g_LastEntityUpdateTime = g_WorldTime
	
	local AddEGroupData = function(_egroupid, _itemindex, _entityID)
		
		AddStacktrace("AddEGroupData")

		local newEntityGameID = Entity_GetGameID( _entityID )
		local entityBP = Entity_GetBlueprintName( _entityID )			
		local addNewDataEntry = true

		--Should we keep this? are some entities ok to not have BP? Requires investigation.
		if(entityBP == nil or newEntityGameID == nil) then

			addNewDataEntry = false
			--any point having this log if it's LogOnce?
			LogOnce(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Can't add entity data, BP or GameID is nil!")

		else
			
			local shouldIgnore, _ = TableContains(g_EntityBlueprintToIgnore, entityBP)

			if(shouldIgnore == false) then 
		
				for l = 1, table.getn(g_AllEntityData[_PlayerIndex]) do

					if(g_AllEntityData[_PlayerIndex][l] == nil) then

						Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Entity is found null during adding.")
						table.remove(g_AllEntityData[_PlayerIndex], l)	
						addNewDataEntry = false

					end

					if(g_AllEntityData[_PlayerIndex][l] ~= nil) then

						if(g_AllEntityData[_PlayerIndex][l].EntityUniqueID == newEntityGameID) then
							
							--We already have a data entry for this unit, so break

							--LogOnce(eLOG_TYPE_WARNING, eLOG_FULL, "Entity is already stored in data!")
							addNewDataEntry = false
							break
													
						end
						
					end

				end	

			else

				addNewDataEntry = false

			end

		end
		
		if(addNewDataEntry) then

			local IsLP = false
			local IsGen = false
			local IsThermo = false

			--Move this table into an entity table so we can find from anywhere
			if(TableContains(g_EntityBlueprintLPs, entityBP)) then

				IsLP = true

			end
			
			--Move this table into an entity table so we can find from anywhere
			if(TableContains(g_EntityBlueprintGenerators, entityBP)) then

				IsGenerator = true

				if(TableContains(g_EntityBlueprintThermos, entityBP)) then

					IsThermo = true

				end

			end

			local tmpData = EntityData:new( newEntityGameID, _egroupid, _itemindex, _entityID, g_AllPlayers[_PlayerIndex].RaceDetails.RaceName, entityBP, g_AllPlayers[_PlayerIndex], IsLP, IsGenerator, IsThermo)
			
			Log(eLOG_TYPE_INFO, eLOG_VERBOSE, "Entity data created for entity: "..tmpData.EntityBlueprint)
			table.insert(g_AllEntityData[_PlayerIndex], tmpData)

		end

		RemoveStacktrace()
			
	end

	--We should only run the Entity checker if the player is alive
	if (Player_IsAlive(g_AllPlayers[_PlayerIndex].Player)) then		

		Update_ExistingEntityDetails()		
		EGroup_ForEachEx(Player_GetEntities(g_AllPlayers[_PlayerIndex].Player), AddEGroupData, true, false)				
		
		for k = 1, TableLength(g_AllEntityData[_PlayerIndex]) do

			if(g_AllEntityData[_PlayerIndex][k] ~= nil) then
				
				local shouldIgnore, _ = TableContains(g_EntityBlueprintToIgnore, g_AllEntityData[_PlayerIndex][k].EntityBlueprint)
				--Should there be a different check for entity instead of health?

				if(g_AllEntityData[_PlayerIndex][k].EntityBlueprint == nil or g_AllEntityData[_PlayerIndex][k].EntityHealthCurrent == 0 or shouldIgnore) then

					Log(eLOG_LOG_TYPE_WARNING, eLOG_FULL, "Entity is destroyed, removing.")
					table.remove(g_AllEntityData[_PlayerIndex], k)
					
				end

			end

		end
			
		g_PlayerEntityCount[_PlayerIndex] = TableLength(g_AllEntityData[_PlayerIndex])

	end

	RemoveStacktrace()

end

function Update_ExistingEntityDetails()
	
	AddStacktrace("Update_ExistingEntityDetails")

	for i = 1, g_PlayerCount do

		for l = 1, TableLength(g_AllEntityData[i]) do

			--Simple check to avoid null ref
			if(g_AllEntityData[i][l] == nil) then
				
				Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "Entity is nil, this should never happen.")

			else

				--Logic will run, but if there is an error (entity no longer exists) then we remove it
				if(g_AllEntityData[i][l]:Update() == false) then

					local EntityLosses = 1
					local StructureLosses =  bool_to_number(g_AllEntityData[i][l].EntityIsStructure)
					local LPLosses = bool_to_number(g_AllEntityData[i][l].EntityIsLP)
					local GenLosses = bool_to_number(g_AllEntityData[i][l].EntityIsGen)
					local ThermoLosses = bool_to_number(g_AllEntityData[i][l].EntityIsThermo)
	
					for z = 1, table.getn(g_AllEntityData[i][l].PreviouslyAttackedByPlayers) do
		
						--Again redo this so defender isn't given multiple bonuses...
						UpdateEntityCombatDeathResources(g_AllEntityData[i][l].PreviouslyAttackedByPlayers[z], g_AllEntityData[i][l].OwnerPlayer, EntityLosses, StructureLosses, LPLosses, GenLosses, ThermoLosses ) 
						UpdateEntityCombatDeathStats(g_AllEntityData[i][l].PreviouslyAttackedByPlayers[z], g_AllEntityData[i][l].OwnerPlayer, EntityLosses, StructureLosses, LPLosses, GenLosses, ThermoLosses ) 
		
					end	

					g_AllEntityData[i][l] = nil	

				end

			end

		end	

	end

	RemoveStacktrace()

end

function Get_EntityDataFromEntityBP(_EntityBP, _Player)

	AddStacktrace("Get_EntityDataFromEntityBP")

	local tbl_AllEntityOfBP = {}
	local tbl_IndexOfAcceptedPositions = {}
	for i = 1, TableLength(g_AllEntityData[_Player]) do

		if(g_AllEntityData[_Player][i] ~= nil) then

			if(g_AllEntityData[_Player][i].EntityBlueprint == _EntityBP) then
				
				table.insert(tbl_AllEntityOfBP, g_AllEntityData[_Player][i])
				table.insert(tbl_IndexOfAcceptedPositions, i)

			end
		
		end

	end

	RemoveStacktrace()

	return tbl_AllEntityOfBP, tbl_IndexOfAcceptedPositions

end

function DestroyEntityAndRemoveFromData(_Player, _EntityLocation)

	AddStacktrace("DestroyEntityAndRemoveFromData")

	--Offset by 1 as index of table starts at 1 not 0
	local PlayerIndex = _Player.PlayerIndex + 1

	if(g_AllEntityData[PlayerIndex][_EntityLocation] == nil) then

		Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "Entity is nil, cannot destroy and returning!")

	else

		--Entity found, ask game to destroy it then remove it from data
		Entity_Destroy(g_AllEntityData[PlayerIndex][_EntityLocation].EntityID)
		table.remove(g_AllEntityData[PlayerIndex][_EntityLocation])
		
	end

	RemoveStacktrace()

end

function Entity_Exists(_EntityID)

	AddStacktrace("Entity_Exists")
	
	local EntityExists = false

	if Entity_GetGameID(_EntityID) ~= 0 then

		EntityExists = true
		
	end
	
	RemoveStacktrace()

	return EntityExists

end

function UpdateEntityCombatDeathResources(_RedReceiverPlayer, _DefenderPlayer, _EntityLosses, _StructureLosses, _LPLosses, _GenLosses, _ThermoLosses ) 

	AddStacktrace("UpdateEntityCombatDeathResources")

	local TotalRed = 0

	--Add up all of the red that needs to be given to players
	--Later on move all these numbers as globals, their values shouldn't be defined here in code
	TotalRed = TotalRed + (4 * _EntityLosses)
	TotalRed = TotalRed + (15 * _StructureLosses)
	TotalRed = TotalRed + (5 * _LPLosses)
	TotalRed = TotalRed + (5 * _GenLosses)
	TotalRed = TotalRed + (15 * _ThermoLosses)

	--Multiply by global modifier
	TotalRed = TotalRed * g_RedGainMultiplier

	--Assign red resource, defender gets half as a mercy gesture
	_RedReceiverPlayer.CurrentResources.RT_Red = _RedReceiverPlayer.CurrentResources.RT_Red + TotalRed	
	_DefenderPlayer.CurrentResources.RT_Red = _DefenderPlayer.CurrentResources.RT_Red + (TotalRed * 0.5)	

	--Debug	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player ".._RedReceiverPlayer.PlayerIndex.." current Red = ".._RedReceiverPlayer.CurrentResources.RT_Red)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player ".._DefenderPlayer.PlayerIndex.." current Red = ".._DefenderPlayer.CurrentResources.RT_Red)

	RemoveStacktrace()

end

function UpdateEntityCombatDeathStats(_AttackerPlayer, _DefenderPlayer, _EntityLosses, _StructureLosses, _LPLosses, _GenLosses, _ThermoLosses ) 

	AddStacktrace("UpdateEntityCombatDeathStats")

	--Something has died, send messages to the relevant players
	_AttackerPlayer.StatsManager:AddEntityKills( _EntityLosses, _StructureLosses, _LPLosses, _GenLosses, _ThermoLosses )
	_DefenderPlayer.StatsManager:AddEntityLosses( _EntityLosses, _StructureLosses, _LPLosses, _GenLosses, _ThermoLosses )

	RemoveStacktrace()

end

function GetClosestLP(_Player, _Pos)

	AddStacktrace("GetClosestSquadInSquadTableToPos")	

	local LP = nil
	local closestDist = 1000000

	for i = 1, TableLength(g_AllEntityData[_Player]) do

		if(g_AllEntityData[_Player][i].EntityIsLP == true) then

			local DistanceToPoint = World_DistancePointToPoint(_Pos, g_AllEntityData[_Player][i].EntityPosition)

			if(DistanceToPoint < closestDist) then

				LP = g_AllEntityData[_Player][i]
				closestDist = DistanceToPoint

			end

		end

	end

	RemoveStacktrace()

	return LP

end
	
