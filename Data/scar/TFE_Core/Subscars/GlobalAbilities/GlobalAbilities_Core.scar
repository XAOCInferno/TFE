debug_GlobalAbilitiesCore_FileName = "GlobalAbilities_Core"

import("TFE_Core/Subscars/GlobalAbilities/Imports/GlobalAbilities_Imports.scar")

g_btn = ""

g_AllTrackedAbilityBuilders = {}
g_AllTrackedAbilityBuildersCount = 0
g_IsDoingAbility = false --This NEEDS to be changed later as part of an ability class

GlobalAbilityBuilder = {}
function GlobalAbilityBuilder:new (_OwnedByPlayer, _SGroupID, _SGroupName, _TargetEGroupName, _PosInTrackedAbilityBuilders)

    local GlobalAbilityBuilderObject = 
    {
    	--Constants
		OwnedByPlayer = _OwnedByPlayer,
		SGroupName = _SGroupName,
	    SGroupID = _SGroupID,
		TargetEGroupName = _TargetEGroupName,
		PosInTrackedAbilityBuilders = PosInTrackedAbilityBuilders
    }
	self.__index = self
   	return setmetatable(GlobalAbilityBuilderObject, self)
end

function GlobalAbilityBuilder:Update()

	
	if(Cmd_IsConstructingBuilding(self.SGroupName, true)) then

		--We have started building it, don't need to issue order
		SGroup_DestroyAllSquads(self.SGroupName)
		SGroup_Destroy(self.SGroupID)

		g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount - 1
		table.remove(g_AllTrackedAbilityBuilders, PosInTrackedAbilityBuilders)

	else
		
		-- issue order
		Command_SquadEntity( 
			self.OwnedByPlayer,
			self.SGroupID,
			SCMD_BuildStructure,
			self.TargetEGroupName
		)	

	end
end

function Setup_GlobalAbilities()
	local debugFuncName = "Setup_GlobalAbilities"
	
	Log(0, 0, debug_ResMatureCore_FileName, debugFuncName, "Starting: '"..debugFuncName.."'...")

	EventCue_DoEvent( 'warning', 'music/stinger_completeobjective', 'Global Abilities Activated!', 'Global Abilities Activated!.' )
	Dev_CreateTestGlobalAbilityButton()

	
	Log(0, 0, debug_ResMatureCore_FileName, debugFuncName, "Finished: '"..debugFuncName.."'!")

end

function Update_GlobalAbilities()
	local debugFuncName = "Update_GlobalAbilities"

	if(Button_Exists(g_btn))then 

		if(g_IsDoingAbility == false) then
			if(Button_GetPressed(g_btn)) then
				
				print("Button Is Pressed!")
				g_IsDoingAbility = true
				Dev_DoTestAbility()
				
			end
		end
	end

	Update_AllAbilityBuilders()
end


function Dev_CreateTestGlobalAbilityButton()

	local TextureTable = {"guard_icons/guard_infantry_tunnel", "guard_icons/guard_infantry_tunnel", "guard_icons/guard_infantry_tunnel"}
    --"command_icons/stance_burn" = enabled icon, "command_icons/stance_hold" = disabled icon, "command_icons/stance_cease" = mouseover icon
    local TipTable = { "Test Title", "Test Description"}
	local Instructions = "um test instructions..."
    --"$830050" = title, "$830051" = description
	print("creating button!!")
	g_btn = Util_GlobalAbilityButton_Create("btn_GlobalAbility01", TextureTable, TipTable, Instructions, true, true)
	g_btn = Util_GlobalAbilityButton_Create("btn_GlobalAbility02", TextureTable, TipTable, Instructions, true, true)
	g_btn = Util_GlobalAbilityButton_Create("btn_GlobalAbility03", TextureTable, TipTable, Instructions, true, true)
	g_btn = Util_GlobalAbilityButton_Create("btn_GlobalAbility04", TextureTable, TipTable, Instructions, true, true)
	g_btn = Util_GlobalAbilityButton_Create("btn_GlobalAbility05", TextureTable, TipTable, Instructions, true, true)

end

function Dev_DoTestAbility()


	local pos = Button_GetPressedPosition(g_btn)

	if( pos ~= nil) then

		Implement_TestAbility(pos, g_AllPlayers[1])

	end
	
	g_IsDoingAbility = false

end

function Implement_TestAbility(pos, _PlayerStruct)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)

	Entity_CreateBuildingPosition(_PlayerStruct.Player, UniqueBuildingEGroupName, "guard_infantry_summon", pos, 0)

	--If group size is 0 we have not created the above entity. Likely due to it being placed in a bad position. Must show error and stop function
	if(EGroup_Count(UniqueBuildingEGroup) == 0) then

		UIWarning_Show( "FAILED TO CAST SUMMON ABILITY.\nCannot place structure at that position." )
		return

	end

	Util_CreateSquadsAtPosition(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", pos, 1)
	--Util_ResetAndRebuild(UniqueBuildingEGroupName, UniqueBuilderSGroupName)

	table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

end

function Update_AllAbilityBuilders()

	for i = 1, g_AllTrackedAbilityBuildersCount do

		g_AllTrackedAbilityBuilders[i]:Update()

	end
end


function Util_GlobalAbilityButton_Create(widgetName, textureTable, tipTable, instructions, visible, enabled)

	local buttonID = Button_Add(widgetName, visible, enabled, true)
	Button_SetVisible(buttonID, visible)
	Button_SetTextures(buttonID, textureTable[1], textureTable[2], textureTable[3])
	Button_SetTooltip(buttonID, tipTable[1], tipTable[2])
	Button_SetModalInstruction(buttonID, instructions)

	return buttonID

end