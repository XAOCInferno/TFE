debug_GlobalAbilitiesCore_FileName = "GlobalAbilities_Core"

import("TFE_Core/Subscars/GlobalAbilities/Imports/GlobalAbilities_Imports.scar")

g_btn = ""

g_AllTrackedAbilityBuilders = {}
g_AllTrackedAbilityBuildersCount = 0
g_IsDoingAbility = false --This NEEDS to be changed later as part of an ability class

g_AllTrackedAbilities = {}
g_LastActivatedPlayer = nil



GlobalAbility = {}
function GlobalAbility:new ( _CasterPlayer, _AbilityName, _ActivationEntityBlueprint, _TargetFilter, _PosInTrackedAbilities )

    local GlobalAbilityObject = 
    {
    	--Constants
		CasterPlayer = _CasterPlayer,
		AbilityName = _AbilityName,
		ActivationEntityBlueprint = _ActivationEntityBlueprint,
		TargetFilter = _TargetFilter,
		PosInTrackedAbilities = _PosInTrackedAbilities,

		--Varaiables
		CurrentAcceptedEntityStruct,
		LastCastedEntityPosition
    }
	self.__index = self
   	return setmetatable(GlobalAbilityObject, self)
end

--Possibly override... But must include the "GetPressed"
function GlobalAbility:Update()

	local acceptedEntities, acceptedEPositions = Get_EntityDataFromEntityBP(self.ActivationEntityBlueprint, self.CasterPlayer.PlayerIndex + 1)
	for i = 1, table.getn(acceptedEntities) do

		--Possibly destroy later? atm i think it's ok to destroy now 
		self.CurrentAcceptedEntityStruct = acceptedEntities[i]
		self:PrepareAbility()
		DestroyEntityAndRemoveFromData(self.CasterPlayer, acceptedEPositions[i])

	end
	
end

--This is ran immediatly on pressing a button, it is not necessary but could be good if you want to add an effect such as a mouse cursor
--By default this does nothing and doesn't log, this should be the case!
--Override if you want functionality
--Possibly add some default logic to do with cursor effects here
function GlobalAbility:OnPressImmediate()

end

--You should probably not override this, although I guess you could..? 
function GlobalAbility:PrepareAbility()

	local debugFuncName = self.AbilityName.."/PrepareAbility"

	self.OnPressImmediate()

	self.LastCastedEntityPosition = self.CurrentAcceptedEntityStruct.EntityPosition
	local targetSquad = nil
	local targetEntity = nil
	--[[
	if(self.TargetFilter == "GROUND" or self.TargetFilter == 0) then

		targetPos = Button_GetPressedPosition(self.ButtonID)

	elseif(self.TargetFilter == "SQUAD" or self.TargetFilter == 1) then

		targetSquad = GetUniqueSG("TemporarySGroupAbilityTarget")
		Button_GetPressedSquad(self.ButtonID, targetSquad) --Add functionality when necessary

	elseif(self.TargetFilter == "ENTITY" or self.TargetFilter == 1) then

		targetEntity = GetUniqueEG("TemporaryEGroupAbilityTarget")
		Button_GetPressedEntity(self.ButtonID, targetEntity) --Add functionality when necessary

	else

		Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Target filter '"..self.TargetFilter.."' is invalid. Defaulting to 'GROUND'")
		targetPos = Button_GetPressedPosition(self.ButtonID)

	end]]

	self:DoAbility(self, self.LastCastedEntityPosition, targetSquad, targetEntity)
end

--Do override!
function GlobalAbility:DoAbility( _self, _pos, _targetSquad, _targetEntity )

	Log(1, 0, debug_GlobalAbilitiesCore_FileName, self.AbilityName.."/DoAbility", "Ability behaviour undefined! Ensure you override the 'DoAbility' function or this ability will do nothing.")

end


GlobalAbilityBuilder = {}
function GlobalAbilityBuilder:new (_OwnedByPlayer, _SGroupID, _SGroupName, _TargetEGroupName, _PosInTrackedAbilityBuilders)

    local GlobalAbilityBuilderObject = 
    {
    	--Constants
		OwnedByPlayer = _OwnedByPlayer,
		SGroupName = _SGroupName,
	    SGroupID = _SGroupID,
		TargetEGroupName = _TargetEGroupName,
		PosInTrackedAbilityBuilders = PosInTrackedAbilityBuilders
    }
	self.__index = self
   	return setmetatable(GlobalAbilityBuilderObject, self)
end

function GlobalAbilityBuilder:Update()
	
	if(Cmd_IsConstructingBuilding(self.SGroupName, true)) then

		--We have started building it, don't need to issue order
		SGroup_DestroyAllSquads(self.SGroupName)
		SGroup_Destroy(self.SGroupID)

		g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount - 1
		table.remove(g_AllTrackedAbilityBuilders, PosInTrackedAbilityBuilders)

	else
		
		-- issue order
		Command_SquadEntity( 
			self.OwnedByPlayer,
			self.SGroupID,
			SCMD_BuildStructure,
			self.TargetEGroupName
		)	

	end
end

function Setup_GlobalAbilities()

	local debugFuncName = "Setup_GlobalAbilities"
	
	Log(0, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Starting: '"..debugFuncName.."'...")

	Setup_ActualGlobalAbilies()
	EventCue_DoEvent( 'warning', 'music/stinger_completeobjective', 'Global Abilities Activated!', 'Global Abilities Activated!.' )

	
	Log(0, 0, debug_ResMatureCore_FileName, debugFuncName, "Finished: '"..debugFuncName.."'!")

end

function GetLocalPlayerStruct()

	local debugFuncName = "GetLocalPlayerStruct"

	local localPlayerIndex = Tut_GetLocalPlayerIndex()

	for i = 1, g_PlayerCount do
		if(g_AllPlayers[i].PlayerIndex == localPlayerIndex) then
			return g_AllPlayers[i]
		end
	end

	Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Local player does not exist!")

end

function Setup_ActualGlobalAbilies()

	local debugFuncName = "Setup_AbilityButtons"

	Dev_SetupAutoConstructor()

	for i = 1, g_PlayerCount do


	end
	
	local RaceName = ""
	for i = 1, g_PlayerCount do
		RaceName = g_AllPlayers[i].RaceDetails.RaceName
		local GlobalAbilityCasterSBP = "world_squad_global_ability_caster_"..RaceName

		if(SBP_Exists(GlobalAbilityCasterSBP)) then
			Util_CreateSquadsAtPosition(g_AllPlayers[i].Player, SGroup_GetName(GetUniqueSG("GlobalAbilityCaster")), GlobalAbilityCasterSBP, World_Pos(0,0,0), 1)
		else
			Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Global Ability Caster SBP for race '"..RaceName.."' doesn't exist, make sure there is an entity called '"..GlobalAbilityCasterSBP.."' otherwise commander UI will be odd!")
		end

		--[[CHAOS GLOBALS]]
		if(RaceName == "chaos_marine_race") then
			--T0 Secret Identity 
			--T0 Target a squad and it gets infiltrated, possibly get some small extra benefits 
			--Sigyl of the Rift to send it to the HQ? Or to transport between 2 locations? Perhaps ability for the Sorcerer?
			--T1 Return to HQ
			--T2 Target squad and for a duration if it comes near to bloodsplat, destroy it, spawn a rot fly that has number = to the number of bloodsplats in the area. bloodsplats near the rot fly will add another member to the squad or spawn another squad?..
			--T2 Dark flames
			--T3 Nuke 8 pointed star that damages out from the centre with KB. while active lighting randomly spawns in the circle, rocks spawn at the ends that are owned by the world or player?

		--[[DARK ELDAR GLOBALS]]
		elseif(RaceName == "dark_eldar_race") then
			
			local AbilityStruct_DarkEldar1 = CreateGlobalAbility(
				g_AllPlayers[i], 
				"GlobalAbility_DarkEldar_SeedSouls", 
				"global_dark_eldar_seed_souls_entity",
				table.getn(g_AllTrackedAbilities),
				"GROUND"
			)

			AbilityStruct_DarkEldar1.DoAbility = function( _self, _pos, _targetSquad, _targetEntity )

				_pos = _self.LastCastedEntityPosition

				local costSuccess = FireCost(_self.CasterPlayer, 0, -100, 0, 0, 0, 0)

				if(costSuccess) then
					World_FXEvent("data:Art/Events/Races/dark_eldar/Ability/dark_eldar_global_seed_soul", _pos)
					ActivateMultiSummonSquadAbility("dark_eldar_squad_slave_murdered_long", _self.CasterPlayer.Player, _pos, {x = 1, y = 0, z = 1}, 5, 0)
				else
					Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Failed to cast global ability '".._self.AbilityName.."' due to lack of resources.")
				end
			end
			
			--[[T1 Target captured point without an lp, steal 100req and decap it. vs necron you steal 50 power]]
			--[[T2 Foul Experiment Target an area, all souls in that area get destroyed and summon a zombie. zombie is tanky but looses HP over time, uncontrollable. if no souls are there, summon 3 zombies. zombie has no ui]]
			--[[T2 Every vehicle currently alive and hellions gets a forcefield]]
			--[[T3 Recharge all soul abilities instantly, gain 150 souls]]

		--[[ELDAR GLOBALS]]
		elseif(RaceName == "eldar_race") then

			--Global 1		--WE NEED TO MAKE THIS MAKE A SOUND FOR ALL PLAYERS TO HEAR
			local AbilityStruct_Eldar1 = CreateGlobalAbility(
				g_AllPlayers[i], 
				"GlobalAbility_Eldar_SummonWebwayGate", 
				"global_eldar_summon_webway_gate_entity",
				table.getn(g_AllTrackedAbilities),
				"GROUND"
			)

			AbilityStruct_Eldar1.DoAbility = function( _self, _pos, _targetSquad, _targetEntity )

				_pos = _self.LastCastedEntityPosition

				local costSucess = FireCost(_self.CasterPlayer, 0, -100, 0, 0, 0, 0)
				if(costSuccess) then
					ActivateAutoConstructionAbility(_pos, _self.CasterPlayer, "eldar_webway_gate")
				else
					Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Failed to cast global ability '".._self.AbilityName.."' due to lack of resources.")
				end
			end
		
			--[[T1 Swift movement, all troops including allies get 20% speed bonus]]
			--[[T2 Summon squad of wraithguard near a webway gate]]
			--[[T2 Target area, all enemy squads get full silenced (remove all buffs from code and reset their modifiers) and silence them for 60s]]
			--[[T3
				Unique inspire for all units that provide special buffs depending on which it is
					Ranger reload time 
					Farseer & warlock ability cooldown
					Guardian damage resistance
					Dark reaper setup time to 0 
					Fire dragons small range increase and dmg increase
					Warp spiders really fast teleport cooldown
					Seer council reinforce time decrease
					Fire Prism reload time
					Wraithlord bunch of healing
					Falcon teleport time
					Nightwing & platforms & vypers speed up
					Turrets reload time
					Avatar slight damage resist?
				]]

		--[[NECRON GLOBALS]]
		elseif(RaceName == "necron_race") then	
			--[[T0 Production Overload]]
			--[[T1 Summon crystal]] 
			--[[T2 Big gen ability to buff all necron]]
			--[[T2 Summon a bunch of basic scarabs at target location]]
			--[[T3 All troops have 100% revive chance including wraith and tomb spyder]]

		--[[ORK GLOBALS]]
		elseif(RaceName == "ork_race") then	
			--[[T0 All troops get 20% cost reduction for 30s]]
			--[[T1 Use ur choppa / use ur dakka]]
			--[[T2 Summon 3 squad of feral boys at target location for free tie up]]
			--[[T2 Cult of speed, increase speed of all vehicles by 30% also affects allies, decrease reload time by 30%]]
			--[[T3 Summon boss banner, every 1s reinforce an entity or leader to squad nearby, when banner is destroyed all orks turn on eachother. when destroyed play the campaign voice lines for it]] 
	
		--[[SISTERS GLOBALS]]
		elseif(RaceName == "sisters_race") then	
			--[[T0 summon a shrine that provides faith over time. troops near it also get morale resistance and a speed boost of 20%. shrine has HP and can be destroyed, use a small living saint shrine model for this]]
			--[[T1 Blessed Armour - Target squad gets damage and morale resistance of 50% and restore their morale, lasts 40s]]
			--[[T2 Target location and deploy 5 or 6 fire mines in the area]]
			--[[T2 All flame based troops get a damage buff globally (cellestian, inferno pistol, penitent, immolator)]]
			--[[T3
				200 Req, 80 Power
				Loyal Servant of the Imperium: Summon random loyalist troop, special version that is already fully upgraded to appropriate level, choose from pool of good units
				Pool:
					Grey Knights
					Purifier
					Purgation
					Ogryn
					Veteran of Typhon
					Veterans of Aurelia
			 ]]

		--[[SPACE MARINE GLOBALS]]
		elseif(RaceName == "space_marine_race") then

			local AbilityStruct_SpaceMarine1 = CreateGlobalAbility(
				g_AllPlayers[i], 
				"GlobalAbility_SpaceMarine_BasicScan", 
				"global_space_marine_basic_scan_entity",
				table.getn(g_AllTrackedAbilities),
				"GROUND"
			)

			AbilityStruct_SpaceMarine1.DoAbility = function( _self, _pos, _targetSquad, _targetEntity )

				_pos = _self.LastCastedEntityPosition
				local fxYOffset = 5 
				local fxSpawnPos = _pos
				local costSuccess = FireCost(_self.CasterPlayer, 0, 0, 0, 0, 0, 0)
				if(costSuccess) then
					fxSpawnPos.y = _pos.y + fxYOffset
					World_FXEvent("data:Art/Events/Races/Space_Marines/Abilities/space_marine_global_basic_scan", fxSpawnPos)
					ActivateSummonEntityAbility("marines_detection_field_hq", _self.CasterPlayer.Player, _pos)
				else
					Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Failed to cast global ability '".._self.AbilityName.."' due to lack of resources.")
				end
			end

			--T1 For the emperor, damage buff and kb resistance
			--T2 Single drop pod that does high KB to enemy and provides cover around it and decreases reinforce time, can be destroyed if focused. possibly make it able to produce tacs and maybe give it addons like tunnel
			--T2 Blessing of omnissiah to heal all vehicles
			--T3 EMP, in area stun all buildings and vehicles, prevent ranged shooting for 20s, prevent all tp, mechanical based infantry slowed down like nw, wg etc. AoE expanding 

		--[[SPACE MARINE VETERANS GLOBALS]]
		elseif(RaceName == "space_marine_veteran_race") then	
			--[[T2 Reveal all enemy line of sight for a time?]]

		--[[TAU GLOBALS]]
		elseif(RaceName == "tau_race") then
			--[[Reveal all gens line of sight and possibly lp line of sight too. would be good to have it so the gen under construction also ]]

		--[[GUARD GLOBALS]]
		elseif(RaceName == "guard_race") then
			
			--Global 1   --WE NEED TO MAKE THIS MAKE A SOUND FOR ALL PLAYERS TO HEAR
			local AbilityStruct_Guard1 = CreateGlobalAbility(
				g_AllPlayers[i], 
				"GlobalAbility_Guard_SummonBunker", 
				"global_guard_summon_bunker_entity",
				table.getn(g_AllTrackedAbilities),
				"GROUND"
			)

			AbilityStruct_Guard1.DoAbility = function( _self, _pos, _targetSquad, _targetEntity )

				_pos = _self.LastCastedEntityPosition				
				local costSuccess = FireCost(_self.CasterPlayer, 0, -100, 0, 0, 0, 0)

				if(costSuccess) then
					ActivateAutoConstructionAbility(_pos, _self.CasterPlayer, "guard_infantry_summon")
				else
					Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Failed to cast global ability '".._self.AbilityName.."' due to lack of resources.")
				end
			end

			--[[T1 flare that lowers sight range of enemies]]
			--[[T2 off-map artillery, select location and then 3 mouse locations will be selected to target the strike]]
			--[[T2 deploy a valkyrie and reinforce all squads to full]]
			--[[T3 PDF Reinforcements, valkyrie drop 1 goty leman russ with less hp than a regular leman, 2 PDF guardsmen squads fully reinforced with random weaponry, and colonel brom]]

		--[[ORDO MALLEUS GLOBALS]]
		elseif(RaceName == "inquisition_daemonhunt_race") then
			--T0 Restore abilities on target squad
			--T2 Buff all flame weaponry

		else
			Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Race '"..RaceName.."' is undefined in if statement! Assuming it has no global abilities.")
		end
	end
end

--Do this later, requires fire cost to be built into ability as well as being a function
--[[function CheckGlobalAbilityRequirements()

	for player = 1, g_PlayerCount do
		if(g_AllPlayers[player].PlayerIndex = Tut_GetLocalPlayerIndex()) then

			for i = 1, table.getn(g_AllTrackedAbilities) do

				if(g_AllPlayers[player].CurrentResources.RT_Requisition < g_AllTrackedAbilities.FireCost)

			end

		end
	end


end]]
function ActivateMultiSummonEntityAbility(_EBP, _Player, _Pos, _RandomOffsetPerEntity, _NumberOfEntities) 

	local AllCreatedEntities = {}
	_Pos = World_Pos(_Pos.x, _Pos.y, _Pos.z)
	for i = 1, _NumberOfEntities do
		local tmpPos = _Pos
		tmpPos.x = _Pos.x + World_GetRand(-_RandomOffsetPerEntity.x, _RandomOffsetPerEntity.x)
		tmpPos.y = _Pos.y + World_GetRand(-_RandomOffsetPerEntity.y, _RandomOffsetPerEntity.y)
		tmpPos.z = _Pos.z + World_GetRand(-_RandomOffsetPerEntity.z, _RandomOffsetPerEntity.z)
		table.insert(AllCreatedEntities, ActivateSummonSquadAbility(_EBP, _Player, tmpPos, _Loadout))
	end

	return AllCreatedEntities

end

function ActivateSummonEntityAbility(_EBP, _Player, _Pos)
	
	_Pos = World_Pos(_Pos.x, _Pos.y, _Pos.z)
	local entity = Entity_Create(_EBP, _Player, _Pos)
	Entity_Spawn(entity)

	return entity
end

function ActivateMultiSummonSquadAbility(_SBP, _Player, _Pos, _RandomOffsetPerSquad, _NumberOfSquads, _Loadout) 

	local AllCreatedSquads = {}
	_Pos = World_Pos(_Pos.x, _Pos.y, _Pos.z)
	for i = 1, _NumberOfSquads do
		local tmpPos = _Pos
		tmpPos.x = _Pos.x + World_GetRand(-_RandomOffsetPerSquad.x, _RandomOffsetPerSquad.x)
		tmpPos.y = _Pos.y + World_GetRand(-_RandomOffsetPerSquad.y, _RandomOffsetPerSquad.y)
		tmpPos.z = _Pos.z + World_GetRand(-_RandomOffsetPerSquad.z, _RandomOffsetPerSquad.z)
		table.insert(AllCreatedSquads, ActivateSummonSquadAbility(_SBP, _Player, tmpPos, _Loadout))
	end

	return AllCreatedSquads

end

function ActivateSummonSquadAbility(_SBP, _Player, _Pos, _Loadout)
	
	_Pos = World_Pos(_Pos.x, _Pos.y, _Pos.z)
	local squad = Squad_Create(_SBP, _Player, _Pos, _Loadout)
	Squad_Spawn(squad, _Pos)

	return squad
end

function Update_GlobalAbilities()

	local debugFuncName = "Update_GlobalAbilities"

	for i = 1, table.getn(g_AllTrackedAbilities) do

		g_AllTrackedAbilities[i]:Update()

	end

	Update_AllAbilityBuilders()

end


function CreateGlobalAbility(_Player, _AbilityName, _ActivationEntityBP, _TargetFilter)

	local debugFuncName = "CreateGlobalAbility"
	
	local AbilityStruct = GlobalAbility:new(_Player, _AbilityName, _ActivationEntityBP, _TargetFilter, table.getn(g_AllTrackedAbilities))

	table.insert(g_AllTrackedAbilities, AbilityStruct)

	return AbilityStruct

end

function UpdateAbilityIconGraphics(_BtnID, _TextureTable, _TipTable, _Instructions)

	local debugFuncName = "UpdateAbilityIconGraphics"

	if(_BtnID == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button is nil! Cannot update graphics.")
		return 

	elseif(Button_Exists(_BtnID) == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button does not exist! Cannot update graphics.")
		return

	end
	Button_SetTextures(_BtnID, _TextureTable[1], _TextureTable[2], _TextureTable[3])
	Button_SetTooltip(_BtnID, _TipTable[1], _TipTable[2])
	Button_SetModalInstruction(_BtnID, _Instructions)

	return buttonID

end

--Other costs can be added when needed, but likely via a different function as this will just interact direct with resource gen system
function FireCost(_Player, _RT_Red, _RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls) 

	if(_Player:HasEnoughResources(_RT_Red, _RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls)) then

		_Player:AddFireCost(_RT_Red, _RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls)
		return true

	end

	return false
end

devGlobalBuildertest = nil
devGloblabuildertestStruct = nil
UniqueBuilderSGroup = nil
function Dev_SetupAutoConstructor(_PlayerStruct)
	_PlayerStruct = g_AllPlayers[1]
	UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)
	UniqueBuilderSGroup = Util_CreateSquadsAtPosition(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", World_Pos(0,0,0), 1)
	devGloblabuildertestStruct = GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, "" )

end

function Dev_MoveSquadToPosition(player, pos)

	Command_SquadPos( 
		player.Player,
		UniqueBuilderSGroup,
		SCMD_Move,
		pos
	)	

end

function ActivateAutoConstructionAbility(_pos, _PlayerStruct, _structureEbps)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)

	_pos = World_Pos(_pos.x,_pos.y,_pos.z)

	Entity_CreateBuildingPosition(_PlayerStruct.Player, UniqueBuildingEGroupName, _structureEbps, _pos, 0)

	--If group size is 0 we have not created the above entity. Likely due to it being placed in a bad position. Must show error and stop function
	if(EGroup_Count(UniqueBuildingEGroup) == 0) then

		UIWarning_Show( "FAILED TO CAST SUMMON ABILITY.\nCannot place structure at that position." )
		return

	end

	Util_CreateSquadsAtPosition(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _pos, 1)

	table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

end

function Update_AllAbilityBuilders()

	for i = 1, g_AllTrackedAbilityBuildersCount do

		g_AllTrackedAbilityBuilders[i]:Update()

	end
end


function Util_GlobalAbilityButton_Create(_widgetName, _textureTable, _tipTable, _instructions, _visible, _enabled, _modal)

	local debugFuncName = "Util_GlobalAbilityButton_Create"

	local buttonID = Button_Add(_widgetName, _visible, _enabled, _modal)

	if(buttonID == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button is nil after creation! pcall has been tripped, likely invalid arguments.")
		return 

	elseif(Button_Exists(buttonID) == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button does not exist after creation! Widget is likely in use.")
		return

	end

	Button_SetVisible(buttonID, _visible)
	Button_SetTextures(buttonID, _textureTable[1], _textureTable[2], _textureTable[3])
	Button_SetTooltip(buttonID, _tipTable[1], _tipTable[2])
	Button_SetModalInstruction(buttonID, _instructions)

	return buttonID

end