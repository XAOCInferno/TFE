debug_GlobalAbilitiesCore_FileName = "GlobalAbilities_Core"

import("TFE_Core/Subscars/GlobalAbilities/Imports/GlobalAbilities_Imports.scar")

g_btn = ""

g_AllTrackedAbilityBuilders = {}
g_AllTrackedAbilityBuildersCount = 0
g_IsDoingAbility = false --This NEEDS to be changed later as part of an ability class

g_AllTrackedAbilities = {}
g_LastActivatedPlayer = nil



GlobalAbility = {}
function GlobalAbility:new ( _CasterPlayer, _AbilityName, _ActivationEntityBlueprint, _TargetFilter, _PosInTrackedAbilities )

    local GlobalAbilityObject = 
    {
    	--Constants
		CasterPlayer = _CasterPlayer,
		AbilityName = _AbilityName,
		ActivationEntityBlueprint = _ActivationEntityBlueprint,
		TargetFilter = _TargetFilter,
		PosInTrackedAbilities = _PosInTrackedAbilities,

		--Varaiables
		CurrentAcceptedEntityStruct,
		LastCastedEntityPosition
    }
	self.__index = self
   	return setmetatable(GlobalAbilityObject, self)
end

--Possibly override... But must include the "GetPressed"
function GlobalAbility:Update()

	local acceptedEntities, acceptedEPositions = Get_EntityDataFromEntityBP(self.ActivationEntityBlueprint, self.CasterPlayer.PlayerIndex + 1)
	for i = 1, table.getn(acceptedEntities) do

		--Possibly destroy later? atm i think it's ok to destroy now 
		self.CurrentAcceptedEntityStruct = acceptedEntities[i]
		self:PrepareAbility()
		DestroyEntityAndRemoveFromData(self.CasterPlayer, acceptedEPositions[i])

	end
	
end

--This is ran immediatly on pressing a button, it is not necessary but could be good if you want to add an effect such as a mouse cursor
--By default this does nothing and doesn't log, this should be the case!
--Override if you want functionality
--Possibly add some default logic to do with cursor effects here
function GlobalAbility:OnPressImmediate()

end

--You should probably not override this, although I guess you could..? 
function GlobalAbility:PrepareAbility()

	local debugFuncName = self.AbilityName.."/PrepareAbility"

	self.OnPressImmediate()

	self.LastCastedEntityPosition = self.CurrentAcceptedEntityStruct.EntityPosition
	local targetSquad = nil
	local targetEntity = nil
	--[[
	if(self.TargetFilter == "GROUND" or self.TargetFilter == 0) then

		targetPos = Button_GetPressedPosition(self.ButtonID)

	elseif(self.TargetFilter == "SQUAD" or self.TargetFilter == 1) then

		targetSquad = GetUniqueSG("TemporarySGroupAbilityTarget")
		Button_GetPressedSquad(self.ButtonID, targetSquad) --Add functionality when necessary

	elseif(self.TargetFilter == "ENTITY" or self.TargetFilter == 1) then

		targetEntity = GetUniqueEG("TemporaryEGroupAbilityTarget")
		Button_GetPressedEntity(self.ButtonID, targetEntity) --Add functionality when necessary

	else

		Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Target filter '"..self.TargetFilter.."' is invalid. Defaulting to 'GROUND'")
		targetPos = Button_GetPressedPosition(self.ButtonID)

	end]]

	self:DoAbility(self, self.LastCastedEntityPosition, targetSquad, targetEntity)
end

--Do override!
function GlobalAbility:DoAbility( _self, _pos, _targetSquad, _targetEntity )

	Log(1, 0, debug_GlobalAbilitiesCore_FileName, self.AbilityName.."/DoAbility", "Ability behaviour undefined! Ensure you override the 'DoAbility' function or this ability will do nothing.")

end


GlobalAbilityBuilder = {}
function GlobalAbilityBuilder:new (_OwnedByPlayer, _SGroupID, _SGroupName, _TargetEGroupName, _PosInTrackedAbilityBuilders)

    local GlobalAbilityBuilderObject = 
    {
    	--Constants
		OwnedByPlayer = _OwnedByPlayer,
		SGroupName = _SGroupName,
	    SGroupID = _SGroupID,
		TargetEGroupName = _TargetEGroupName,
		PosInTrackedAbilityBuilders = PosInTrackedAbilityBuilders
    }
	self.__index = self
   	return setmetatable(GlobalAbilityBuilderObject, self)
end

function GlobalAbilityBuilder:Update()
	
	if(Cmd_IsConstructingBuilding(self.SGroupName, true)) then

		--We have started building it, don't need to issue order
		SGroup_DestroyAllSquads(self.SGroupName)
		SGroup_Destroy(self.SGroupID)

		g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount - 1
		table.remove(g_AllTrackedAbilityBuilders, PosInTrackedAbilityBuilders)

	else
		
		-- issue order
		Command_SquadEntity( 
			self.OwnedByPlayer,
			self.SGroupID,
			SCMD_BuildStructure,
			self.TargetEGroupName
		)	

	end
end

function Setup_GlobalAbilities()

	local debugFuncName = "Setup_GlobalAbilities"
	
	Log(0, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Starting: '"..debugFuncName.."'...")

	Setup_ActualGlobalAbilies()
	EventCue_DoEvent( 'warning', 'music/stinger_completeobjective', 'Global Abilities Activated!', 'Global Abilities Activated!.' )

	
	Log(0, 0, debug_ResMatureCore_FileName, debugFuncName, "Finished: '"..debugFuncName.."'!")

end

function GetLocalPlayerStruct()

	local debugFuncName = "GetLocalPlayerStruct"

	local localPlayerIndex = Tut_GetLocalPlayerIndex()

	for i = 1, g_PlayerCount do
		if(g_AllPlayers[i].PlayerIndex == localPlayerIndex) then
			return g_AllPlayers[i]
		end
	end

	Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Local player does not exist!")

end

function Setup_ActualGlobalAbilies()

	local debugFuncName = "Setup_AbilityButtons"

	Dev_SetupAutoConstructor()

	for i = 1, g_PlayerCount do


	end
	
	local RaceName = ""
	for i = 1, g_PlayerCount do
		RaceName = g_AllPlayers[i].RaceDetails.RaceName
		local GlobalAbilityCasterSBP = "world_squad_global_ability_caster_"..RaceName

		if(SBP_Exists(GlobalAbilityCasterSBP)) then
			Util_CreateSquadsAtPosition(g_AllPlayers[i].Player, SGroup_GetName(GetUniqueSG("GlobalAbilityCaster")), GlobalAbilityCasterSBP, World_Pos(0,0,0), 1)
		else
			Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Global Ability Caster EBP for race '"..RaceName.."' doesn't exist, make sure there is an entity called '"..GlobalAbilityCasterSBP.."'!")
		end
		
		if(RaceName == "guard_race") then

			local AbilityStruct = CreateGlobalAbility(
				g_AllPlayers[i], 
				"GlobalAbility_Guard_SummonBunker", 
				"global_guard_summon_bunker_entity",
				table.getn(g_AllTrackedAbilities),
				"GROUND"
			)

			AbilityStruct.DoAbility = function( _self, _pos, _targetSquad, _targetEntity )

				_pos = _self.LastCastedEntityPosition
					
				FireCost(_self.CasterPlayer, 0, -100, 0, 0, 0, 0)
				ActivateAutoConstructionAbility(_pos, _self.CasterPlayer, "guard_infantry_summon")
				
			end

		elseif(RaceName == "eldar_race") then

			local AbilityStruct = CreateGlobalAbility(
				g_AllPlayers[i], 
				"GlobalAbility_Eldar_SummonWebwayGate", 
				"global_eldar_summon_webway_gate_entity",
				table.getn(g_AllTrackedAbilities),
				"GROUND"
			)

			AbilityStruct.DoAbility = function( _self, _pos, _targetSquad, _targetEntity )

				_pos = _self.LastCastedEntityPosition

				FireCost(_self.CasterPlayer, 0, -100, 0, 0, 0, 0)
				ActivateAutoConstructionAbility(_pos, _self.CasterPlayer, "eldar_webway_gate")

			end
		end
	end
end

--Do this later, requires fire cost to be built into ability as well as being a function
--[[function CheckGlobalAbilityRequirements()

	for player = 1, g_PlayerCount do
		if(g_AllPlayers[player].PlayerIndex = Tut_GetLocalPlayerIndex()) then

			for i = 1, table.getn(g_AllTrackedAbilities) do

				if(g_AllPlayers[player].CurrentResources.RT_Requisition < g_AllTrackedAbilities.FireCost)

			end

		end
	end


end]]

function Update_GlobalAbilities()

	local debugFuncName = "Update_GlobalAbilities"

	
	for i = 1, table.getn(g_AllTrackedAbilities) do

		g_AllTrackedAbilities[i]:Update()

	end

	Update_AllAbilityBuilders()

end


function CreateGlobalAbility(_Player, _AbilityName, _ActivationEntityBP, _TargetFilter)

	local debugFuncName = "CreateGlobalAbility"
	
	local AbilityStruct = GlobalAbility:new(_Player, _AbilityName, _ActivationEntityBP, _TargetFilter, table.getn(g_AllTrackedAbilities))

	table.insert(g_AllTrackedAbilities, AbilityStruct)

	return AbilityStruct

end

function UpdateAbilityIconGraphics(_BtnID, _TextureTable, _TipTable, _Instructions)

	local debugFuncName = "UpdateAbilityIconGraphics"

	if(_BtnID == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button is nil! Cannot update graphics.")
		return 

	elseif(Button_Exists(_BtnID) == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button does not exist! Cannot update graphics.")
		return

	end
	Button_SetTextures(_BtnID, _TextureTable[1], _TextureTable[2], _TextureTable[3])
	Button_SetTooltip(_BtnID, _TipTable[1], _TipTable[2])
	Button_SetModalInstruction(_BtnID, _Instructions)

	return buttonID

end

--Other costs can be added when needed, but likely via a different function as this will just interact direct with resource gen system
function FireCost(_Player, _RT_Red, _RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls) 

	_Player:AddFireCost(_RT_Red, _RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls)

end

devGlobalBuildertest = nil
devGloblabuildertestStruct = nil
UniqueBuilderSGroup = nil
function Dev_SetupAutoConstructor(_PlayerStruct)
	_PlayerStruct = g_AllPlayers[1]
	UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)
	UniqueBuilderSGroup = Util_CreateSquadsAtPosition(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", World_Pos(0,0,0), 1)
	devGloblabuildertestStruct = GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, "" )

end

function Dev_MoveSquadToPosition(player, pos)

	Command_SquadPos( 
		player.Player,
		UniqueBuilderSGroup,
		SCMD_Move,
		pos
	)	

end

function ActivateAutoConstructionAbility(_pos, _PlayerStruct, _structureEbps)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)
	print("HI")
	print(_pos.x)
	_pos = World_Pos(_pos.x,_pos.y,_pos.z)
	print(_pos)
	Entity_CreateBuildingPosition(_PlayerStruct.Player, UniqueBuildingEGroupName, _structureEbps, _pos, 0)

	--If group size is 0 we have not created the above entity. Likely due to it being placed in a bad position. Must show error and stop function
	if(EGroup_Count(UniqueBuildingEGroup) == 0) then

		UIWarning_Show( "FAILED TO CAST SUMMON ABILITY.\nCannot place structure at that position." )
		return

	end

	Util_CreateSquadsAtPosition(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _pos, 1)

	table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

end

function Update_AllAbilityBuilders()

	for i = 1, g_AllTrackedAbilityBuildersCount do

		g_AllTrackedAbilityBuilders[i]:Update()

	end
end


function Util_GlobalAbilityButton_Create(_widgetName, _textureTable, _tipTable, _instructions, _visible, _enabled, _modal)

	local debugFuncName = "Util_GlobalAbilityButton_Create"

	local buttonID = Button_Add(_widgetName, _visible, _enabled, _modal)

	if(buttonID == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button is nil after creation! pcall has been tripped, likely invalid arguments.")
		return 

	elseif(Button_Exists(buttonID) == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button does not exist after creation! Widget is likely in use.")
		return

	end

	Button_SetVisible(buttonID, _visible)
	Button_SetTextures(buttonID, _textureTable[1], _textureTable[2], _textureTable[3])
	Button_SetTooltip(buttonID, _tipTable[1], _tipTable[2])
	Button_SetModalInstruction(buttonID, _instructions)

	return buttonID

end