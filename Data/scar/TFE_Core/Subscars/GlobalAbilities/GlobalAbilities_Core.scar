debug_GlobalAbilitiesCore_FileName = "GlobalAbilities_Core"

import("TFE_Core/Subscars/GlobalAbilities/Imports/GlobalAbilities_Imports.scar")

g_btn = ""

g_AllTrackedAbilityBuilders = {}
g_AllTrackedAbilityBuildersCount = 0
g_IsDoingAbility = false --This NEEDS to be changed later as part of an ability class

g_AllTrackedAbilities = {}

GlobalAbility = {}
function GlobalAbility:new ( _OwnedPlayer, _AbilityName, _ButtonID, _IsModal, _TargetFilter, _PosInTrackedAbilities )

    local GlobalAbilityObject = 
    {
    	--Constants
		OwnedPlayer = _OwnedPlayer,
		AbilityName = _AbilityName,
		ButtonID = _ButtonID,
		IsModal = _IsModal,
		TargetFilter = _TargetFilter,
		PosInTrackedAbilities = _PosInTrackedAbilities
    }
	self.__index = self
   	return setmetatable(GlobalAbilityObject, self)
end

--Possibly override... But must include the "GetPressed"
function GlobalAbility:Update()
	
	if(Button_Exists(self.ButtonID) == false) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, self.AbilityName.."/Update", "Linked button does not exist! Removing self from global abilities.")
		table.remove(PosInTrackedAbilities, self._PosInTrackedAbilities)
		return

	end

	if(Button_GetPressed(self.ButtonID)) then

		self:OnPress()

	end

end

--This is ran immediatly on pressing a button, it is not necessary but could be good if you want to add an effect such as a mouse cursor
--By default this does nothing and doesn't log, this should be the case!
--Override if you want functionality
--Possibly add some default logic to do with cursor effects here
function GlobalAbility:OnPressImmediate()

end

--You should probably not override this, although I guess you could..? 
function GlobalAbility:OnPress()

	local debugFuncName = self.AbilityName.."/OnPress"

	self.OnPressImmediate()

	local targetPos = nil
	local targetSquad = nil
	local targetEntity = nil

	if(self.IsModal) then

		if(self.TargetFilter == "GROUND" or self.TargetFilter == 0) then

			targetPos = Button_GetPressedPosition(self.ButtonID)

		elseif(self.TargetFilter == "SQUAD" or self.TargetFilter == 1) then

			targetSquad = GetUniqueSG("TemporarySGroupAbilityTarget")
			Button_GetPressedSquad(self.ButtonID, targetSquad) --Add functionality when necessary

		elseif(self.TargetFilter == "ENTITY" or self.TargetFilter == 1) then

			targetEntity = GetUniqueEG("TemporaryEGroupAbilityTarget")
			Button_GetPressedEntity(self.ButtonID, targetEntity) --Add functionality when necessary

		else

			Log(1, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Target filter '"..self.TargetFilter.."' is invalid. Defaulting to 'GROUND'")
			targetPos = Button_GetPressedPosition(self.ButtonID)

		end
	end

	self.DoAbility(targetPos, targetSquad, targetEntity)
end

--Do override!
function GlobalAbility:DoAbility( _pos, _targetSquad, _targetEntity )

	Log(1, 0, debug_GlobalAbilitiesCore_FileName, self.AbilityName.."/DoAbility", "Ability behaviour undefined! Ensure you override the 'DoAbility' function or this ability will do nothing.")

end


GlobalAbilityBuilder = {}
function GlobalAbilityBuilder:new (_OwnedByPlayer, _SGroupID, _SGroupName, _TargetEGroupName, _PosInTrackedAbilityBuilders)

    local GlobalAbilityBuilderObject = 
    {
    	--Constants
		OwnedByPlayer = _OwnedByPlayer,
		SGroupName = _SGroupName,
	    SGroupID = _SGroupID,
		TargetEGroupName = _TargetEGroupName,
		PosInTrackedAbilityBuilders = PosInTrackedAbilityBuilders
    }
	self.__index = self
   	return setmetatable(GlobalAbilityBuilderObject, self)
end

function GlobalAbilityBuilder:Update()

	
	if(Cmd_IsConstructingBuilding(self.SGroupName, true)) then

		--We have started building it, don't need to issue order
		SGroup_DestroyAllSquads(self.SGroupName)
		SGroup_Destroy(self.SGroupID)

		g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount - 1
		table.remove(g_AllTrackedAbilityBuilders, PosInTrackedAbilityBuilders)

	else
		
		-- issue order
		Command_SquadEntity( 
			self.OwnedByPlayer,
			self.SGroupID,
			SCMD_BuildStructure,
			self.TargetEGroupName
		)	

	end
end

function Setup_GlobalAbilities()
	local debugFuncName = "Setup_GlobalAbilities"
	
	Log(0, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Starting: '"..debugFuncName.."'...")

	EventCue_DoEvent( 'warning', 'music/stinger_completeobjective', 'Global Abilities Activated!', 'Global Abilities Activated!.' )
	Setup_AbilityButtons()

	
	Log(0, 0, debug_ResMatureCore_FileName, debugFuncName, "Finished: '"..debugFuncName.."'!")

end

function Setup_AbilityButtons()
	for i = 1, g_PlayerCount do
		if(g_AllPlayers[i].PlayerIndex == Tut_GetLocalPlayerIndex()) then
			if(g_AllPlayers[i].RaceDetails.RaceName == "guard_race") then
				local CurrentPlayer = g_AllPlayers[i]
				local AbilityStruct = CreateGlobalAbilityAndButton(
					CurrentPlayer.Player, 
					"GlobalAbility_Guard_SummonBunker", 
					"btn_GlobalAbility01",
					{"guard_icons/guard_infantry_tunnel", "guard_icons/guard_infantry_tunnel", "guard_icons/guard_infantry_tunnel"},
					{ "Deploy Tunnel Network", "Fire Cost: Req: 100\n\n - Constructs a Tunnel Network at target location.\n - Tunnel Networks can transport infantry easily around the map.\n - Can be upgraded with Medi Bay or Repair Deck and can gain infiltration via Cammo Netting.\n - Can construct some infantry at a slower rate."},
					"um test instructions...",
					true,
					"GROUND"
				)
	
				AbilityStruct.DoAbility = function( _pos, _targetSquad, _targetEntity )

					FireCost(CurrentPlayer, -100, 0, 0, 0, 0)
					ActivateAutoConstructionAbility(_pos, g_AllPlayers[1], "guard_infantry_summon")

				end

				local AbilityStruct2 = CreateGlobalAbilityAndButton(
					CurrentPlayer.Player, 
					"GlobalAbility_Guard_SummonMultilaser", 
					"btn_GlobalAbility02",
					{"guard_icons/guard_turret_multilaser", "guard_icons/guard_turret_multilaser", "guard_icons/guard_turret_multilaser"},
					{ "Deploy Multilaser Turret", "Fire Cost: Req: 50, Power: 30\n\n - Create a multilaser turret at target location.\n - Turret will automatically build itself.\n - Weaker than a Heavy Bolter Turret and cannot be upgraded."},
					"um test instructions...",
					true,
					"GROUND"
				)
	
				AbilityStruct2.DoAbility = function( _pos, _targetSquad, _targetEntity )

					FireCost(CurrentPlayer, -50, -30, 0, 0, 0)
					ActivateAutoConstructionAbility(_pos, g_AllPlayers[1], "guard_turret_multilaser")

				end
			end
		end
	end
end

function Update_GlobalAbilities()

	local debugFuncName = "Update_GlobalAbilities"

	
	for i = 1, table.getn(g_AllTrackedAbilities) do

		g_AllTrackedAbilities[i]:Update()

	end

	Update_AllAbilityBuilders()

end


function CreateGlobalAbilityAndButton(_Player, _AbilityName, _WidgetName, _TextureTable, _TipTable, _Instructions, _Modal, _TargetFilter)

	local debugFuncName = "CreateAbilityButton"

	local ButtonID = Util_GlobalAbilityButton_Create(_WidgetName, _TextureTable, _TipTable, _Instructions, true, true, _Modal)
	
	local AbilityStruct = GlobalAbility:new(_Player, _AbilityName, ButtonID, _Modal, _TargetFilter, table.getn(g_AllTrackedAbilities))

	table.insert(g_AllTrackedAbilities, AbilityStruct)

	return AbilityStruct

end

--Other costs can be added when needed, but likely via a different function as this will just interact direct with resource gen system
function FireCost(_Player, _RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls) 

	_Player:AddFireCost(_RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls)

end

function ActivateAutoConstructionAbility(_pos, _PlayerStruct, _structureEbps)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)
	
	Entity_CreateBuildingPosition(_PlayerStruct.Player, UniqueBuildingEGroupName, _structureEbps, _pos, 0)

	--If group size is 0 we have not created the above entity. Likely due to it being placed in a bad position. Must show error and stop function
	if(EGroup_Count(UniqueBuildingEGroup) == 0) then

		UIWarning_Show( "FAILED TO CAST SUMMON ABILITY.\nCannot place structure at that position." )
		return

	end

	Util_CreateSquadsAtPosition(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _pos, 1)

	table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

end

function Update_AllAbilityBuilders()

	for i = 1, g_AllTrackedAbilityBuildersCount do

		g_AllTrackedAbilityBuilders[i]:Update()

	end
end


function Util_GlobalAbilityButton_Create(_widgetName, _textureTable, _tipTable, _instructions, _visible, _enabled, _modal)

	local debugFuncName = "Util_GlobalAbilityButton_Create"

	local buttonID = Button_Add(_widgetName, _visible, _enabled, _modal)

	if(buttonID == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button is nil after creation! pcall has been tripped, likely invalid arguments.")
		return 

	elseif(Button_Exists(buttonID) == nil) then

		Log(2, 0, debug_GlobalAbilitiesCore_FileName, debugFuncName, "Button does not exist after creation! Widget is likely in use.")
		return

	end

	Button_SetVisible(buttonID, _visible)
	Button_SetTextures(buttonID, _textureTable[1], _textureTable[2], _textureTable[3])
	Button_SetTooltip(buttonID, _tipTable[1], _tipTable[2])
	Button_SetModalInstruction(buttonID, _instructions)

	return buttonID

end