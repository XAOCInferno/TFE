import("TFE_Core/Subscars/Achievements/Imports/Achievements_Imports.scar")

eACHIEVEMENT_STATUS_COMPLETE = OS_Complete
eACHIEVEMENT_STATUS_FAILED = OS_Failed
eACHIEVEMENT_STATUS_ONGOING = 3

eACHIEVEMENT_VIEW_ACTIVE = 0
eACHIEVEMENT_VIEW_HIDDEN = 1

g_AllTrackedAchievements = {}


function Setup_Achievements()
	
	AddStacktrace("Setup_Achievements")
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Starting: 'Setup_Achievements'...")

	local Generic_Achievement_KillUnits = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 0, short_desc_id = 0, help_tip_id = 0 } )
	local Generic_Achievement_RazeBuildings = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 1, short_desc_id = 1, help_tip_id = 1 } )
	local Generic_Achievement_ExpensiveArmy = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 2, short_desc_id = 2, help_tip_id = 2 } )
	local Generic_Achievement_KDRatio = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 3, short_desc_id = 3, help_tip_id = 3 } )
	local Generic_Achievement_FirstBlood = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 4, short_desc_id = 4, help_tip_id = 4 } )
	--local Generic_Achievement_HighUpkeep = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 5, short_desc_id = 5, help_tip_id = 5 } ) --TODO
	local Generic_Achievement_ManyMaturedPoints = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 6, short_desc_id = 6, help_tip_id = 6 } )
	--local Generic_Achievement_ManyMaturedPointsDuration = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 7, short_desc_id = 7, help_tip_id = 7 } ) --TODO
	local Generic_Achievement_Tier4Unit = CreateAchievement(eACHIEVEMENT_VIEW_ACTIVE, { title_id = 8, short_desc_id = 8, help_tip_id = 8 } )

	Generic_Achievement_KillUnits.Get_AchievementStatus = function( _self )
		
		for i = 1, g_PlayerCount do
			
			if (g_AllPlayers[i].StatsManager.UnitsKilled >= 10) then

				return eACHIEVEMENT_STATUS_COMPLETE, g_AllPlayers[i]

			end

		end

		return eACHIEVEMENT_STATUS_ONGOING

	end

	Generic_Achievement_KillUnits.EndSuccess = function( _self, _PlayerStruct )

		_PlayerStruct.CurrentAddResources.RT_Requisition = _PlayerStruct.CurrentAddResources.RT_Requisition + 50

	end

	Generic_Achievement_RazeBuildings.Get_AchievementStatus = function( _self )
		
		for i = 1, g_PlayerCount do
			--Not working.
			if (g_AllPlayers[i].StatsManager.StructuresRazed >= 3) then
					
				return eACHIEVEMENT_STATUS_COMPLETE, g_AllPlayers[i]

			end

		end

		return eACHIEVEMENT_STATUS_ONGOING

	end
	
	Generic_Achievement_RazeBuildings.EndSuccess = function( _self, _PlayerStruct )

		_PlayerStruct.CurrentAddResources.RT_Requisition = _PlayerStruct.CurrentAddResources.RT_Requisition + 25
		_PlayerStruct.CurrentAddResources.RT_Power = _PlayerStruct.CurrentAddResources.RT_Power + 25

	end

	Generic_Achievement_ExpensiveArmy.Get_AchievementStatus = function( _self )
		
		for i = 1, g_PlayerCount do

			local ArmyCostScore = 0
			ArmyCostScore = ArmyCostScore + (g_AllPlayers[i].StatsManager.ActiveArmyCost.RT_Requisition * 0.4)
			ArmyCostScore = ArmyCostScore + g_AllPlayers[i].StatsManager.ActiveArmyCost.RT_Power

			if (ArmyCostScore > 300) then

				return eACHIEVEMENT_STATUS_COMPLETE, g_AllPlayers[i]

			end

		end

		return eACHIEVEMENT_STATUS_ONGOING

	end

	Generic_Achievement_ExpensiveArmy.EndSuccess = function( _self, _PlayerStruct )

		_PlayerStruct.CurrentAddResources.RT_Power = _PlayerStruct.CurrentAddResources.RT_Power + 40

	end

	Generic_Achievement_KDRatio.Get_AchievementStatus = function( _self )
		
		for i = 1, g_PlayerCount do
			 
			if (g_AllPlayers[i].StatsManager.UnitsKilled >= 10 and g_AllPlayers[i].StatsManager.UnitsKilled / g_AllPlayers[i].StatsManager.UnitsLost > 1.5) then

				return eACHIEVEMENT_STATUS_COMPLETE, g_AllPlayers[i]

			end

		end

		return eACHIEVEMENT_STATUS_ONGOING

	end

	Generic_Achievement_KDRatio.EndSuccess = function( _self, _PlayerStruct )

		_PlayerStruct.CurrentAddResources.RT_Requisition = _PlayerStruct.CurrentAddResources.RT_Requisition + 50

	end

	Generic_Achievement_KDRatio.Get_AchievementStatus = function( _self )
		
		for i = 1, g_PlayerCount do
			 
			if (g_AllPlayers[i].StatsManager.UnitsKilled >= 1 ) then

				return eACHIEVEMENT_STATUS_COMPLETE, g_AllPlayers[i]

			end

		end

		return eACHIEVEMENT_STATUS_ONGOING

	end

	Generic_Achievement_KDRatio.EndSuccess = function( _self, _PlayerStruct )

		_PlayerStruct.CurrentAddResources.RT_Requisition = _PlayerStruct.CurrentAddResources.RT_Requisition + 25

	end

	Generic_Achievement_ManyMaturedPoints.Get_AchievementStatus = function( _self )
		
		for i = 1, g_PlayerCount do

			local MaturedPointsCount = 0
				
			for z = 1, g_NumberStratPoints do

				if(g_AllStrategicPointsStructs[z].OwnedBy == g_AllPlayers[j].PlayerIndex) then

					--This code is now being duplicated in multiple places, should make it a class function of Strategic Point
					if(GetWorldLifetime(g_AllStrategicPointsStructs[z].InitTime) / g_MatureMaxLifetime > 1) then

						MaturedPointsCount = MaturedPointsCount + 1

					end

				end

			end

			if(MaturedPointsCount >= 4) then

				return eACHIEVEMENT_STATUS_COMPLETE

			end

		end

		return eACHIEVEMENT_STATUS_ONGOING

	end

	Generic_Achievement_ManyMaturedPoints.EndSuccess = function( _self, _PlayerStruct )

		_PlayerStruct.CurrentAddResources.RT_Requisition = _PlayerStruct.CurrentAddResources.RT_Requisition + 50

	end

	Generic_Achievement_Tier4Unit.Get_AchievementStatus = function( _self )
		
		for i = 1, g_PlayerCount do
			 
			if (GetRelicUnit(i) ~= nil) then

				return eACHIEVEMENT_STATUS_COMPLETE, g_AllPlayers[i]

			end

		end

		return eACHIEVEMENT_STATUS_ONGOING

	end

	Generic_Achievement_Tier4Unit.EndSuccess = function( _self, _PlayerStruct )

		_PlayerStruct.CurrentAddResources.RT_Requisition = _PlayerStruct.CurrentAddResources.RT_Requisition + 75
		_PlayerStruct.CurrentAddResources.RT_Power = _PlayerStruct.CurrentAddResources.RT_Power + 100

	end
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Finished: 'Setup_Achievements'!")

	RemoveStacktrace()

end


function CreateAchievement(_ViewState, _ObjectiveTable)

	AddStacktrace("CreateAchievement")
	
	local AchievementStruct = AchievementDetails:new(_ViewState, _ObjectiveTable)

	table.insert(g_AllTrackedAchievements, AchievementStruct)

	RemoveStacktrace()

	return AchievementStruct

end

function Update_Achievements()
	
	AddStacktrace("Update_Achievements")
	
	for i = 1, table.getn(g_AllTrackedAchievements) do

		g_AllTrackedAchievements[i]:Update()

	end

	RemoveStacktrace()

end
