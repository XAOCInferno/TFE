debug_NewCoverSystems_FileName = "NewCoverSystems"

-------------------------------------------------
--GLOBAL VARIABLES
-------------------------------------------------

g_ModsByCover = {}

-------------------------------------------------
--ON INITIALIZATION 
-------------------------------------------------

function Setup_CoverModifiers()

	--Generic shield modifier to show you're in cover, to be replaced later with a special verticality one
	mod_PositiveCover = Modifier_Create(MAT_Squad, "cover_event_modifier", MUT_Enable, 1, 1, "")
	table.insert(SquadModifiers, mod_PositiveCover)
	--
	
	--Light Cover Bonuses
	mod_LightCover__modifier_01 = Modifier_Create(MAT_Squad, "health_rangedamage_received_1_modifier", MUT_Multiplication, 1, 0.75, "")
	table.insert(SquadModifiers, mod_LightCover__modifier_01)
		
	mod_LightCover__modifier_02 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 0.8999999762, "")
	table.insert(SquadModifiers, mod_LightCover__modifier_02)
		
	mod_LightCover__modifier_03 = Modifier_Create(MAT_Squad, "morale_rate_squad_modifier", MUT_Multiplication, 1, 1.5, "")
	table.insert(SquadModifiers, mod_LightCover__modifier_03)
	--
	
	--Heavy Cover Bonuses
	mod_HvyCover__modifier_01 = Modifier_Create(MAT_Squad, "health_rangedamage_received_1_modifier", MUT_Multiplication, 1, 0.5, "")
	table.insert(SquadModifiers, mod_HvyCover__modifier_01)
		
	mod_HvyCover__modifier_02 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 0.75, "")
	table.insert(SquadModifiers, mod_HvyCover__modifier_02)
		
	mod_HvyCover__modifier_03 = Modifier_Create(MAT_Squad, "morale_rate_squad_modifier", MUT_Multiplication, 1, 2, "")	
	table.insert(SquadModifiers, mod_HvyCover__modifier_03)
	--
	
	--High Verticality Bonuses
	mod_HighVert__modifier_01 = Modifier_Create(MAT_Squad, "accuracy_weapon_modifier", MUT_Multiplication, 1, 1.2, "")
	table.insert(SquadModifiers, mod_HighVert__modifier_01)
		
	mod_HighVert__modifier_02 = Modifier_Create(MAT_Squad, "sight_radius_modifier", MUT_Multiplication, 0, 1.5, "")
	table.insert(SquadModifiers, mod_HighVert__modifier_02)
		
	mod_HighVert__modifier_03 = Modifier_Create(MAT_Squad, "keen_sight_radius_modifier", MUT_Multiplication, 0, 1.5, "")
	table.insert(SquadModifiers, mod_HighVert__modifier_03)
		
	mod_HighVert__modifier_04 = Modifier_Create(MAT_Squad, "max_range_weapon_modifier", MUT_Multiplication, 1, 1.3, "")	
	table.insert(SquadModifiers, mod_HighVert__modifier_04)	
	
	mod_HighVert__modifier_05 = Modifier_Create(MAT_Squad, "melee_charge_range_modifier", MUT_Multiplication, 1, 0.8, "")	
	table.insert(SquadModifiers, mod_HighVert__modifier_05)
		
	mod_HighVert__modifier_06 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 1.1, "")	
	table.insert(SquadModifiers, mod_HighVert__modifier_06)
	--
	
	--Mid Verticality Bonuses
	mod_MidVert__modifier_01 = Modifier_Create(MAT_Squad, "accuracy_weapon_modifier", MUT_Multiplication, 1, 1.1, "")
	table.insert(SquadModifiers, mod_MidVert__modifier_01)	
		
	mod_MidVert__modifier_02 = Modifier_Create(MAT_Squad, "sight_radius_modifier", MUT_Multiplication, 0, 1.25, "")
	table.insert(SquadModifiers, mod_MidVert__modifier_02)	
		
	mod_MidVert__modifier_03 = Modifier_Create(MAT_Squad, "keen_sight_radius_modifier", MUT_Multiplication, 0, 1.25, "")
	table.insert(SquadModifiers, mod_MidVert__modifier_03)	
		
	mod_MidVert__modifier_04 = Modifier_Create(MAT_Squad, "max_range_weapon_modifier", MUT_Multiplication, 1, 1.15, "")	
	table.insert(SquadModifiers, mod_MidVert__modifier_04)	
	
	mod_MidVert__modifier_05 = Modifier_Create(MAT_Squad, "melee_charge_range_modifier", MUT_Multiplication, 1, 0.9, "")	
	table.insert(SquadModifiers, mod_MidVert__modifier_05)
		
	mod_MidVert__modifier_06 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 1.05, "")	
	table.insert(SquadModifiers, mod_MidVert__modifier_06)	
	--
	
	--Poison Bonuses	
	mod_Poison__modifier_01 = Modifier_Create(MAT_Squad, "health_degeneration_modifier", MUT_Addition, 1, 2.5, "")
	table.insert(SquadModifiers, mod_Poison__modifier_01)	
		
	mod_Poison__modifier_02 = Modifier_Create(MAT_Squad, "morale_rate_squad_modifier", MUT_Multiplication, 1, 0.8, "")
	table.insert(SquadModifiers, mod_Poison__modifier_02)		
	--
	g_ModsByCover = {
		--0, None
		{
		},
		--1, Light
		{
		},
		--2, Hvy
		{
		},
		--3, Negative
		{
		},
		--4, Blocking 
		{
		},
		--5, Stealth
		{
		},
		--6 Height_High
		{
			mod_PositiveCover,
			mod_HighVert__modifier_01, mod_HighVert__modifier_02, mod_HighVert__modifier_03, mod_HighVert__modifier_04, mod_HighVert__modifier_05, mod_HighVert__modifier_06 
		},
		--7 Height_High_Light
		{
			mod_PositiveCover,
			mod_HighVert__modifier_01, mod_HighVert__modifier_02, mod_HighVert__modifier_03, mod_HighVert__modifier_04, mod_HighVert__modifier_05, mod_HighVert__modifier_06 , 
			mod_LightCover__modifier_01, mod_LightCover__modifier_02, mod_LightCover__modifier_03
		},
		--8 Height_High_Heavy
		{
			mod_PositiveCover,
			mod_HighVert__modifier_01, mod_HighVert__modifier_02, mod_HighVert__modifier_03, mod_HighVert__modifier_04, mod_HighVert__modifier_05, mod_HighVert__modifier_06 , 
			mod_HvyCover__modifier_01, mod_HvyCover__modifier_02, mod_HvyCover__modifier_03
		},
		--9 Height_Mid
		{
			mod_PositiveCover,
			mod_MidVert__modifier_01, mod_MidVert__modifier_02, mod_MidVert__modifier_03, mod_MidVert__modifier_04, mod_MidVert__modifier_05, mod_MidVert__modifier_06
		},
		--10 Height_Mid_Light
		{
			mod_PositiveCover,
			mod_MidVert__modifier_01, mod_MidVert__modifier_02, mod_MidVert__modifier_03, mod_MidVert__modifier_04, mod_MidVert__modifier_05, mod_MidVert__modifier_06,
			mod_LightCover__modifier_01, mod_LightCover__modifier_02, mod_LightCover__modifier_03
		},
		--11 Height_Mid_Heavy
		{
			mod_PositiveCover,
			mod_MidVert__modifier_01, mod_MidVert__modifier_02, mod_MidVert__modifier_03, mod_MidVert__modifier_04, mod_MidVert__modifier_05, mod_MidVert__modifier_06,
			mod_HvyCover__modifier_01, mod_HvyCover__modifier_02, mod_HvyCover__modifier_03
		},
		--12 Poison
		{
			mod_Poison__modifier_01, mod_Poison__modifier_02
		}
	}

end


function Setup_NewCoverSystem()	
	local debugFuncName = "Setup_NewCoverSystem"
	
	Log(0, 0, debug_NewCoverSystems_FileName, debugFuncName, "Starting: '"..debugFuncName.."'...")

	Setup_CoverModifiers()
	
	Log(0, 0, debug_NewCoverSystems_FileName, debugFuncName, "Finished: '"..debugFuncName.."'!")
	
end


function Set_AllSquadCoverModifiers()
	local debugFuncName = "Set_AllSquadCoverModifiers"

	for i = 1, g_PlayerCount do
	
		for j = 1, g_PlayerSquadCount[i]+1 do
		
			local TargetSquad = g_AllSquadsData[i][j]	
			
	    		local ModsToAdd = {}
	    		local ModsToRemove = {}	
	    		local CriticalError = false
	    	
			if (TargetSquad == nil) then
			
				LogOnce(1, 0, debug_NewCoverSystems_FileName, debugFuncName, "Squad Loadout is Nil!")
				CriticalError = true
			else
				if(TargetSquad.SquadLoadout == 0) then				
   		
					LogOnce(1, 0, debug_NewCoverSystems_FileName, debugFuncName, "Squad Struct is empty!")
					CriticalError = true
					
				end
				
				if(pcall(Squad_GetCoverType, TargetSquad.SquadID, 0 ) == false) then
			
					LogOnce(1, 0, debug_NewCoverSystems_FileName, debugFuncName, "Can't get squad Cover!")
					CriticalError = true
				
				end
				
			end

			if(CriticalError == false) then
				CoverID = Squad_GetCoverType(TargetSquad.SquadID, 0 )
				
				for key, coverMods in pairs(g_ModsByCover) do
				
					for modKey, mod in pairs(coverMods) do
					
						local keyOffset = key-1	
						if(mod == nil) then
						
							LogOnce(2, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..modKey.." Is Nil! Cannot Add.")
						
						elseif(keyOffset == CoverID) then
					
							contains, index = TableContains(ModsToAdd, mod)
							if(contains == false) then
							
								table.insert(ModsToAdd,mod)	
								
							end   
							
						else
							contains, index = TableContains(ModsToRemove, mod)
							contains, index = TableContains(ModsToRemove, TargetSquad.SquadAppliedCoverMods)
							if(contains == false) then
							
								table.insert(ModsToRemove,mod)
								
							end
							
						end	
												
					end					
				
					------------------------------------
					-----CHECK APPLY NOT REMOVE-----
					------------------------------------	
					ModsToRemove = TableRemoveDuplicates(ModsToRemove, ModsToAdd)
			
					
					----------------
					-----APPLY-----
					----------------
					Set_CoverModifiers(TargetSquad, ModsToRemove, ModsToAdd)
					
				end					
			end
	   	end		
	end
end


function Set_CoverModifiers(TargetSquad, ModsToRemove, ModsToAdd)
	local debugFuncName = "Set_CoverModifiers"

	--------------------
	-----APPLY MODS-----
	--------------------	
					
	--REMOVE--
	for debugRemovePos, removeMod in pairs(ModsToRemove) do
		if(removeMod == nil) then
			
			LogOnce(1, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..debugRemovePos.." Is Nil! Cannot Remove.")
			
		else
			
			contains, key = TableContains(TargetSquad.SquadAppliedCoverMods, removeMod)
			
			if(contains == true) then
			
				RemoveCoverMod(removeMod, TargetSquad, debugRemovePos)			

			else
				
				LogOnce(1, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..debugRemovePos.." Is not applied! Cannot remove.")
					
			end	
		end			
	end
	
	--APPLY--
	for debugAddPos, addMod in pairs(ModsToAdd) do
		if(addMod == nil) then
			
			LogOnce(1, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..debugAddPos.." Is Nil! Cannot Add.")
			
		else
			
			contains, key = TableContains(TargetSquad.SquadAppliedCoverMods, addMod)
			if(contains == false) then
			
				ApplyCoverMod(addMod, TargetSquad, debugAddPos)
				
			else
				
					LogOnce(1, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..debugAddPos.." Is Applied! Cannot Apply Again.")

			end	
			
		end			
	end	
end


function RemoveCoverMod(removeMod, tmpStruct, modIndex)

	local debugFuncName = "RemoveCoverMod"	
	if (Modifier_Exists(tmpStruct.SquadAppliedCoverMods_IDs[key])) then
	
		local functionSuccess = pcall(Modifier_Remove, tmpStruct.SquadAppliedCoverMods_IDs[key])
		
		if (functionSuccess == false) then 
			LogOnce(1, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..modIndex.." Can't be removed for unknown reason! Triggered pcall.")
			return 
		end
		
	end
	
	table.remove(tmpStruct.SquadAppliedCoverMods, key)
	table.remove(tmpStruct.SquadAppliedCoverMods_IDs, key)
	table.remove(tmpStruct.SquadAppliedCoverMods_Index, key)

end


function ApplyCoverMod(addMod, tmpStruct, modIndex)

	local debugFuncName = "ApplyCoverMod"	
	
	-- Apply modifier
	local functionSuccess, tmpModID = pcall(Modifier_ApplyToSquad, addMod, tmpStruct.SquadID)
	if (functionSuccess == false) then 
		LogOnce(1, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..modIndex.." Can't be removed for unknown reason! Triggered pcall.")
		return 
	end
	
	-- Get modifier index
	local tmpModIndex = ModifierUtil_GetSquadApplierIndex(addMod, tmpStruct.SquadID)
	
	-- Store modifier info
	table.insert(tmpStruct.SquadAppliedCoverMods, addMod)	
	table.insert(tmpStruct.SquadAppliedCoverMods_IDs, tmpModID)	
	table.insert(tmpStruct.SquadAppliedCoverMods_Index, tmpModIndex)	
	
end

