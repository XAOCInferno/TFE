debug_NewCoverSystems_FileName = "NewCoverSystems"

-------------------------------------------------
--GLOBAL VARIABLES
-------------------------------------------------

g_ModsByCover = {}
g_StartingSquadsGameIDs = {}
g_SGroupCoverApplier = nil
g_SGroupCoverApplierName = "sg_CoverApplierGroup"

-------------------------------------------------
--ON INITIALIZATION 
-------------------------------------------------

function SetupCoverModifiers()

	--Generic shield modifier to show you're in cover, to be replaced later with a special verticality one
	mod_PositiveCover = Modifier_Create(MAT_Squad, "cover_event_modifier", MUT_Enable, 1, 1, "")
	table.insert(SquadModifiers, mod_PositiveCover)
	--
	
	--Light Cover Bonuses
	mod_LightCover__modifier_01 = Modifier_Create(MAT_Squad, "health_rangedamage_received_1_modifier", MUT_Multiplication, 1, 0.75, "")
	table.insert(SquadModifiers, mod_LightCover__modifier_01)
		
	mod_LightCover__modifier_02 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 0.8999999762, "")
	table.insert(SquadModifiers, mod_LightCover__modifier_02)
		
	mod_LightCover__modifier_03 = Modifier_Create(MAT_Squad, "morale_rate_squad_modifier", MUT_Multiplication, 1, 1.5, "")
	table.insert(SquadModifiers, mod_LightCover__modifier_03)
	--
	
	--Heavy Cover Bonuses
	mod_HvyCover__modifier_01 = Modifier_Create(MAT_Squad, "health_rangedamage_received_1_modifier", MUT_Multiplication, 1, 0.5, "")
	table.insert(SquadModifiers, mod_HvyCover__modifier_01)
		
	mod_HvyCover__modifier_02 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 0.75, "")
	table.insert(SquadModifiers, mod_HvyCover__modifier_02)
		
	mod_HvyCover__modifier_03 = Modifier_Create(MAT_Squad, "morale_rate_squad_modifier", MUT_Multiplication, 1, 2, "")	
	table.insert(SquadModifiers, mod_HvyCover__modifier_03)
	--
	
	--High Verticality Bonuses
	mod_HighVert__modifier_01 = Modifier_Create(MAT_Squad, "accuracy_weapon_modifier", MUT_Multiplication, 1, 1.2, "")
	table.insert(SquadModifiers, mod_HighVert__modifier_01)
		
	mod_HighVert__modifier_02 = Modifier_Create(MAT_Squad, "sight_radius_modifier", MUT_Multiplication, 0, 1.5, "")
	table.insert(SquadModifiers, mod_HighVert__modifier_02)
		
	mod_HighVert__modifier_03 = Modifier_Create(MAT_Squad, "keen_sight_radius_modifier", MUT_Multiplication, 0, 1.5, "")
	table.insert(SquadModifiers, mod_HighVert__modifier_03)
		
	mod_HighVert__modifier_04 = Modifier_Create(MAT_Squad, "max_range_weapon_modifier", MUT_Multiplication, 1, 1.3, "")	
	table.insert(SquadModifiers, mod_HighVert__modifier_04)	
	
	mod_HighVert__modifier_05 = Modifier_Create(MAT_Squad, "melee_charge_range_modifier", MUT_Multiplication, 1, 0.8, "")	
	table.insert(SquadModifiers, mod_HighVert__modifier_05)
		
	mod_HighVert__modifier_06 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 1.1, "")	
	table.insert(SquadModifiers, mod_HighVert__modifier_06)
	--
	
	--Mid Verticality Bonuses
	mod_MidVert__modifier_01 = Modifier_Create(MAT_Squad, "accuracy_weapon_modifier", MUT_Multiplication, 1, 1.1, "")
	table.insert(SquadModifiers, mod_MidVert__modifier_01)	
		
	mod_MidVert__modifier_02 = Modifier_Create(MAT_Squad, "sight_radius_modifier", MUT_Multiplication, 0, 1.25, "")
	table.insert(SquadModifiers, mod_MidVert__modifier_02)	
		
	mod_MidVert__modifier_03 = Modifier_Create(MAT_Squad, "keen_sight_radius_modifier", MUT_Multiplication, 0, 1.25, "")
	table.insert(SquadModifiers, mod_MidVert__modifier_03)	
		
	mod_MidVert__modifier_04 = Modifier_Create(MAT_Squad, "max_range_weapon_modifier", MUT_Multiplication, 1, 1.15, "")	
	table.insert(SquadModifiers, mod_MidVert__modifier_04)	
	
	mod_MidVert__modifier_05 = Modifier_Create(MAT_Squad, "melee_charge_range_modifier", MUT_Multiplication, 1, 0.9, "")	
	table.insert(SquadModifiers, mod_MidVert__modifier_05)
		
	mod_MidVert__modifier_06 = Modifier_Create(MAT_Squad, "speed_maximum_modifier", MUT_Multiplication, 1, 1.05, "")	
	table.insert(SquadModifiers, mod_MidVert__modifier_06)	
	--
	
	--Poison Bonuses	
	mod_Poison__modifier_01 = Modifier_Create(MAT_Squad, "health_degeneration_modifier", MUT_Addition, 1, 2.5, "")
	table.insert(SquadModifiers, mod_Poison__modifier_01)	
		
	mod_Poison__modifier_02 = Modifier_Create(MAT_Squad, "morale_rate_squad_modifier", MUT_Multiplication, 1, 0.8, "")
	table.insert(SquadModifiers, mod_Poison__modifier_02)		
	--
	g_ModsByCover = {
		--0, None
		{
		},
		--1, Light
		{
		},
		--2, Hvy
		{
		},
		--3, Negative
		{
		},
		--4, Blocking 
		{
		},
		--5, Stealth
		{
		},
		--6 Height_High
		{
			mod_PositiveCover,
			mod_HighVert__modifier_01, mod_HighVert__modifier_02, mod_HighVert__modifier_03, mod_HighVert__modifier_04, mod_HighVert__modifier_05, mod_HighVert__modifier_06 
		},
		--7 Height_High_Light
		{
			mod_PositiveCover,
			mod_HighVert__modifier_01, mod_HighVert__modifier_02, mod_HighVert__modifier_03, mod_HighVert__modifier_04, mod_HighVert__modifier_05, mod_HighVert__modifier_06 , 
			mod_LightCover__modifier_01, mod_LightCover__modifier_02, mod_LightCover__modifier_03
		},
		--8 Height_High_Heavy
		{
			mod_PositiveCover,
			mod_HighVert__modifier_01, mod_HighVert__modifier_02, mod_HighVert__modifier_03, mod_HighVert__modifier_04, mod_HighVert__modifier_05, mod_HighVert__modifier_06 , 
			mod_HvyCover__modifier_01, mod_HvyCover__modifier_02, mod_HvyCover__modifier_03
		},
		--9 Height_Mid
		{
			mod_PositiveCover,
			mod_MidVert__modifier_01, mod_MidVert__modifier_02, mod_MidVert__modifier_03, mod_MidVert__modifier_04, mod_MidVert__modifier_05, mod_MidVert__modifier_06
		},
		--10 Height_Mid_Light
		{
			mod_PositiveCover,
			mod_MidVert__modifier_01, mod_MidVert__modifier_02, mod_MidVert__modifier_03, mod_MidVert__modifier_04, mod_MidVert__modifier_05, mod_MidVert__modifier_06,
			mod_LightCover__modifier_01, mod_LightCover__modifier_02, mod_LightCover__modifier_03
		},
		--11 Height_Mid_Heavy
		{
			mod_PositiveCover,
			mod_MidVert__modifier_01, mod_MidVert__modifier_02, mod_MidVert__modifier_03, mod_MidVert__modifier_04, mod_MidVert__modifier_05, mod_MidVert__modifier_06,
			mod_HvyCover__modifier_01, mod_HvyCover__modifier_02, mod_HvyCover__modifier_03
		},
		--12 Poison
		{
			mod_Poison__modifier_01, mod_Poison__modifier_02
		}
	}

end


function InitNewCoverSystems()	
	local debugFuncName = "InitNewCoverSystems"
	
	Log(0, 0, debug_NewCoverSystems_FileName, debugFuncName, "Starting: '"..debugFuncName.."'...")

	g_SGroupCoverApplier = SGroup_Create("sg_CoverApplierGroup")
	SetupCoverModifiers()
	Rule_Add(Rule_CheckForNewSquads_Cover)
	
	Log(0, 0, debug_NewCoverSystems_FileName, debugFuncName, "Finished: '"..debugFuncName.."'!")
	
end


function Rule_CheckForNewSquads_Cover()

	if(g_WorldTime == g_LastSquadUpdateTime and g_PreviousCoverCalcTime < g_WorldTime) then
		
	g_PreviousCoverCalcTime = g_WorldTime
		Rule_CheckCoverStatus()
	
	end

end


function Rule_CheckCoverStatus()
	local debugFuncName = "Rule_CheckCoverStatus"

	for i = 1, g_PlayerCount do
	
		for j = 1, g_PlayerSquadCount[i] do
		
			local tmpStruct = g_AllSquadsData[i][j]	
			
	    	local ModsToAdd = {}
	    	local ModsToRemove = {}					
	    	
			if (tmpStruct ~= nil) then
				if(tmpStruct.SquadLoadout == 0) then
					if(pcall(SGroup_Add, g_SGroupCoverApplier, tmpStruct.SquadID) == false) then						
						Log(1, 0, debug_NewCoverSystems_FileName, debugFuncName, "Can't Add to SGroup!")
						break
					end
					
					---------------------------------
					-----CALCULATE MODS TO APPLY-----
					---------------------------------
					if(pcall(Squad_GetCoverType, tmpStruct.SquadID, 0 ) == false) then
						Log(1, 0, debug_NewCoverSystems_FileName, debugFuncName, "Can't get squad Cover!")
						break
	    			end
	    			
	    			CoverID = Squad_GetCoverType(tmpStruct.SquadID, 0 )
					for key, coverMods in pairs(g_ModsByCover) do
						for modKey, mod in pairs(coverMods) do
							local keyOffset = key-1		
							if(keyOffset == CoverID) then
						
								contains, index = TableContains(ModsToAdd, mod)
								if(contains == false) then
									--print("Applying Cover "..CoverID.." mod "..modKey.. " For "..tmpStruct.SquadBlueprint)  
									table.insert(ModsToAdd,mod)						
								end   
							else
								contains, index = TableContains(ModsToRemove, mod)
								if(contains == false) then
									--print("I am in Cover "..CoverID)
									--print("I am Checking against Cover "..keyOffset)
									--print("Disabiling Cover "..keyOffset.." mod "..modKey.. " For "..tmpStruct.SquadBlueprint)
									table.insert(ModsToRemove,mod)
								end
							end
						end
					end	
			
					--------------------
					-----APPLY MODS-----
					--------------------
					for debugRemovePos, removeMod in pairs(ModsToRemove) do
				
						contains, index = TableContains(ModsToAdd, removeMod)
						if(contains == false) then 
							--Check mod is applied
							if(removeMod == nil) then								
								Log(2, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..debugRemovePos.." Is Nil! Cannot Remove.")
								break 
							elseif(ModifierUtil_GetSquadApplierIndex( removeMod, tmpStruct.SquadID ) ~= 0) then
								--Remove mod
								if(g_SGroupCoverApplier == nil) then g_SGroupCoverApplier = SGroup_Create("sg_CoverApplierGroup") end								
	       						pcall(ModifierUtil_ApplyToSGroup, g_SGroupCoverApplier, removeMod, false)  
	       					end
						end 
			
					end
			
			 
					for debugAddPos, addMod in pairs(ModsToAdd) do
						--Check mod isn't applied
						if(addMod == nil) then  
							Log(2, 1, debug_NewCoverSystems_FileName, debugFuncName, "Cover mod at pos: "..debugAddPos.." Is Nil! Cannot Add.")   
							break 
						elseif(ModifierUtil_GetSquadApplierIndex( addMod, tmpStruct.SquadID ) == 0) then
							--Add mod
							if(g_SGroupCoverApplier == nil) then g_SGroupCoverApplier = SGroup_Create("sg_CoverApplierGroup") end							
							pcall(ModifierUtil_ApplyToSGroup, g_SGroupCoverApplier, addMod, true)
						end
					end
		
					SGroup_Clear(g_SGroupCoverApplier)
							
	   			else
					Log(1, 0, debug_NewCoverSystems_FileName, debugFuncName, "Squad Loadout is empty!")
				end
	   		else
				Log(1, 0, debug_NewCoverSystems_FileName, debugFuncName, "Squad Struct is Nil!")
	   		end
	   	end		
	end

end

