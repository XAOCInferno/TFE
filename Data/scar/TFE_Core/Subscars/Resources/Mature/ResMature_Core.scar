function Setup_MatureSystem()

	AddStacktrace("Setup_MatureSystem")
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Starting: 'Setup_MatureSystem'...")

	EventCue_DoEvent( 'warning', 'music/stinger_completeobjective', 'Resource Mature Activated!', 'Capped points will increase in value until decapped.' )
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Finished: 'Setup_MatureSystem'!")

	RemoveStacktrace()

end

local function Get_StrategicPointsStatus()

	AddStacktrace("Get_StrategicPointsStatus")

	for i = 1, g_NumberStratPoints do
		--[[Firstly check if control has switched.]]
		
		if(not World_OwnsEntity(g_AllStrategicPointsStructs[i].ID)) then
		
			local TmpOwner = Entity_GetPlayerOwner(g_AllStrategicPointsStructs[i].ID)

			local OwnerPlayer = World_GetPlayerIndex(TmpOwner)

			if(g_AllStrategicPointsStructs[i].OwnedBy ~= OwnerPlayer) then
				g_AllStrategicPointsStructs[i].InitTime = g_WorldTime	
				g_AllStrategicPointsStructs[i].OwnedBy = OwnerPlayer

			end

		elseif(g_AllStrategicPointsStructs[i].OwnedBy ~= -1) then
			
			g_AllStrategicPointsStructs[i].OwnedBy = -1
			g_AllStrategicPointsStructs[i].InitTime = g_WorldTime

		end

	end
	
	RemoveStacktrace()

end

function Set_ResourceMature()

	AddStacktrace("Set_ResourceMature")

	Get_StrategicPointsStatus()

	for j = 1, g_PlayerCount do

		for z = 1, g_NumberStratPoints do

			if(g_AllStrategicPointsStructs[z].OwnedBy == g_AllPlayers[j].PlayerIndex) then
				
				local MaxBonusReq = g_AllPlayers[j].RaceDetails.RaceResourceInfo.BaseMatureLimits.RT_Requisition
				local MaxBonusPower = g_AllPlayers[j].RaceDetails.RaceResourceInfo.BaseMatureLimits.RT_Power
				local MaxBonusPop = g_AllPlayers[j].RaceDetails.RaceResourceInfo.BaseMatureLimits.RT_Pop
				local MaxBonusSouls = g_AllPlayers[j].RaceDetails.RaceResourceInfo.BaseMatureLimits.RT_Souls
				local MaxBonusFaith = g_AllPlayers[j].RaceDetails.RaceResourceInfo.BaseMatureLimits.RT_Faith
				
				local CapTimeAsMaturePercent = GetWorldLifetime(g_AllStrategicPointsStructs[z].InitTime) / g_MatureMaxLifetime
				
				local CapTimeAsBonusReq = MaxBonusReq * CapTimeAsMaturePercent
				local CapTimeAsBonusPower = MaxBonusPower * CapTimeAsMaturePercent
				local CapTimeAsBonusPop = MaxBonusPop * CapTimeAsMaturePercent
				local CapTimeAsBonusSouls = MaxBonusSouls * CapTimeAsMaturePercent
				local CapTimeAsBonusFaith = MaxBonusFaith * CapTimeAsMaturePercent
				
				if(CapTimeAsBonusReq > MaxBonusReq) then
		
					CapTimeAsBonusReq = MaxBonusReq						

				end
				
				if(CapTimeAsBonusPower > MaxBonusPower) then
		
					CapTimeAsBonusPower = MaxBonusPower						

				end
				
				if(CapTimeAsBonusPop > MaxBonusPop) then
		
					CapTimeAsBonusPop = MaxBonusPop						

				end
				
				if(CapTimeAsBonusSouls > MaxBonusSouls) then
		
					CapTimeAsBonusSouls = MaxBonusSouls						

				end
				
				if(CapTimeAsBonusFaith > MaxBonusFaith) then
		
					CapTimeAsBonusFaith = MaxBonusFaith						

				end

				g_AllPlayers[j].CurrentAddResources.RT_Requisition =  g_AllPlayers[j].CurrentAddResources.RT_Requisition + CapTimeAsBonusReq
				g_AllPlayers[j].CurrentAddResources.RT_Power =  g_AllPlayers[j].CurrentAddResources.RT_Power + CapTimeAsBonusPower
				g_AllPlayers[j].CurrentAddResources.RT_Pop =  g_AllPlayers[j].CurrentAddResources.RT_Pop + CapTimeAsBonusPop
				g_AllPlayers[j].CurrentAddResources.RT_Souls =  g_AllPlayers[j].CurrentAddResources.RT_Souls + CapTimeAsBonusSouls
				g_AllPlayers[j].CurrentAddResources.RT_Faith =  g_AllPlayers[j].CurrentAddResources.RT_Faith + CapTimeAsBonusFaith
				--print("CapTime = "..CapTimeAsMaturePercent.." And New Req from it = "..CapTimeAsBonusReq.." Capped at = "..MaxBonusReq.Req)
				
			end

		end

	end	

	RemoveStacktrace()

end
