debug_ResUpkeepCore_FileName = "ResUpkeepCore"




function Rule_ActivateUpkeep()
	local debugFuncName = "Rule_ActivateUpkeep"
	
	Log(0, 0, debug_ResUpkeepCore_FileName, debugFuncName, "Starting: '"..debugFuncName.."'...")
	
	UIWarning_Show("Army Upkeep has now been activated!")	
	EventCue_DoEvent( 'ingame/event_cue_icons/custom/warning', 'music/stinger_completeobjective', 'Army Upkeep Activated!', 'Your army will now drain resources.' )
	Rule_AddInterval(Rule_CalculateUpkeep, g_UpkeepCalculateRate)
	
	Log(0, 0, debug_ResUpkeepCore_FileName, debugFuncName, "Finished: '"..debugFuncName.."'!")

end

function Rule_CalculateUpkeep()

	for i = 1, g_PlayerCount do
	
		for j = 1, g_PlayerSquadCount[i] do
		
			local tmpStruct = g_AllSquadsData[i][j]			
			if(tmpStruct ~= nil) then
			
				local SquadLifetimeAsPercent = 1
				local SquadLifetime = GetWorldLifetime(tmpStruct.SquadInitTime)
			
				if(SquadLifetime < g_TimeTakenForMaxUpkeep) then			
					SquadLifetimeAsPercent = SquadLifetime / g_MatureMaxLifetime
				end
				
				if(UnitCosting[tmpStruct.SquadUnitRace] ~= null) then
					g_BonusIncome[i].Req = g_BonusIncome[i].Req + ((UnitCosting[tmpStruct.SquadUnitRace][tmpStruct.SquadBlueprint].CostEntity.Req * tmpStruct.SquadLoadout) / SquadLifetimeAsPercent)
					g_BonusIncome[i].Power = g_BonusIncome[i].Power + ((UnitCosting[tmpStruct.SquadUnitRace][tmpStruct.SquadBlueprint].CostEntity.Power * tmpStruct.SquadLoadout) / SquadLifetimeAsPercent)
					g_BonusIncome[i].Faith = g_BonusIncome[i].Faith + ((UnitCosting[tmpStruct.SquadUnitRace][tmpStruct.SquadBlueprint].CostEntity.Faith * tmpStruct.SquadLoadout) / SquadLifetimeAsPercent)
					g_BonusIncome[i].Souls = g_BonusIncome[i].Souls + ((UnitCosting[tmpStruct.SquadUnitRace][tmpStruct.SquadBlueprint].CostEntity.Souls * tmpStruct.SquadLoadout) / SquadLifetimeAsPercent)
			
		
					if (tmpStruct.SquadHasLeader) then 
						g_BonusIncome[i].Req = g_BonusIncome[i].Req + (UnitCosting[SquadUnitRace][tmpStruct.SquadBlueprint].CostLeader.Req / SquadLifetimeAsPercent)
						g_BonusIncome[i].Power = g_BonusIncome[i].Power + (UnitCosting[SquadUnitRace][tmpStruct.SquadBlueprint].CostLeader.Power / SquadLifetimeAsPercent)
						g_BonusIncome[i].Faith = g_BonusIncome[i].Faith + (UnitCosting[SquadUnitRace][tmpStruct.SquadBlueprint].CostLeader.Faith / SquadLifetimeAsPercent)
						g_BonusIncome[i].Souls = g_BonusIncome[i].Souls + (UnitCosting[SquadUnitRace][tmpStruct.SquadBlueprint].CostLeader.Souls / SquadLifetimeAsPercent)
				
					end
				end
			end
		end			
	end
	
	g_HasDoneInitUpkeepRun = true --Necessary now we have Core?	

end


function Rule_ImplementUpkeep()
	
	if(g_HasDoneInitUpkeepRun) then
	
		for i = 1, g_PlayerCount do			
		
			if(Player_IsAlive(g_AllPlayers[i])) then
			
				Player_AddResource(g_AllPlayers[i], RT_Requisition, g_BonusIncome[i].Req)
				Player_AddResource(g_AllPlayers[i], RT_Power, g_BonusIncome[i].Power)
				Player_AddResource(g_AllPlayers[i], RT_Faith, g_BonusIncome[i].Faith)
				Player_AddResource(g_AllPlayers[i], RT_Souls, g_BonusIncome[i].Souls)
				
			end
		end
	end

end
