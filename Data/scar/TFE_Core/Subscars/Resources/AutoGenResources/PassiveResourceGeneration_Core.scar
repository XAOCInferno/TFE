import("TFE_Core/Subscars/Resources/Imports/Resources_Imports.scar")

function Setup_PassiveResourceGeneration()

	AddStacktrace("Setup_PassiveResourceGeneration")

	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Starting: 'Setup_PassiveResourceGeneration'...")
	
	for i = 1, g_PlayerCount do

		Setup_PassiveResourceGeneration_Settings(g_AllPlayers[i].RaceDetails.RaceName)

	end
	
	Rule_AddInterval(Set_PassiveResources, g_ResourceGenUpdateRate)	
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Finished: 'Setup_PassiveResourceGeneration'!")
	
	RemoveStacktrace()

end


function Set_PassiveResources()

	AddStacktrace("Set_PassiveResources")

	local AddResources = function()

		AddStacktrace("AddResources")
			
		for i = 1, g_PlayerCount do
		
			local RaceResStruct = g_FactionSpecificResourceGeneration[g_AllPlayers[i].RaceDetails.RaceName]
			
			if (RaceResStruct ~= nil) then

				local ResourceGenerationCopy = RaceResStruct.ResourceGeneration:CreateCopy()

				if (RaceResStruct.HasSouls) then

					local CurrentSouls = g_AllPlayers[i].CurrentResources.RT_Souls

					for j = 1, RaceResStruct.DE_SoulsThresholdsTable.DataLength do

						--Keys weighted from lowest to highest so we just need to iterate until our souls are lower than the key
						if (CurrentSouls <= RaceResStruct.DE_SoulsThresholdsTable.Data[j].WeightedKey) then
							
							--If we've not already applied the current modifier, go through that process
							if (RaceResStruct.DE_CurrentlyAppliedSoulsModifierAsIndex ~= j) then
								
								RaceResStruct.DE_CurrentlyAppliedSoulsModifierAsIndex = j

								--Try to remove old modifier, if it exists
								if (RaceResStruct.DE_CurrentlyAppliedSoulsModifier ~= nil) then

									pcall(Modifier_Remove, RaceResStruct.DE_CurrentlyAppliedSoulsModifier)								

								end

								--Try to add new modifier, if we have one to use
								if(RaceResStruct.DE_SoulsThresholdsTable.Data[j].Data.PlayerModifier ~= nil) then
									
									RaceResStruct.DE_CurrentlyAppliedSoulsModifier = Modifier_ApplyToPlayer(RaceResStruct.DE_SoulsThresholdsTable.Data[j].Data.PlayerModifier, g_AllPlayers[i].Player)

								end

							end

							--Finally update the passive resource generation with the auto gen modifier 
							ResourceGenerationCopy.RT_Souls = RaceResStruct.ResourceGeneration.RT_Souls * RaceResStruct.DE_SoulsThresholdsTable.Data[j].Data.AutoGenModifier

							--Break early as we've found the threshold that we're applying
							break
								
						end

					end

				end

				if (Player_IsAlive(g_AllPlayers[i].Player)) then
				
					if(RaceResStruct.HasPassiveResGen) then
						
						g_AllPlayers[i].CurrentFireCosts:Add(ResourceGenerationCopy)
						
					end

				end
			end
		
		end

		RemoveStacktrace()
		
	end

	if pcall(AddResources) == false then

		Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, debug_PassiveResourceGeneration_Core_FileName, "Set_PassiveResources", "Cannot add passive resources!")

	end

	RemoveStacktrace()
	
end