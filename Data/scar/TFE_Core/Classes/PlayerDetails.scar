--Class for a "Player". 
--Encompases everything we consider to be on a player scope

PlayerDetails = {}
function PlayerDetails:new (_Player, _PlayerIndex, _DisplayName, _RaceDetails)

	AddStacktrace("PlayerDetails:new")

    local PlayerDetailsObject = 
    {

    	--Constants
	    Player = _Player,
	    PlayerIndex = _PlayerIndex,
	    DisplayName = _DisplayName,
	    RaceDetails = _RaceDetails,   
		StartingPosition = Player_GetStartPosition(_Player),	   
		StatsManager = nil, --This will be constant after its assignment later on

		--Offline Only
		PlayerIsComputer = Cpu_IsCpuPlayer(_Player),

	    --Variables
		CurrentResources = ResourceGroup:new(g_StartingRedResource),
	    CurrentNumberOfResearchedGlobals = ResourceGroup:new(),
	    CurrentAddResources = ResourceGroup:new(),	    
	    CurrentFireCosts = ResourceGroup:new()

    }

	PlayerDetailsObject.StatsManager = StatsManager:new(PlayerDetailsObject)

	self.__index = self

	RemoveStacktrace()

	return setmetatable(PlayerDetailsObject, self)

end

--The player has done something that costs resources so charge them for it
function PlayerDetails:AddFireCost( _ResourceGroup )

	AddStacktrace("PlayerDetails:AddFireCost")

	self.CurrentFireCosts:Add(_ResourceGroup)

	RemoveStacktrace()

end

--Returns true if we have enough, false otherwise
function PlayerDetails:HasEnoughResources( _ResourceGroup )

	AddStacktrace("PlayerDetails:HasEnoughResources")

	--Assume we have enough resources
	local CostSuccess = true

	if(self.CurrentResources.RT_Red + _ResourceGroup.RT_Red < 0
	or self.CurrentResources.RT_Requisition + _ResourceGroup.RT_Requisition < 0
	or self.CurrentResources.RT_Power + _ResourceGroup.RT_Power < 0 
	or self.CurrentResources.RT_Pop + _ResourceGroup.RT_Pop < 0
	or self.CurrentResources.RT_Faith + _ResourceGroup.RT_Faith < 0
	or self.CurrentResources.RT_Souls + _ResourceGroup.RT_Souls < 0 ) then

		--Useful log to determine the cost has gone through correctly and we've done the right math
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Red: "..self.CurrentResources.RT_Red.."| Required: ".._ResourceGroup.RT_Red * -1)
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Req: "..self.CurrentResources.RT_Requisition.."| Required: ".._ResourceGroup.RT_Requisition * -1)
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Power: "..self.CurrentResources.RT_Power.."| Required: ".._ResourceGroup.RT_Power * -1)
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Pop: "..self.CurrentResources.RT_Pop.."| Required: ".._ResourceGroup.RT_Pop * -1)
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Faith: "..self.CurrentResources.RT_Faith.."| Required: ".._ResourceGroup.RT_Faith * -1)
		Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Souls: "..self.CurrentResources.RT_Souls.."| Required: ".._ResourceGroup.RT_Souls * -1)

		--We don't have enough resources
		CostSuccess = false

	end	
	
	RemoveStacktrace()
	
	return CostSuccess

end

--Called on every "tick", removes the bonuses and charges applied to the player
function PlayerDetails:ClearCurrentResourceBonuses()

	AddStacktrace("PlayerDetails:ClearCurrentResourceBonuses")

	self.CurrentAddResources:Clear()
	self.CurrentFireCosts:Clear()

	 RemoveStacktrace()

end

function PlayerDetails:PlayerGetResources_AsResourceGroup()

	--Temporary resource group generation.
	--Ask the game what it knows the player to have resource wise and sync up our details with it
	--Carry over red resource
	local tmpResourceGroup = ResourceGroup:new(

		self.CurrentResources.RT_Red,
		Player_GetResource(self.Player, RT_Requisition),
		Player_GetResource(self.Player, RT_Power),
		Player_GetResource(self.Player, RT_Pop),
		Player_GetResource(self.Player, RT_Faith),
		Player_GetResource(self.Player, RT_Souls)

	)

	return tmpResourceGroup

end