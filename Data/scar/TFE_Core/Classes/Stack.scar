Stack = {}
function Stack:new (_Capacity)
	
	local StackObject = 
	{
		Data = {},
		Length = 0,
		Capacity = _Capacity
	}

	self.__index = self

   	return setmetatable(StackObject, self)

end

function Stack:Clone()

	local newStack = Stack:new(self.Capacity)

	for i in self.Data do
		
		newStack:Push(self.Data[i])

	end

	return newStack

end

function Stack:Peek( _PeekDepth )

	--Ensure _PeekDepth is not null and is less than or equal to Length
	_PeekDepth = (_PeekDepth or 1) <= self.Length and (_PeekDepth or 1) or self.Length
	_ReturnData = {}

	for i = 1, _PeekDepth do

		table.insert(_ReturnData, self.Data[_ReturnData])

	end

	return _ReturnData

end

function Stack:PeekOne()

	return self.Data[self.Length] or ""

end

function Stack:Push( _Data )

	if self.Length < self.Capacity then

		table.insert(self.Data, _Data)
		self.Length = self.Length + 1

	else

		print("Stack Overflow.")

	end

end

function Stack:Pop( _PopDepth )

	--Ensure _PopDepth is not null and is less than or equal to Length
	_PopDepth = (_PopDepth or 1) <= self.Length and (_PopDepth or 1) or self.Length

	for i = 1, _PopDepth do

		table.remove(self.Data, self.Length)
		self.Length = self.Length - 1

	end

end

function Stack:Clear()

	self:Pop( self.Length )

end

function Stack:IsEmpty()

	return self.Length == 0

end

