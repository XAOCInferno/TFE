--Resource groups used in place of tables to represent any ammount of resources

ResourceGroup = {}
function ResourceGroup:new(_RT_Red, _RT_Requsition, _RT_Power, _RT_Pop, _RT_Faith, _RT_Souls)

	AddStacktrace("ResourceGroup:new")

	local ResourceGroupObject = 
	{

		--Variables
		--The passed variables are all optional, so if any are null default to 0
		RT_Red = _RT_Red or 0,
	    RT_Requisition = _RT_Requsition or 0,
	    RT_Power =  _RT_Power or 0,
	    RT_Pop =  _RT_Pop or 0,
	    RT_Faith = _RT_Faith or 0, 
	    RT_Souls = _RT_Souls or 0

	}
	
	self.__index = self

	RemoveStacktrace()

   	return setmetatable(ResourceGroupObject, self)

end

function ResourceGroup:Set(_ResourceGroup)

	AddStacktrace("ResourceGroup:Set")

	self.RT_Red = _ResourceGroup.RT_Red
	self.RT_Requisition = _ResourceGroup.RT_Requisition
	self.RT_Power = _ResourceGroup.RT_Power
	self.RT_Pop = _ResourceGroup.RT_Pop
	self.RT_Faith = _ResourceGroup.RT_Faith
	self.RT_Souls = _ResourceGroup.RT_Souls

	RemoveStacktrace()

end

--Niche use case, this is only used for the upkeep file
--Implementation of upkeep files can be changed later on to use resource groups
--If this is done, this function wont be needed anymore
function ResourceGroup:SetFromBlueprint(_Blueprint)

	AddStacktrace("ResourceGroup:SetFromBlueprint")
	
	self.RT_Red = _Blueprint.Red or 0
	self.RT_Requisition = _Blueprint.Req or 0
	self.RT_Power = _Blueprint.Power or 0
	self.RT_Pop = _Blueprint.Pop or 0
	self.RT_Faith = _Blueprint.Faith or 0
	self.RT_Souls = _Blueprint.Souls or 0

	RemoveStacktrace()

end

function ResourceGroup:Add(_ResourceGroup)

	AddStacktrace("ResourceGroup:Add")
	
	self.RT_Red = self.RT_Red + _ResourceGroup.RT_Red
	self.RT_Requisition = self.RT_Requisition + _ResourceGroup.RT_Requisition
	self.RT_Power = self.RT_Power + _ResourceGroup.RT_Power
	self.RT_Pop = self.RT_Pop + _ResourceGroup.RT_Pop
	self.RT_Faith = self.RT_Faith + _ResourceGroup.RT_Faith
	self.RT_Souls = self.RT_Souls + _ResourceGroup.RT_Souls

	RemoveStacktrace()

end

function ResourceGroup:MultiplyByFloat(_Float)

	AddStacktrace("ResourceGroup:MultiplyByFloat")
	
	self.RT_Red = self.RT_Red * _Float
	self.RT_Requisition = self.RT_Requisition * _Float
	self.RT_Power = self.RT_Power * _Float
	self.RT_Pop = self.RT_Pop * _Float
	self.RT_Faith = self.RT_Faith * _Float
	self.RT_Souls = self.RT_Souls * _Float

	RemoveStacktrace()

end

function ResourceGroup:Clamp(_ResourceGroup)

	AddStacktrace("ResourceGroup:Clamp")
	
	self.RT_Red = math.min(self.RT_Red, _ResourceGroup.RT_Red)
	self.RT_Requisition = math.min(self.RT_Requisition, _ResourceGroup.RT_Requisition)
	self.RT_Power = math.min(self.RT_Power, _ResourceGroup.RT_Power)
	self.RT_Pop = math.min(self.RT_Pop, _ResourceGroup.RT_Pop)
	self.RT_Faith = math.min(self.RT_Faith, _ResourceGroup.RT_Faith)
	self.RT_Souls = math.min(self.RT_Souls, _ResourceGroup.RT_Souls)

	RemoveStacktrace()

end

function ResourceGroup:Clear()

	AddStacktrace("ResourceGroup:Clear")
	
	self.RT_Red = 0
	self.RT_Requisition = 0
	self.RT_Power = 0
	self.RT_Pop = 0
	self.RT_Faith = 0
	self.RT_Souls = 0

	RemoveStacktrace()

end

function ResourceGroup:CreateCopy()

	return ResourceGroup:new(self.RT_Red, self.RT_Requisition, self.RT_Power, self.RT_Pop, self.RT_Faith, self.RT_Souls)

end