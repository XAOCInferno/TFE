import("TFE_Core/CriticalScars/PlayerScope/Imports/PlayerScope_Imports.scar")

---------------
--Main Script--
---------------
function Setup_PlayerScope()
	
	AddStacktrace("Setup_PlayerScope")

	--Create our data structure
	g_AdvancedRaceRestrictions_Count = {}

	--Iterate over every player
	for i = 1, g_PlayerCount do

		--Get their race. We will use this for assigning the count of their race restrictions from the data file
		local raceName = g_AllPlayers[i].RaceDetails.RaceName

		--If we've not already assigned the count
		if(g_AdvancedRaceRestrictions_Count[raceName] == nil) then

			--Default to 0 in case this race has no restrictions
			local count = 0

			--If this race has restrictions
			if(g_AdvancedRaceRestrictions[raceName] ~= nil) then

				--Then update the count
				count = table.getn(g_AdvancedRaceRestrictions[raceName])

			end

			--Now assign it to our data structure
			g_AdvancedRaceRestrictions_Count[raceName] = count

		end

	end

	RemoveStacktrace()

end

function Update_PlayerScope()
	
	AddStacktrace("Update_PlayerScope")

	Update_RaceRestrictions()

	RemoveStacktrace()

end

function Update_RaceRestrictions()

	AddStacktrace("Update_RaceRestrictions")

	--For each player
	for i = 1, g_PlayerCount do

		--Get their race name
		local raceName = g_AllPlayers[i].RaceDetails.RaceName

		--Iterate over each restriction in their race
		for j = 1, g_AdvancedRaceRestrictions_Count[raceName] or 0 do
			
			--Work out if this restriction should be applied or unapplied
			ApplyOrUnapplyRestriction(g_AdvancedRaceRestrictions[raceName][j], g_AllPlayers[i])			

		end

	end

	RemoveStacktrace()

end

function CheckIfRequirementAchieved(_AddonRequirementAndRestriction, _Player)
	
	AddStacktrace("CheckIfRequirementAchieved")

	--Init vars

	--Assume we failed
	local hasAchievedRestrictionRequirements = false

	local countOfAchievedRequirements = 0
	local numberOfRequirements = table.getn(_AddonRequirementAndRestriction.RequirementTable)

	for i = 1, numberOfRequirements do

		local thisSingleRequirementAchieved = false

		--Get our requirement
		local requirement = _AddonRequirementAndRestriction.RequirementTable[i]
		
		if(requirement.TypeOfItem == ePURCHASED_ITEM_TYPE_ADDON_LP) then
		
			--If the player's LPs have a specific count of addons
			thisSingleRequirementAchieved = GetNumberOfSpecificPlayerOwnedListeningPostAddons(requirement.ID, _Player) >= requirement.Count

		elseif(requirement.TypeOfItem == ePURCHASED_ITEM_TYPE_ENTITY) then
		
			--If player has a count of entities. This wont check if structures are complete
			thisSingleRequirementAchieved = GetCountOfPlayerOwnedEntityBlueprints(_Player.PlayerIndex + 1, requirement.ID) >= requirement.Count

		elseif(requirement.TypeOfItem == ePURCHASED_ITEM_TYPE_COMPLETED_STRUCTURE) then
		
			--If player has a count of fully constructed structures
			thisSingleRequirementAchieved = GetCountOfPlayerOwnedAndCompletedStructuresOfBlueprint(_Player.PlayerIndex + 1, requirement.ID) >= requirement.Count

		end

		countOfAchievedRequirements = countOfAchievedRequirements + bool_to_number(thisSingleRequirementAchieved)

	end

	if _AddonRequirementAndRestriction.RequirementType == eREQUIREMENT_TYPE_ANY then

		--1 or more success is a pass with ANY
		if(countOfAchievedRequirements >= 1) then

			hasAchievedRestrictionRequirements = true

		end

	elseif _AddonRequirementAndRestriction.RequirementType == eREQUIREMENT_TYPE_CUMULATIVE then

		--If we have more or equal successes than the desired we pass
		if(countOfAchievedRequirements >= _AddonRequirementAndRestriction.RequirementCumulativeCount) then

			hasAchievedRestrictionRequirements = true

		end

	elseif(_AddonRequirementAndRestriction.RequirementType == eREQUIREMENT_TYPE_ALL) then

		--We need to pass all requirements
		if(countOfAchievedRequirements >= numberOfRequirements) then

			hasAchievedRestrictionRequirements = true

		end

	end
	
	RemoveStacktrace()

	--Finally return if we passed
	return hasAchievedRestrictionRequirements

end

function CheckIfLPAddonRequirementAchieved(_AddonRequirement, _Player)
	
	AddStacktrace("CheckIfLPAddonRequirementAchieved")

	local count = GetNumberOfSpecificPlayerOwnedListeningPostAddons(_AddonRequirement.ID, _Player)
	local success = count >= _AddonRequirement.Count
	
	--Dbg Log
	--print("addon:".._AddonRequirement.ID.." count is "..count.." and requires ".._AddonRequirement.Count)

	RemoveStacktrace()

	return success

end

function CheckIfEntityRequirementAchieved(_EntityRequirement, _Player)
	
	AddStacktrace("CheckIfStructureRequirementAchieved")

	local count = GetCountOfPlayerOwnedEntityBlueprints(_Player.PlayerIndex + 1, _EntityRequirement.ID)
	local success = count >= _EntityRequirement.Count
	
	--Dbg Log
	--print("entity:".._EntityRequirement.ID.." count is "..count.." and requires ".._EntityRequirement.Count)

	RemoveStacktrace()

	return success

end

function GetNumberOfSpecificPlayerOwnedListeningPostAddons(_AddonID, _Player)
	
	AddStacktrace("GetNumberOfSpecificPlayerOwnedListeningPostAddons")

	local count = 0
	for i = 1, g_NumberStratPoints do

		if(g_AllStrategicPointsStructs[i].OwnedBy == _Player.PlayerIndex) then

			if(g_AllStrategicPointsStructs[i]:GetHasListeningPost()) then
				
				count = count + g_AllStrategicPointsStructs[i].ListeningPostAddonData:GetAddonCount(_AddonID)
				
			end

		end		

	end

	RemoveStacktrace()

	return count

end

function ApplyOrUnapplyRestriction(_AddonRequirementAndRestriction, _Player)
	
	AddStacktrace("ApplyOrUnapplyRestriction")

	local isAchieved = CheckIfRequirementAchieved(_AddonRequirementAndRestriction, _Player)

	local restrictionApplied, pos = TableContains(_AddonRequirementAndRestriction.AchievedForPlayers, _Player.PlayerIndex)

	if(_AddonRequirementAndRestriction.Item.TypeOfItem == eRESTRICTED_TYPE_SQUAD) then

		local numberOfTrue = bool_to_number(isAchieved) + bool_to_number(restrictionApplied)

		if(numberOfTrue == 0) then
			
			Player_RestrictSquad(_Player.Player, _AddonRequirementAndRestriction.Item.ID)
			table.insert(_AddonRequirementAndRestriction.AchievedForPlayers, _Player.PlayerIndex)

		elseif(numberOfTrue == 2) then

			Player_UnRestrictSquad(_Player.Player, _AddonRequirementAndRestriction.Item.ID)
			_AddonRequirementAndRestriction.AchievedForPlayers[pos] = nil

		end

	end

	RemoveStacktrace()

end