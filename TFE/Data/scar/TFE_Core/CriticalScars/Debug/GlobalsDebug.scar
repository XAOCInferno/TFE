
function AddStacktrace(_FunctionName) end
function RemoveStacktrace() end

--Log Type ENUMS
eLOG_TYPE_INFO = 0
eLOG_LOG_TYPE_WARNING = 1
eLOG_LOG_TYPE_ERROR = 2
eLOG_LOG_TYPE_CRITICAL = 3

--Verbosity ENUMS
eLOG_FULL = 0
eLOG_VERBOSE_PATH = 1
eLOG_VERBOSE = 2
eLOG_SIMPLE = 3
eLOG_MOD_ONLY = 4
eLOG_NONE = 5

local LogTypes = {}
LogTypes[0] = "i" --Basic Log
LogTypes[1] = "?" --Concern / Warning
LogTypes[2] = "!!" --Basic Error
LogTypes[3] = "!!!!" --Severe Error
local LogTypesLength = table.getn(LogTypes)

local WrittenLogs = {}

local StacktracePath = "@"
local StacktraceStack = Stack:new(52)
local LogCount = 0
local StacktraceChanged = false


local function GetLogType(_LogType)

	AddStacktrace("GetLogType")

	--Default return string as an error in case the coder has made a mistake
	local ReturnValue = "ERROR"

	if _LogType > LogTypesLength or _LogType < 0 then

		--Coder is trying to access log that hasn't been assigned in the table
		Log(eLOG_SIMPLE, eLOG_LOG_TYPE_WARNING, "Log type of '".._LogType.."' is invalid! Number must be bellow "..LogTypesLength)

	else

		--Log type is valid, return it
		ReturnValue = LogTypes[_LogType]

	end

	RemoveStacktrace()
	
	return ReturnValue

end

function AddStacktrace(_FunctionName)

	--Push to stack
	StacktraceChanged = true
	StacktraceStack:Push(_FunctionName)

end

function RemoveStacktrace()

	--Pop from stack
	StacktraceChanged = true
	StacktraceStack:Pop(1)

end

function ClearStacktrace()

	AddStacktrace("ClearStacktrace")

	StacktracePath = "@"
	StacktraceStack = {}

	RemoveStacktrace()

end

--[[Get the full path as a string]]
local function SetStacktracePath(_Verbosity)

	AddStacktrace("SetStacktracePath")

	StacktraceChanged = false

	StacktracePath = ""
	
	--Get length of the total stack trace
	local StacktraceCopy = StacktraceStack:Clone()
	local StacktraceStackLength = StacktraceCopy.Length

	if(_Verbosity == eLOG_VERBOSE_PATH and StacktraceCopy.Length > 5) then

		--The log wants us to print the most recent parts of the stacktrace
		
		StacktraceStackLength = 5
		StacktraceCopy:Pop(2)

	end
	
	if(StacktraceStackLength > 0) then
		
		--Iterate over each stored string and add it, seperated with /
		for i = 1, StacktraceStackLength do
			
			StacktracePath = StacktraceCopy:PeekOne().."/"..StacktracePath
			StacktraceCopy:Pop(1)

		end

		--Add new line so that the logs don't stick together
		StacktracePath = "@"..StacktracePath.."\n"
	
	else

		--Other logs that don't use stacktrace, so we don't need it
		StacktracePath = ""

	end

	RemoveStacktrace()

end

--Writes a custom log to the console
function Log(_LogType, _Verbosity, _Line)

	AddStacktrace("Log")
	
	if(g_DebugMode) then

		LogCount = LogCount + 1
		
		--Set default values if either of these are null
		_LogType = _LogType or eLOG_TYPE_INFO
		_Verbosity = _Verbosity or eLOG_VERBOSE
		_Line = _Line or "[[NO MESSAGE]]"

		if (StacktraceChanged == true) then

			SetStacktracePath(_Verbosity)

		end
		
		--Simply print statement with fancy formatting
		if(_Verbosity == eLOG_NONE) then

			print(" | \v  ".._Line.." |")

		--Contains Mod name 
		elseif(_Verbosity == eLOG_MOD_ONLY) then
			
			print(" | \v  ["..g_ModAbbreviation.."] ".._Line.." |")

		--Contains log type and mod name 
		elseif(_Verbosity == eLOG_SIMPLE) then
			
			print(" | \v  ("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ".._Line.." |")

		--Contains log type, mod name and game time of log
		elseif(_Verbosity == eLOG_VERBOSE) then
			
			print(" | \v  ("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ("..g_WorldTime.."s) ".._Line.." |")

		--Contains log type, mod name, game time of log and the stacktrace 
		elseif(_Verbosity == eLOG_VERBOSE_PATH) then

			print(" \n[[\n\v  ("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ("..g_WorldTime.."s) ".._Line.."\n\v "..StacktracePath.."]]")
		
		--Contains log type, mod name, game time of log and the stacktrace 
		elseif(_Verbosity == eLOG_FULL) then

			--Avoid using eLOG_FULL for simple logs as stacktrace takes up a lot of the console
			print(" \n[[\n\v  ("..GetLogType(_LogType)..") ["..g_ModAbbreviation.."] ("..g_WorldTime.."s)\n\v  ".._Line.."\n\v "..StacktracePath.."]]")

		else	
			
			--Be careful of stack overflow here, should consider a way of calculating if this is happening and stop it (perhaps track the depth of the log with incremented int and stop at scary number)
			Log(eLOG_LOG_TYPE_ERROR, eLOG_VERBOSE, "[[Invalid Log Type Of: ".._Verbosity.."]]".._Line)	
		
		end

	end

	RemoveStacktrace()

end

function LogStacktrace()

	AddStacktrace("LogStacktrace")

	Log(eLOG_TYPE_INFO, eLOG_FULL)

	RemoveStacktrace()

end

function LogNotImplemented(_Message)

	AddStacktrace("LogNotImplemented")

	Log(eLOG_LOG_TYPE_WARNING, eLOG_FULL, "'".._Message.."' has not been implemented!")
	
	RemoveStacktrace()

end

--We have to override as we load this function first
local TableContainsOverride = function(_Tbl, _Desired)

	AddStacktrace("TableContainsOverride")

	local ReturnIndex = 0
	local Success = false

	if(_Tbl ~= nil) then 

		for index, item in pairs (_Tbl) do

	    	if(item == _Desired) then

				Success = true
				ReturnIndex = index
				break

	    	end

		end

	else	

		Log(eLOG_LOG_TYPE_WARNING, eLOG_FULL, "Table is nil, returning false as default.")

	end

	RemoveStacktrace()

	return Success, ReturnIndex

end

--Writes a custom log to the console, if it hasn't been written before
--Prevents spamming of the console if something keeps happening over and over
function LogOnce(_LogType, _Verbosity, _Line)
	
	AddStacktrace("LogOnce")

	--Get the stacktrace
	if (StacktraceChanged == true) then

		SetStacktracePath(_Verbosity)
		
	end

	--Generate a unique LogID based on stacktrace path + the displayed text
	--This ID can help us almost entirely pinpoint where the log has been sent from
	local LogID = StacktracePath.._Line

	--Work out if we've seen the unique log ID before
	contains, _ = TableContainsOverride(WrittenLogs, LogID)

	if(contains == false) then

		--Not seen it before

		--Add it to table of seen logs so it can't be called again
		table.insert(WrittenLogs, LogID)

		--Log the message
		Log(_LogType, _Verbosity, _Line)

	end
	
	RemoveStacktrace()

end

function LogError(_Line)
	
	AddStacktrace("LogError")

	g_DebugMode = true --Error is so severe we should force the debugger to turn on!

	--Show error message as an in game UI message
	UIWarning_Show( "--------------------------------------------\n------TFE CORE FATAL ERROR------\n-----------CORE STOPPED------------\n--------------------------------------------" )

	--Log error in console
	Log(eLOG_LOG_TYPE_CRITICAL, eLOG_FULL, _Line)
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "|")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "--------------------------------------------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "------TFE CORE FATAL ERROR------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "-----------CORE STOPPED------------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "--------------------------------------------")
	Log(eLOG_LOG_TYPE_WARNING, eLOG_NONE, "|")

	--Stop the mod
	ErrorPause()

	RemoveStacktrace()

end

--This function will do something illegal that will cause the scar code to be haulted by the game
--Useful to check for thoroughness of error checking
function DoFatalError()

	AddStacktrace("DoFatalError")

	print(""..{}.."") --Cant concatenate tables. https://www.youtube.com/watch?v=rmQFcVR6vEs

	RemoveStacktrace()

end