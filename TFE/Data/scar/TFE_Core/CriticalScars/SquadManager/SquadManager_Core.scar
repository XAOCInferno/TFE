import("TFE_Core/CriticalScars/SquadManager/Imports/SquadManager_Imports.scar")

local AsyncSquadManagerObject = nil;

---------------
--Main Script--
---------------
function Setup_SquadManager()
	
	AddStacktrace("Setup_SquadManager")

	AsyncSquadManagerObject = AsyncSquadManager:new()

	--Set_AllSquads_Immediate()

	RemoveStacktrace()

end

function RemoveSquadInDataAtIndex(_PlayerIndex, _ItemIndex)

	AddStacktrace("RemoveSquadInDataAtIndex")

	--Remove the item from data before deconstructing so that async operations do not access it at this point [tentative fix]
	local squadDataToDeconstruct = g_AllSquadsData[_PlayerIndex][_ItemIndex]	
	table.remove(g_AllSquadsData[_PlayerIndex], _ItemIndex)
	squadDataToDeconstruct:Deconstruct()

	RemoveStacktrace()

end

function Set_AllSquads_Async()

	AddStacktrace("Set_AllSquads_Async")

	AsyncSquadManagerObject:Update()

	RemoveStacktrace()

end

function Set_AllSquads_Immediate()
	
	AddStacktrace("Set_AllSquads_Immediate")

	for i = 1, g_PlayerCount do
		
		Set_PlayerSquads_Immediate(i)
		
	end

	RemoveStacktrace()

end

function HandleNewGameSquad(_PlayerIndex, _sgroupid, _itemindex, _squadID)

	AddStacktrace("HandleNewGameSquad")
		

	if(pcall(Squad_GetGameID, _squadID)) then

		local criticalError = false
		local newSquadGameID = Squad_GetGameID(_squadID)
		local squadBP = Squad_GetBlueprintName( _squadID )	

		local shouldIgnore, _ = TableContains(g_SquadBlueprintToIgnore, squadBP)
		
		if(shouldIgnore == true) then 
			
			criticalError = true

		else

			if(squadBP ~= nil) then
			
				for l = 1, TableLength(g_AllSquadsData[_PlayerIndex]) do
					
					if(g_AllSquadsData[_PlayerIndex][l] == nil) then

						--Squad is null so simply remove
						table.remove(g_AllSquadsData[_PlayerIndex], l)	

					elseif(g_AllSquadsData[_PlayerIndex][l].SquadUniqueID == newSquadGameID) then

						--Squad is already in data so we don't need to track it
						criticalError = true
						break

					--A squad which we've previously had data on has now been detached, reassign their data to them.
					elseif(g_AllSquadsData[_PlayerIndex][l].SquadIsAttached and SGroup_ContainsSquad(g_AllSquadsData[_PlayerIndex][l].SquadGroupID, _squadID)) then

						--TODO: Ensure detached commanders upkeep is reset correctly			
						
						
						--Firstly, correct the now changed SquadID and GameID. GameID may not have changed (this appears to be constant) but SquadID most certainly has
						g_AllSquadsData[_PlayerIndex][l]:ReaffirmConstants()

						--New squad data to reset tracking
						local copy = g_AllSquadsData[_PlayerIndex][l]:CreateTotalCopy()

						Log(eLOG_TYPE_INFO, eLOG_SIMPLE, copy.SquadBlueprint.." has detached, adding special tracking to it")

						--Squad has previously attached, so we need to add reaffirm tracking to it and get which squad it probably attached to
						copy.SquadHasAttached = true	

						--[[TODO: We need to refactor the attach / unattach system. It doesn't really work...]]
						if(copy.History == nil) then

							--TODO: We need to fix this history part to take history from detached squad
							--TODO: Something weird happens when a squad is attached then detached, the squad will not correctly remove its data from the attached or visa versa. Tracking stops when 1 dies
							--TODO: When killing the detached hero first this seems to break tracking no idea why..........
							
							copy.History = FixedLengthTable:new(g_MaximumHistories, SquadDataHistory:new(-1, nil))
							Log(eLOG_LOG_TYPE_ERROR, eLOG_SIMPLE, "The last detached cmdr has NO History, this should not happen and we need to find a solution. Assigning a default history to it as a workaround.")

						end

						if(copy.SquadAttachedTo ~= nil) then

							copy.SquadDetachedFrom = copy.SquadAttachedTo

							--Update the attached to squad loadout by -1 so that we don't acidentally award a kill for this detach
							copy.SquadAttachedTo.PreviousSquadLoadout = copy.SquadAttachedTo.PreviousSquadLoadout - 1
							--copy.History = copy.SquadAttachedTo.History

							--Clearup attach data on the previously attached squad
							copy.SquadAttachedTo.SquadHasBeenAttachedTo = false
							copy.SquadAttachedTo.SquadHasAttachedToThis = nil

							copy.SquadAttachedTo = nil

						else

							Log(eLOG_LOG_TYPE_WARNING, eLOG_SIMPLE, copy.SquadBlueprint.." has detached, but we don't know who they were previously attached to. Assigning new sGroup.")

							copy.SquadGroupID = GetUniqueSG("SquadData_"..copy.SquadBlueprint)
							SGroup_Add(copy.SquadGroupID, copy.SquadID)				
							copy.SquadGroupName = SGroup_GetName(copy.SquadGroupID)

						end

						--Overwrite previous data
						RemoveSquadInDataAtIndex(_PlayerIndex, l)
						table.insert(g_AllSquadsData[_PlayerIndex], copy)					

						--Break with "error" so we don't try to create a new squad for this guy
						criticalError = true
						break

					end

				end

			else

				LogOnce(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Can't add squad data, BP is nil!")
				criticalError = true
			
			end

		end	

		if(criticalError == false) then
		
			--Need to probably move the relic units table to a global place
			local isRelicUnit, _ = TableContains({"chaos_squad_bloodthirster", "dark_eldar_squad_dais_of_destruction", "eldar_squad_avatar", "guard_squad_baneblade", "inquisition_squad_land_raider_crusader", "necron_restored_monolith_squad", "ork_squad_squiggoth", "sisters_squad_living_saint", "space_marine_squad_land_raider", "space_marine_squad_land_raider_veteran", "tau_krootox_squad", "tyranids_squad_swarmlord"},squadBP)
			
			--Get this squads idle state behaviour or default to no idle state if none is found
			local idleState = g_SquadIdleBehaviours[squadBP] or { Behaviour = eIDLE_STATE_BEHAVIOUR_NONE }
			
			--Might need to create a unique sgroupid later...
			local tmpData = SquadData:new( newSquadGameID, false, _itemindex, _squadID, g_AllPlayers[_PlayerIndex].RaceDetails.RaceName, squadBP, g_AllPlayers[_PlayerIndex], isRelicUnit, idleState)
			table.insert(g_AllSquadsData[_PlayerIndex], tmpData)	
	
		end

	else

		print("SQUAD DOES NOT EXIST")

	end
	
	

	RemoveStacktrace()

end

function Set_PlayerSquads_Immediate(_PlayerIndex)	

	AddStacktrace("Set_PlayerSquads_Immediate")
	
	--We should only run the squad checker if the player is alive
	if (Player_IsAlive(g_AllPlayers[_PlayerIndex].Player)) then

		EarlyUpdate_ExistingSquadDetails()
		Update_ExistingSquadDetails()	
		LateUpdate_ExistingSquadDetails()	

		local squadArr = {}
		local function AddSquadToArr(_sgroupid, _itemindex, _squadID)

			table.insert(squadArr, { SGroupID = _sgroupid, ItemIndex = _itemindex, SquadID = _squadID } )

		end

		SGroup_ForEachEx(Player_GetSquads(g_AllPlayers[_PlayerIndex].Player), AddSquadToArr, true, false)				
		
		for i = 1, TableLength(squadArr) do

			HandleNewGameSquad(_PlayerIndex, squadArr[i].SGroupID, squadArr[i].ItemIndex, squadArr[i].SquadID)

		end

		for k = 1, TableLength(g_AllSquadsData[_PlayerIndex]) do

			if(g_AllSquadsData[_PlayerIndex][k] ~= nil) then
				
				local shouldIgnore, _ = TableContains(g_SquadBlueprintToIgnore, g_AllSquadsData[_PlayerIndex][k].SquadBlueprint)

				if(g_AllSquadsData[_PlayerIndex][k].SquadBlueprint == nil or g_AllSquadsData[_PlayerIndex][k].SquadLoadout == 0 or shouldIgnore) then

					RemoveSquadInDataAtIndex(_PlayerIndex, k)
					
				end

			end

		end
			
		g_PlayerSquadCount[_PlayerIndex] = Player_GetActiveSquadCount(g_AllPlayers[_PlayerIndex].Player)

	end

	RemoveStacktrace()

end

function EarlyUpdate_ExistingSquadDetails()

	AddStacktrace("EarlyUpdate_ExistingSquadDetails")

	LateUpdate_ExistingSquadDetails()

	RemoveStacktrace()

end

function LateUpdate_ExistingSquadDetails()

	AddStacktrace("LateUpdate_ExistingSquadDetails")

	for i = 1, g_PlayerCount do

		for j = 1, TableLength(g_AllSquadsData[i]) do
			
			if(g_AllSquadsData[i][j] ~= nil) then

				for k = 1, TableLength(g_AllSquadsData[i][j].PreviouslyAttackedBySquads) do

					if(g_AllSquadsData[i][j].PreviouslyAttackedBySquads[k] ~= nil) then

						if(g_AllSquadsData[i][j].PreviouslyAttackedBySquads[k].__index == nil) then

							table.remove(g_AllSquadsData[i][j].PreviouslyAttackedBySquads, k)

						end

					end

				end

			end

		end

	end

	RemoveStacktrace()

end

function Update_ExistingSquadDetails()

	AddStacktrace("Update_ExistingSquadDetails")

	for i = 1, g_PlayerCount do

		for l = 1, TableLength(g_AllSquadsData[i]) do

			Update_SingleSquad(i, l)

		end	

	end

	RemoveStacktrace()

end

function GetSquadCountOfPlayerInData(_PlayerIndex)

	return TableLength(g_AllSquadsData[_PlayerIndex])

end

function HasSquadOfIndexInData(PlayerIndex, SquadIndex) 

	AddStacktrace("HasSquadOfIndexInData")

	local success = true

	if(TableLength(g_AllSquadsData) < PlayerIndex) then
		
		success = false

	elseif(TableLength(g_AllSquadsData[PlayerIndex]) < SquadIndex) then

		success = false

	end

	RemoveStacktrace()

	return success

end

function Update_SingleSquad(PlayerIndex, SquadIndex)

	AddStacktrace("Update_SingleSquad")
	
	local success = true

	--Ensure the squad is in range
	if(HasSquadOfIndexInData(PlayerIndex, SquadIndex)) then

		--Simple check to avoid null ref
		if(g_AllSquadsData[PlayerIndex][SquadIndex] == nil) then

			table.remove(g_AllSquadsData[PlayerIndex], SquadIndex)	

		--Squad has been lost since our last check, so we need to check if the squad is attached or dead.
		elseif(Squad_Exists(g_AllSquadsData[PlayerIndex][SquadIndex].SquadUniqueID) == false ) then
			
			--SGroup persists after squad is attached, but SGroup loadout is 0 so squad is dead confirmed
			if(SGroup_CountSpawned( g_AllSquadsData[PlayerIndex][SquadIndex].SquadGroupID ) <= 0) then

				Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "REMOVING SQUAD: "..g_AllSquadsData[PlayerIndex][SquadIndex].SquadGroupName.." as they have no models.")
				Set_SquadCombatDetails(g_AllSquadsData[PlayerIndex][SquadIndex], true)	
				g_AllSquadsData[PlayerIndex][SquadIndex].SquadHasPreviouslyExisted = true

				RemoveSquadInDataAtIndex(PlayerIndex, SquadIndex)

			--SGroup loadout is > 0 so squad is still alive but attached
			elseif(g_AllSquadsData[PlayerIndex][SquadIndex].SquadIsAttached == false) then
			
				Log(eLOG_TYPE_INFO, eLOG_SIMPLE, g_AllSquadsData[PlayerIndex][SquadIndex].SquadGroupName.." has attached")

				g_AllSquadsData[PlayerIndex][SquadIndex].SquadIsAttached = true
				g_AllSquadsData[PlayerIndex][SquadIndex].SquadHasAttached = true	

				--Now that we've attached, must reaffirm SquadID
				g_AllSquadsData[PlayerIndex][SquadIndex]:ReaffirmConstants()

				--Assign the Squad we're attached as the nearest squad, weird assumption but works
				g_AllSquadsData[PlayerIndex][SquadIndex].SquadAttachedTo = GetClosestSquadToPos(PlayerIndex, g_AllSquadsData[PlayerIndex][SquadIndex].SquadPosition, 50, { g_AllSquadsData[PlayerIndex][SquadIndex].SquadID })

				--[[TODO: Get what happens with null attached squad here, something to do with possessed attachable heroes?]]
				if(g_AllSquadsData[PlayerIndex][SquadIndex].SquadAttachedTo ~= nil) then

					Log(eLOG_TYPE_INFO, eLOG_SIMPLE, g_AllSquadsData[PlayerIndex][SquadIndex].SquadGroupName.." has attached to "..g_AllSquadsData[PlayerIndex][SquadIndex].SquadAttachedTo.SquadGroupName..".")

					g_AllSquadsData[PlayerIndex][SquadIndex].SquadAttachedTo.SquadHasBeenAttachedTo = true
					g_AllSquadsData[PlayerIndex][SquadIndex].SquadAttachedTo.SquadHasAttachedToThis = g_AllSquadsData[PlayerIndex][SquadIndex]

				else
					
					Log(eLOG_LOG_TYPE_WARNING, eLOG_SIMPLE, g_AllSquadsData[PlayerIndex][SquadIndex].SquadBlueprint.." has attached, but we don't know who they attached to.")

				end
				
			end

		--Squad exists and has more than 0 members so let's update their squad details.
		else	
						
			g_AllSquadsData[PlayerIndex][SquadIndex]:Update()
			Set_SquadCombatDetails(g_AllSquadsData[PlayerIndex][SquadIndex], false)		

			--Squad exists but now has 0 members. At 0 members the squad is destroyed so this likely will never happen. If log isn't ever observed, delete this.
			if(g_AllSquadsData[PlayerIndex][SquadIndex].SquadLoadout == 0 and g_AllSquadsData[PlayerIndex][SquadIndex].SquadHasPreviouslyExisted == true) then

				Log(eLOG_TYPE_INFO, eLOG_FULL, "Squad has been destroyed but squad still exists?")	
				Set_SquadCombatDetails(g_AllSquadsData[PlayerIndex][SquadIndex], true)		
				
				RemoveSquadInDataAtIndex(PlayerIndex, SquadIndex)

			else

				--Squad is alive and we update their combat status to look for dead members etc
				Set_SquadCombatDetails(g_AllSquadsData[PlayerIndex][SquadIndex], false)

			end

		end
	else

		success = false

	end

	RemoveStacktrace()

	return success

end

function CheckForSquadLosses(SquadStruct)

	AddStacktrace("CheckForSquadLosses")

	local Losses = 0
	local LeaderLosses = 0

	SquadStruct:CheckForDetachAndUpdateLoadout()

	--We don't want to check for losses if attached, as can only have 1 attached model
	if(SquadStruct.SquadHasAttached == false) then

		if(SquadStruct.PreviousSquadLoadout > SquadStruct.SquadLoadout) then

			Losses = SquadStruct.PreviousSquadLoadout - SquadStruct.SquadLoadout

		end
		
		if(SquadStruct.PreviousSquadLeaderCount > SquadStruct.SquadLeaderCount) then

			LeaderLosses = SquadStruct.PreviousSquadLeaderCount - SquadStruct.SquadLeaderCount

		end

		SquadStruct.PreviousSquadLoadout = SquadStruct.SquadLoadout
		SquadStruct.PreviousSquadLeaderCount = SquadStruct.SquadLeaderCount

	end

	RemoveStacktrace()

	return Losses, LeaderLosses

end

--Use 1 or 0 for SquadDead with 0 being false and 1 being true
function UpdateSquadCombatDeathResources(_DefenderSquadStruct, _RedReceiverPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

	AddStacktrace("UpdateSquadCombatDeathResources")

	local TotalRed = 0
	TotalRed = TotalRed + (0.5 * _ModelLosses)
	TotalRed = TotalRed + (1.5 * _LeaderLosses)
	TotalRed = TotalRed + (3 * _SquadDead)
	TotalRed = TotalRed + (3 * _CommanderLosses)
	TotalRed = TotalRed * g_RedGainMultiplier

	_RedReceiverPlayer.CurrentResources.RT_Red = _RedReceiverPlayer.CurrentResources.RT_Red + TotalRed	
	_DefenderPlayer.CurrentResources.RT_Red = _DefenderPlayer.CurrentResources.RT_Red + (TotalRed * 0.5)	

	--Debug	
	--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player ".._RedReceiverPlayer.PlayerIndex.." current Red = ".._RedReceiverPlayer.CurrentResources.RT_Red)
	--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player ".._DefenderPlayer.PlayerIndex.." current Red = ".._DefenderPlayer.CurrentResources.RT_Red)

	RemoveStacktrace()

end

--Use 1 or 0 for SquadDead with 0 being false and 1 being true
function UpdateSquadCombatDeathStats( _DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

	AddStacktrace("UpdateSquadCombatDeathStats")

	if(_AttackerPlayer ~= nil) then

		_AttackerPlayer.StatsManager:AddKills( _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead, _DefenderSquadStruct)

	end
	
	if(_DefenderPlayer ~= nil) then

		_DefenderPlayer.StatsManager:AddLosses( _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead )

	end

	RemoveStacktrace()

end

function SquadSetLastCombats(_DefenderSquadStruct, _AttackerPlayer)

	for i = 1, g_PlayerSquadCount[_AttackerPlayer.PlayerIndex + 1] do

		local EnemySquad = g_AllSquadsData[_AttackerPlayer.PlayerIndex + 1][i]

		if(EnemySquad ~= nil) then

			if(SGroup_WasAttacked(_DefenderSquadStruct.SquadGroupID, EnemySquad.SquadGroupID)) then

				if(EnemySquad.SquadBlueprint == "tau_firesight_marksmen_squad") then

					EnemySquad.OwnerPlayer.TauFiresightVisionCircle:SetTargetSquad(_DefenderSquadStruct)

				end

				EnemySquad.PreviouslyAttackingTime = g_WorldTime

				local contains, _  = TableContains(_DefenderSquadStruct.PreviouslyAttackedBySquads, EnemySquad)

				if(contains == false) then

					table.insert(_DefenderSquadStruct.PreviouslyAttackedBySquads, EnemySquad)

				end
				
			end
			
		end

	end

end

function UpdateSquadCombatDeath(_DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

	UpdateSquadCombatDeathResources(_DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 
	UpdateSquadCombatDeathStats(_DefenderSquadStruct, _AttackerPlayer, _DefenderPlayer, _ModelLosses, _LeaderLosses, _CommanderLosses, _SquadDead ) 

end

function Get_SquadLosses(_SquadStruct)

	--We don't need to add Stacktrace here as simple getter
	return _SquadStruct.PreviousSquadLoadout - _SquadStruct.SquadLoadout, _SquadStruct.SquadLeaderCount - _SquadStruct.PreviousSquadLeaderCount

end

--[[
	TODO!!!
	I am concerned this may be applying multiple times due to multiple players being the aggressor
	Please test in multiplayer to be certain
	If so will require a small change to how we apply red and stats
]]
function Set_SquadCombatDetails(_SquadStruct, _IsDead)
	
	AddStacktrace("Set_SquadCombatDetails")

	local ModelLosses = 0
	local LeaderLosses = 0
	local CommanderLosses = 0 --Functionality to be added
	local SquadDeath = 0

	--Squad is dead. Time to give big reward to killers...
	if(_IsDead) then

		local AttackerPlayerLength = table.getn(_SquadStruct.PreviouslyAttackedByPlayers) or 0

		if(AttackerPlayerLength == 0) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No players have fought this squad, so who killed it?")	
			
		else

			for i = 1, AttackerPlayerLength do

				ModelLosses, LeaderLosses = Get_SquadLosses(_SquadStruct)
				ModelLosses = ModelLosses + LeaderLosses
				ModelLosses = math.max(ModelLosses, 1) --Should we fix CheckForSquadLosses instead of this?
				
				Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Squad destroyed! Adding large Red for Player ".._SquadStruct.PreviouslyAttackedByPlayers[i].PlayerIndex..".")	
				UpdateSquadCombatDeath(_SquadStruct, _SquadStruct.PreviouslyAttackedByPlayers[i], _SquadStruct.OwnerPlayer, ModelLosses, LeaderLosses, CommanderLosses, 1)

			end

		end

	--Squad is still alive so we need to calculate who is fighting them
	elseif(Squad_IsUnderAttack(_SquadStruct.SquadID)) then
			
		local PlayersToRemove = {}
		for i = 1, g_PlayerCount do
			
			if(Squad_IsUnderAttackByPlayer(_SquadStruct.SquadID, g_AllPlayers[i].Player)) then
				
				local contains, _  = TableContains(_SquadStruct.PreviouslyAttackedByPlayers, g_AllPlayers[i])

				if(contains == false) then

					table.insert(_SquadStruct.PreviouslyAttackedByPlayers, g_AllPlayers[i])

				end				

				SquadSetLastCombats(_SquadStruct, g_AllPlayers[i])

				ModelLosses, LeaderLosses = CheckForSquadLosses(_SquadStruct)

				if(ModelLosses > 0 or LeaderLosses > 0) then

					Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Adding Red for Player "..g_AllPlayers[i].PlayerIndex..".")		

					UpdateSquadCombatDeath(_SquadStruct, g_AllPlayers[i], _SquadStruct.OwnerPlayer, ModelLosses, LeaderLosses, CommanderLosses, 0)								
	
				end	
			
			else

				--We don't know who attacked? we should calculate a player here based on distance perhaps, or just assign to assassin who is only one we know can do this.
				table.insert(PlayersToRemove, g_AllPlayers[i])

			end			

		end

		_SquadStruct.PreviouslyAttackedByPlayers = TableRemoveDuplicates(_SquadStruct.PreviouslyAttackedByPlayers, PlayersToRemove)

	--It's been quite a long time since we've been in a fight so we shouldn't remember last fighting players, especially as we can be scuttled.
	elseif(GetWorldLifetime(_SquadStruct.PreviouslyAttackedTime) > g_CombatTimeWindow) then
		
		_SquadStruct.PreviouslyAttackedByPlayers = {}

	end

	RemoveStacktrace()

end

function GetAllSelectedSquads()
	
	AddStacktrace("GetAllSelectedSquads")

	local allSelectedSquads = {}

	for playerIndex = 1, g_AllSquadsData do

		for squadIndex = 1, g_AllSquadsData[playerIndex] do

			if(g_AllSquadsData[playerIndex][squadIndex].IsSelected == true) then

				table.insert(allSelectedSquads, g_AllSquadsData[playerIndex][squadIndex])

			end

		end

	end

	RemoveStacktrace()

	return allSelectedSquads
	
end

function GetIfSquadSelected(_DesiredSquad)

	AddStacktrace("GetIfSquadSelected")

	local AllSelectedSquads = GetAllSelectedSquads()
	local contains, _ = TableContains(AllSelectedSquads, _DesiredSquad)

	RemoveStacktrace()

	return contains
end

--Use for AoE 
function GetAllSquadsInArea_NonPlayerSpecific(_pos, _proximity)
	
	AddStacktrace("GetAllSquadsInArea_NonPlayerSpecific")	
	
	local SquadsInRange = {}

	for z = 1, g_PlayerCount do

		for i = 1, g_PlayerSquadCount[z] do
			
			if(g_AllSquadsData[z][i] ~= nil) then
				
				if(World_DistancePointToPoint(_pos, g_AllSquadsData[z][i].SquadPosition) <= _proximity) then

					--Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[z][i].SquadBlueprint.." Is in range.")	
					table.insert(SquadsInRange, g_AllSquadsData[z][i])

				end

			end

		end

	end

	RemoveStacktrace()

	return SquadsInRange

end

--Use for AoE 
function GetAllSquadsInArea(_player, _pos, _proximity)
	
	AddStacktrace("GetAllSquadsInArea")	

	local SquadsInRange = {}

	for i = 1, g_PlayerSquadCount[_player] do

		if(g_AllSquadsData[_player][i] ~= nil) then

			if(World_DistancePointToPoint(_pos, g_AllSquadsData[_player][i].SquadPosition) <= _proximity) then

				Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[_player][i].SquadBlueprint.." Is in range.")	
				table.insert(SquadsInRange, g_AllSquadsData[_player][i])

			end

		end

	end

	RemoveStacktrace()

	return SquadsInRange

end

--Use for AoE 
function GetAllSquadsInAreaFromPlayerTable(_players, _pos, _proximity)
	
	AddStacktrace("GetAllSquadsInAreaFromPlayerTable")

	local SquadsInRange = {}

	for j = 1, TableLength(_players) do

		for i = 1, g_PlayerSquadCount[j] do

			if(World_DistancePointToPoint(_pos, g_AllSquadsData[j][i].SquadPosition) <= _proximity) then

				Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[j][i].SquadBlueprint.." Is in range.")	
				table.insert(SquadsInRange, g_AllSquadsData[j][i])

			end

		end

	end

	RemoveStacktrace()

end

--Use for single target
function GetClosestSquadToPos(_player, _pos, _maxDistance, _IgnoreSquadIDs)

	AddStacktrace("GetClosestSquadToPos")

	_IgnoreSquadIDs = _IgnoreSquadIDs or {}

	if(g_PlayerSquadCount[_player] == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are near that position as player has no squads.")
	
	else

		ClosestSquad = nil
		ShortestDistance = 10000

		for i = 1, g_PlayerSquadCount[_player] do

			if(g_AllSquadsData[_player][i] ~= nil) then

				if(TableContains(_IgnoreSquadIDs,g_AllSquadsData[_player][i].SquadID) == false ) then

					local DistanceToPoint = World_DistancePointToPoint(_pos, g_AllSquadsData[_player][i].SquadPosition)

					if(DistanceToPoint <= ShortestDistance and DistanceToPoint < _maxDistance) then

						--Log(eLOG_TYPE_INFO, eLOG_VERBOSE, g_AllSquadsData[_player][i].SquadBlueprint.." Is closer with distance of "..DistanceToPoint)
						ShortestDistance = DistanceToPoint
						ClosestSquad = g_AllSquadsData[_player][i]

					end

				end

			end

		end

		
		if(ClosestSquad == nil) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are in range of that position. You may need to increae the max distance.")

		else

			Log(eLOG_TYPE_INFO, eLOG_VERBOSE, ClosestSquad.SquadBlueprint.." Is closest with distance of "..ShortestDistance)

		end

	end

	RemoveStacktrace()

	return ClosestSquad 

end

--Use for single target in given group
--[[TODO: Duplicate of 'GetClosestSquadInList', consider refactoring into that func and carry over the max distance var]]
function GetClosestSquadInSquadTableToPos(_squads, _pos, _maxDistance)

	AddStacktrace("GetClosestSquadInSquadTableToPos")	

	local ClosestSquad = nil

	if(TableLength(_squads) ~= 0) then
	
		local ShortestDistance = 10000

		for i = 1, TableLength(_squads) do

			local point1 = World_Pos(_squads[i].SquadPosition.x, _squads[i].SquadPosition.y, _squads[i].SquadPosition.z )
			local point2 = World_Pos(_pos.x, _pos.y, _pos.z )
			local DistanceToPoint = World_DistancePointToPoint(point1, point2)

			if(DistanceToPoint <= ShortestDistance and DistanceToPoint < _maxDistance) then

				--We should probably remove this log as laggy + will spew info in the console for other players...
				Log(eLOG_TYPE_INFO, eLOG_VERBOSE, _squads[i].SquadBlueprint.." Is closer with distance of "..DistanceToPoint)
				ShortestDistance = DistanceToPoint
				ClosestSquad = _squads[i]

			end

		end

		if(ClosestSquad == nil) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are in range of that position. You may need to increase the max distance.")

		end

	else
		
		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads are near that position as provided squad table has no squads.")
		
	end

	RemoveStacktrace()

	return ClosestSquad 

end

function GetAllSquadsOfBlueprint(_player, _acceptedBlueprints)

	AddStacktrace("GetAllSquadsOfBlueprint")

	local AllSquadsOfBlueprint = {}

	for i = 1, TableLength(_acceptedBlueprints) do

		for j = 1, g_PlayerSquadCount[_player] do
			
			if(g_AllSquadsData[_player][j] ~= nil) then

				if(g_AllSquadsData[_player][j].SquadBlueprint == _acceptedBlueprints[i]) then

					table.insert(AllSquadsOfBlueprint, g_AllSquadsData[_player][j])

				end

			end

		end

	end

	if(TableLength(AllSquadsOfBlueprint) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified blueprint are owned by player.")

	end

	RemoveStacktrace()

	return AllSquadsOfBlueprint

end

function GetAllAttachedSquadsOfBlueprint(_player, _acceptedBlueprints)

	AddStacktrace("GetAllAttachedSquadsOfBlueprint")

	local AllSquadsOfBlueprint = {}

	for i = 1, TableLength(_acceptedBlueprints) do

		for j = 1, g_PlayerSquadCount[_player] do
			
			if(g_AllSquadsData[_player][j] ~= nil) then

				if(g_AllSquadsData[_player][j].SquadHasBeenAttachedTo == true) then

					print(g_AllSquadsData[_player][j].SquadHasAttachedToThis.SquadBlueprint)
					if(g_AllSquadsData[_player][j].SquadHasAttachedToThis.SquadBlueprint == _acceptedBlueprints[i]) then

						table.insert(AllSquadsOfBlueprint, g_AllSquadsData[_player][j].SquadHasAttachedToThis)

					end

				end

			end

		end

	end

	if(TableLength(AllSquadsOfBlueprint) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No attached squads of the specified blueprint are owned by player.")

	end

	RemoveStacktrace()

	return AllSquadsOfBlueprint

end

function GetRelicUnit(_player)

	AddStacktrace("GetRelicUnit")

	local RelicUnit = nil

	for j = 1, g_PlayerSquadCount[_player] do

		if(g_AllSquadsData[_player][j] ~= nil) then --We shouldn't need a nil check here...

			if(g_AllSquadsData[_player][j].IsRelicUnit) then
				
				RelicUnit = g_AllSquadsData[_player][j]
				break

			end

		end

	end

	RemoveStacktrace()

	return RelicUnit

end

function GetAllSquadsOfArmourType(_player, _acceptedArmourTypes)

	AddStacktrace("GetAllSquadsOfArmourType")

	local AllSquadsOfArmourType = {}

	for i = 1, TableLength(_acceptedArmourTypes) do

		for j = 1, g_PlayerSquadCount[_player] do

			if(Squad_HasArmourType(g_AllSquadsData[_player][j].SquadID, _acceptedArmourTypes[i])) then

				table.insert(AllSquadsOfArmourType, g_AllSquadsData[_player][j])

			end

		end

	end

	if(TableLength(AllSquadsOfArmourType) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified armour types exist.")

	end

	RemoveStacktrace()

	return AllSquadsOfArmourType

end

function GetAllSquadsOfArmourTypeFromSquadTable(_squads, _acceptedArmourTypes)

	AddStacktrace("GetAllSquadsOfArmourTypeFromSquadTable")

	if(TableLength(_squads) ~= 0) then

		local AllSquadsOfArmourType = {}

		for i = 1, TableLength(_acceptedArmourTypes) do

			for j = 1, TableLength(_squads) do

				if(Squad_HasArmourType(_squads[j].SquadID, _acceptedArmourTypes[i])) then

					table.insert(AllSquadsOfArmourType, _squads[j])

				end
				
			end

		end

		if(TableLength(AllSquadsOfArmourType) == 0) then

			Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified armour types exist.")

		end

	else

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "_squads table is nil.")
		return nil
	
	end

	RemoveStacktrace()

	return AllSquadsOfArmourType

end

function GetAllSquadsOfArmourTypeFromPlayerTable(_players, _acceptedArmourTypes, _allowAttached)

	AddStacktrace("GetAllSquadsOfArmourTypeFromPlayerTable")

	local AllSquadsOfArmourType = {}

	for i = 1, TableLength(_acceptedArmourTypes) do

		for p = 1, TableLength(_players) do

			local pIndex = _players[p].PlayerIndex+1
			--Continue from here, the max limit in this loop is wrong ofc lol..

			for j = 1, TableLength(g_AllSquadsData[pIndex]) do
				
				if(Squad_HasArmourType(g_AllSquadsData[pIndex][j].SquadID, _acceptedArmourTypes[i])) then
					
					if(_allowAttached == true or g_AllSquadsData[pIndex][j].SquadIsAttached == false) then

						table.insert(AllSquadsOfArmourType, g_AllSquadsData[pIndex][j])

					end
					
				end
				
			end

		end

	end

	if(TableLength(AllSquadsOfArmourType) == 0) then

		Log(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "No squads of the specified armour types exist.")

	end
	
	RemoveStacktrace()

	return AllSquadsOfArmourType

end

function GetAllAlliedRepairableSquadsInAoE(_Player, _Pos, _AoE)

	AddStacktrace("GetAllAlliedRepairableSquadsInAoE")	
	
	local allSquads = {}
	
	for i = 1, g_PlayerCount do

		if(_Player.PlayerIndex == g_AllPlayers[i].PlayerIndex or Player_IsAllied(_Player.Player, g_AllPlayers[i].Player)) then

			for j = 1, TableLength(g_AllSquadsData[i]) do

				local compareSquad = g_AllSquadsData[i][j]

				if(compareSquad ~= nil) then

					if(World_DistancePointToPoint(_Pos, compareSquad.SquadPosition) <= _AoE and compareSquad.SquadIsRepairable == true) then

						table.insert(allSquads, compareSquad)

					end

				end

			end

		end

	end

	RemoveStacktrace()

	return allSquads

end

function GetAllDamagedAlliedSquadsInAoE(_Player, _Pos, _AoE)

	AddStacktrace("GetAllDamagedAlliedSquadsInAoE")	

	local alliedSquads = GetAllAlliedRepairableSquadsInAoE(_Player, _Pos, _AoE)
	local allDamagedSquads = {}

	for i = 1, TableLength(alliedSquads) do

		if(alliedSquads[i].SquadAvgHealth < 1.0) then
			
			table.insert(allDamagedSquads, alliedSquads[i])

		end

	end

	RemoveStacktrace()

	return allDamagedSquads

end

function GetClosestSquadInList(_Pos, _Squads)

	AddStacktrace("GetClosestSquadInList")	
	
	local closestDist = 10000
	local closestSquad = nil

	for i = 1, TableLength(_Squads) do

		local newDist = World_DistancePointToPoint(_Pos, _Squads[i].SquadPosition)

		if(newDist < closestDist) then

			closestDist = newDist
			closestSquad = _Squads[i]

		end

	end

	RemoveStacktrace()
	
	return closestSquad

end

function MoveSquadToPositionInstantly(_Squad, _Pos, _FromGroundEffect, _FromModelEffect, _ToGroundEffect, _ToModelEffect)

	if(_Squad ~= nil) then

		--Play pre-teleport effects
		--Ground Only
		if(_FromGroundEffect ~= nil) then

			World_FXEvent( _FromGroundEffect, _Squad.SquadPosition )

		end

		--Each model
		if(_FromModelEffect ~= nil) then

			World_FXEventSquad( _FromModelEffect, _Squad.SquadGroupID )

		end

		--Despawn and respawn the squad at the location
		SGroup_DeSpawn(_Squad.SquadGroupName)
		SGroup_ReSpawnPosition(_Squad.SquadGroupName, _Pos)


		--Play post-teleport effects
		--Ground Only
		if(_ToGroundEffect ~= nil) then

			World_FXEvent( _ToGroundEffect, _Pos )

		end

		--Each model
		if(_ToModelEffect ~= nil) then

			World_FXEventSquad( _ToModelEffect, _Squad.SquadGroupID )

		end

	end

end