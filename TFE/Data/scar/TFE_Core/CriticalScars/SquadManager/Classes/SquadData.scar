eSQUAD_DELEGATES = {
    OnSquadCoverChanged = 0,
    OnSquadConstructed = 1,
    OnSquadDeConstructed = 2
}

SquadDataDelegateDefines = {}
SquadDataDelegateDefines[eSQUAD_DELEGATES.OnSquadCoverChanged] = {
    sID = 0,
    oldCover = CT_None,
    newCover = CT_None
}

SquadDataDelegateDefines[eSQUAD_DELEGATES.OnSquadConstructed] = {
    sID = 0
}
SquadDataDelegateDefines[eSQUAD_DELEGATES.OnSquadDeConstructed] = {
    sID = 0
}
SquadDataDelegates = {}
SquadDataDelegates[eSQUAD_DELEGATES.OnSquadCoverChanged] = Delegate:new(
    SquadDataDelegateDefines[eSQUAD_DELEGATES.OnSquadCoverChanged])
SquadDataDelegates[eSQUAD_DELEGATES.OnSquadConstructed] = Delegate:new(
    SquadDataDelegateDefines[eSQUAD_DELEGATES.OnSquadConstructed])
SquadDataDelegates[eSQUAD_DELEGATES.OnSquadDeConstructed] = Delegate:new(
    SquadDataDelegateDefines[eSQUAD_DELEGATES.OnSquadDeConstructed])

SquadData = {}
function SquadData:new(_sGameID, _sGroupID, _sIndex, _sID, _sRace, _sBP, _player, _IsRelicUnit, _IdleState)

    AddStacktrace("SquadData:new")

    local tmpSGroupID = _sGroupID

    if (_sGroupID == false) then

        tmpSGroupID = GetUniqueSG("SquadData_" .. _sBP)
        SGroup_Add(tmpSGroupID, _sID)

    end

    local tmpSGroupName = SGroup_GetName(tmpSGroupID)
    local squadRepairable, _ = TableContains(g_AllRepairableSquads, _sBP)

    ---------------------------------------------------------------------------------------
    ----If adding any new attributes, ensure to update Create copy and Total Copy funcs----
    ---------------------------------------------------------------------------------------
    local SquadDataObject = {
        SquadUniqueID = _sGameID,
        SquadGroupID = tmpSGroupID,
        SquadGroupName = tmpSGroupName,
        SquadIndex = _sIndex,
        SquadID = _sID,
        SquadUnitRace = _sRace,
        SquadBlueprint = _sBP,
        IsRelicUnit = _IsRelicUnit,
        SquadLoadout = 0,
        SquadHasLeader = false,
        SquadLeaderCount = 0,
        SquadMultiLeaders = g_MultiSquadLeaders[_sRace][_sBP] or {},
        SquadMultiLeaderCount = 0,
        SquadInitTime = g_WorldTime,
        SquadPosition = World_Pos(0, 0, 0),
        SquadHasBeenAttachedTo = false,
        SquadHasAttachedToThis = nil,
        SquadHasAttached = false,
        SquadIsAttached = false,
        SquadAttachedTo = nil,
        SquadDetachedFrom = nil,
        SquadAvgHealth = 0,
        SquadAvgMorale = 0,
        SquadUpgradedWeapons = {},
        SquadValidWeapons = g_ValidSquadWeapons[_sRace][_sBP] or {},
        SquadActiveCommand = SQUADSTATEID_Idle,
        SquadCover = CT_None,
        SquadIsRepairable = squadRepairable,
        OwnedByPlayer = nil,
        OwnerPlayer = _player,
        IsSelected_Unsynced = false,
        IdleBehaviourController = nil,
        HasSynapseScore = g_SquadSynapseScore[_sBP] ~= nil,

        XP = XPManager:new(),

        -- Variables
        History = FixedLengthTable:new(g_MaximumHistories, SquadDataHistory:new(-1, nil)), -- A collection of timestamped squad states 
        NextHistoryTime = g_WorldTime + g_HistoryUpdateRate,
        IsUnderAttack = false,
        IsAttacking = false,
        IsMoving = false,
        PreviousSquadLoadout = 0, -- Squad_Count(_sID),
        PreviousSquadLeaderCount = 0, -- Squad_CountLeaders(_sID),
        PreviouslyAttackedByPlayers = {},
        PreviouslyAttackedTime = 0,
        PreviouslyAttackedBySquads = {},
        PreviouslyAttackingTime = 0,
        HasAppliedSynapseScore = false,
        HasAppliedSynapseLeaderScore = false,

        IdleState = _IdleState,
        IsIdle = false,
        HasPerformedIdleState = false,
        TimeSinceIdle = 0,
        IdleStartTime = 0,
        AppliedIdleModifiers = {}
    }

    self.__index = self

    local globalObject = setmetatable(SquadDataObject, self)

    RegisterClass(globalObject, "SquadData")

    globalObject:LateConstructor()

    RemoveStacktrace()

    return globalObject

end

function SquadData:LateConstructor()

    AddStacktrace("SquadData:LateConstructor")

    self.XP.LinkeeSQUAD_DELEGATES = self -- VERY MESSY! Change this later...
    self.SquadMultiLeaderCount = table.getn(self.SquadMultiLeaders)

    self:SetInitialWeaponData()
    self:SetWeaponLoadout()

    if (self.HasSynapseScore) then

        if (g_SquadSynapseScore[self.SquadBlueprint].SquadScore == 0) then

            self.HasSynapseScore = false

        end

    end

    SquadDataDelegates[eSQUAD_DELEGATES.OnSquadConstructed]:Fire({sID = self.SquadID --[[ID]] })

    RemoveStacktrace()

end

function SquadData:GetIfAlive()

    AddStacktrace("SquadData:GetIfExists")

    local alive = true

    if Squad_Exists(self.SquadUniqueID) == false then

        alive = false

    elseif Squad_Count(self.SquadID) + Squad_CountLeaders(self.SquadID) == 0 then

        alive = false

    end

    RemoveStacktrace()

    return alive

end

function SquadData:SetInitialWeaponData()

    for weapon in self.SquadValidWeapons do

        self.SquadUpgradedWeapons[weapon] = {
            Count = 0
        }

    end

end

function SquadData:SetWeaponLoadout()

    for weapon in self.SquadValidWeapons do

        self.SquadUpgradedWeapons[weapon].Count = Squad_WeaponCount(self.SquadID, self.SquadValidWeapons[weapon])

    end

end

function SquadData:ReaffirmConstants()

    local SetSquadDetails = function(_sgroupid, _itemindex, _squadID)

        self.SquadID = _squadID
        self.SquadIndex = _itemindex
        self.SquadUniqueID = Squad_GetGameID(_squadID)
        --[[We should probably not update the BP here as this changes when a squad attaches to the attachee squad]]
        -- self.SquadBlueprint = Squad_GetBlueprintName( _squadID )

    end

    SGroup_ForEach(self.SquadGroupID, SetSquadDetails)

end

function SquadData:GetUpToDateSquadID()

    return Squad_GetSquadFromGameID(self.SquadUniqueID)

end

function SquadData:CreateSnapshotOfCurrentState()

    return SquadDataSnapshot:new(self.SquadLoadout, self.SquadLeaderCount, self.SquadPosition, self.SquadIsAttached,
        self.OwnedByPlayer, self.IsSelected_Unsynced, self.SquadAvgHealth, self.SquadAvgMorale,
        self.SquadUpgradedWeapons, self.SquadActiveCommand, self.SquadCover)

end

function SquadData:CreateCopy()

    return SquadData:new(self.SquadUniqueID, self.SquadGroupID, self.SquadIndex, self.SquadID, self.SquadUnitRace,
        self.SquadBlueprint, self.OwnerPlayer, self.IsRelicUnit, self.IdleState)

end

function SquadData:CreateTotalCopy()

    -- Get new squad data entry based on current details
    local copy = self:CreateCopy()

    -- Manually add extra stats
    copy.History = self.History
    copy.PreviouslyAttackedByPlayers = self.PreviouslyAttackedByPlayers
    copy.PreviouslyAttackedTime = self.PreviouslyAttackedTime
    copy.PreviouslyAttackedBySquads = self.PreviouslyAttackedBySquads
    copy.IsUnderAttack = self.IsUnderAttack
    copy.SquadDetachedFrom = self.SquadDetachedFrom
    copy.SquadAttachedTo = self.SquadAttachedTo
    copy.SquadHasAttached = self.SquadHasAttached
    copy.SquadIsAttached = self.SquadIsAttached
    copy.SquadUpgradedWeapons = self.SquadUpgradedWeapons
    copy.SquadActiveCommand = self.SquadActiveCommand
    copy.IdleBehaviourController = self.IdleBehaviourController
    copy.IsMoving = self.IsMoving
    copy.HasAppliedSynapseScore = self.HasAppliedSynapseScore
    copy.HasAppliedSynapseLeaderScore = self.HasAppliedSynapseLeaderScore

    return copy

end

function SquadData:GoBackInTime(_TimeTravelAmmount)

    AddStacktrace("SquadData:GoBackInTime")

    Log(eLOG_TYPE_INFO, eLOG_SIMPLE, self.SquadBlueprint .. " attempting to go back in time.")

    World_FXEvent("data:Art/Events/races/necron/abilities/necron_AoE_time_travel_squad", self.SquadPosition)

    -- Get the nearest recorded history, if no history is provided we will need to handle it a different way
    local ClosestHistoryStateIndex = self:GetClosestHistoryIndexToDesired(_TimeTravelAmmount)

    -- I don't necessarily want a null check here, need to implement logic to create a proxy history if one isn't found
    if ClosestHistoryStateIndex ~= -1 then

        -- Convert the current state into the synced state then updates the game to the synced state
        self:SyncSquadDataStates(self.History.Data[ClosestHistoryStateIndex].State)
        self:SyncGameStateToDataState()

    end

    World_FXEvent("data:Art/Events/races/necron/abilities/necron_AoE_time_travel_squad", self.SquadPosition)

    RemoveStacktrace()

end

function SquadData:GetClosestHistoryIndexToDesired(_TimeTravelAmmount)

    AddStacktrace("SquadData:GetClosestHistoryIndexToDesired")

    local ClosestTimeToDesired = 10000
    local ClosestStateIndex = -1
    local DesiredGameTime = g_WorldTime - _TimeTravelAmmount

    for i = 1, self.History.MaximumTableEntries do

        if self.History.Data[i].Time ~= -1 then

            local TimeToDesired = self.History.Data[i].Time - DesiredGameTime

            if TimeToDesired == _TimeTravelAmmount then

                ClosestState = i
                break

            elseif TimeToDesired < ClosestTimeToDesired then

                ClosestStateIndex = i
                ClosestTimeToDesired = TimeToDesired

            end

        end

    end

    if self.SquadHasAttached then

        self:ReaffirmConstants()

    end

    RemoveStacktrace()

    return ClosestStateIndex

end

function SquadData:UpdateState()

    AddStacktrace("SquadData:UpdateState")

    local snapshotLastState = self:CreateSnapshotOfCurrentState()
    self:QueryStateFromGame()

    self.IsAttacking = GetWorldLifetime(self.PreviouslyAttackingTime) <= g_CombatTimeWindow
    self.IsMoving = World_DistancePointToPoint(self.SquadPosition, snapshotLastState.SquadPosition) ~= 0

    if (self.SquadCover ~= snapshotLastState.SquadCover) then

        SquadDataDelegates[eSQUAD_DELEGATES.OnSquadCoverChanged]:Fire({sID = self.SquadID --[[ID]] ,
                                                                       oldCover = snapshotLastState.SquadCover --[[old state]] ,
                                                                       newCover = self.SquadCover --[[new state]] })

    end

    -- Update history at set intervals
    --[[TODO: Index workaround, fix later]]
    if g_WorldTime >= self.NextHistoryTime and self.History.__index then

        self.History:Insert(SquadDataHistory:new(g_WorldTime, snapshotLastState))
        self.NextHistoryTime = self.NextHistoryTime + g_HistoryUpdateRate

    end

    snapshotLastState:Deconstruct()

    -- TODO: Cleanup "Synapse Score" can it be a new class? It's messy...
    if self.HasSynapseScore == true then

        if self.HasAppliedSynapseScore == false then

            self.HasAppliedSynapseScore = true
            self.OwnerPlayer:ApplySynapseScore(g_SquadSynapseScore[self.SquadBlueprint].SquadScore)

        end

        if self.HasAppliedSynapseLeaderScore == false then

            if self.SquadLeaderCount ~= 0 then

                self.HasAppliedSynapseLeaderScore = true
                self.OwnerPlayer:ApplySynapseScore(g_SquadSynapseScore[self.SquadBlueprint].SquadLeaderScore)

            end

        else

            if self.SquadLeaderCount == 0 then

                self.HasAppliedSynapseLeaderScore = false
                self.OwnerPlayer:UnApplySynapseScore(g_SquadSynapseScore[self.SquadBlueprint].SquadLeaderScore)

            end

        end

    end

    RemoveStacktrace()

end

function SquadData:QueryStateFromGame()

    AddStacktrace("SquadData:QueryStateFromGame")

    self.SquadLoadout = Squad_Count(self.SquadID)
    self.SquadHasLeader = Squad_HasLeader(self.SquadID)
    self.SquadLeaderCount = Squad_CountLeaders(self.SquadID)
    self.SquadPosition = Squad_GetPosition(self.SquadID)
    self.SquadIsAttached = Squad_IsAttached(self.SquadID)
    self.OwnedByPlayer = Squad_GetPlayerOwner(self.SquadID)
    self.IsSelected_Unsynced = Misc_IsSquadSelected(self.SquadID) -- Not online synced!
    self.SquadAvgHealth = SGroup_GetAvgHealth(self.SquadGroupName)
    self.SquadAvgMorale = SGroup_GetAvgMorale(self.SquadGroupName)
    self.SquadUpgradedWeapons = _sUpgradedWeapons
    self.SquadActiveCommand = Squad_GetActiveCommand(self.SquadID)
    self.SquadCover = Squad_GetCoverType(self.SquadID, 0)

    RemoveStacktrace()

end

function SquadData:Update()

    AddStacktrace("SquadData:Update")

    self:UpdateState()

    if self.IdleState.Behaviour ~= eIDLE_STATE_BEHAVIOUR_NONE then

        self:ManageIdleState()

    end

    RemoveStacktrace()

end

function SquadData:ManageIdleState()

    AddStacktrace("SquadData:ManageIdleState")

    local isIdle = (self.SquadActiveCommand == SQUADSTATEID_Idle) and (self.IsMoving == false) and
                       (self.IsAttacking == false) and (self.SquadIsAttached == false)

    if isIdle == true and self.IsIdle == false then

        -- Set to idle if we are not already set as idle
        self:SetIdleStateToActive()

    elseif isIdle == false and self.IsIdle == true then

        -- Set to not idle if we are already set as idle
        self:SetIdleStateToInactive()

    end

    -- If we've been idle for enough time, perform the idle behaviour
    self.TimeSinceIdle = GetWorldLifetime(self.IdleStartTime)

    if self.IsIdle then

        if self.HasPerformedIdleState == false then

            if self.TimeSinceIdle > self.IdleState.TimeMustBeIdleFor then

                self:DoIdleState()

            end

        elseif (self.IdleBehaviourController ~= nil) then

            self.IdleBehaviourController:UpdateEachTick()

        end

    end

    RemoveStacktrace()

end

function SquadData:DoIdleState()

    AddStacktrace("SquadData:DoIdleState")

    if self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_CANNIBALIZE then

        Command_Squad(self.OwnedByPlayer, self.SquadGroupID, SCMD_Cannibalize)

    elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_REPAIR then

        if (self.IdleBehaviourController == nil) then

            self.IdleBehaviourController = IdleRepair:new(self.OwnedByPlayer, self, nil, self.IdleState.Radius)

        end

        self.IdleBehaviourController:Update()

    elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_CONSTRUCT then

        if (self.IdleBehaviourController == nil) then

            self.IdleBehaviourController = IdleConstruct:new(self.OwnedByPlayer, self, nil, self.IdleState.Radius)

        end

        self.IdleBehaviourController:Update()

    elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_REPAIR_CONSTRUCT then

        if (self.IdleBehaviourController == nil) then

            self.IdleBehaviourController = IdleBuilder:new(self.OwnedByPlayer, self, self.IdleState.Radius,
                self.IdleState.Radius, false)

        end

        self.IdleBehaviourController:Update()

    elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_REPAIR_CONSTRUCT_CANNIBALIZE then

        if (self.IdleBehaviourController == nil) then

            self.IdleBehaviourController = IdleBuilder:new(self.OwnedByPlayer, self, self.IdleState.Radius,
                self.IdleState.Radius, true)

        end

        self.IdleBehaviourController:Update()

    elseif self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_WORSHIP_CHAOS then

        if (self.IdleBehaviourController == nil) then

            self.IdleBehaviourController = IdleSummmonEntity:new(self.OwnedByPlayer, self, nil,
                self.IdleState.EntityToSummon)

        end

        self.IdleBehaviourController:Update()

        Anim_PlaySquadAnim(self.SquadID, "sp_ritual")
        table.insert(self.AppliedIdleModifiers, Modifier_ApplyToSquad(gMod_DisableShooting, self.SquadID))
        table.insert(self.AppliedIdleModifiers, Modifier_ApplyToSquad(gMod_SightRadiusReduction60, self.SquadID))
        table.insert(self.AppliedIdleModifiers, Modifier_ApplyToSquad(gMod_KeenSightRadiusReduction60, self.SquadID))

    end

    self.HasPerformedIdleState = true

    RemoveStacktrace()

end

function SquadData:SetIdleStateToActive()

    AddStacktrace("SquadData:SetIdleStateToActive")

    -- Set that idle state is activated
    self.IsIdle = true
    self.IdleStartTime = g_WorldTime
    self.TimeSinceIdle = 0

    -- Trigger post-activation effects
    self:OnIdleActivate()

    RemoveStacktrace()

end

function SquadData:OnIdleActivate()

    AddStacktrace("SquadData:OnIdleActivate")

    RemoveStacktrace()

end

function SquadData:SetIdleStateToInactive()

    AddStacktrace("SquadData:SetIdleStateToInactive")

    -- Set we've ended idle
    self.IsIdle = false

    -- Activate post-idle effects
    self:OnIdleEnd()

    -- Set we've not performed the idle state
    self.HasPerformedIdleState = false

    RemoveStacktrace()

end

function SquadData:OnIdleEnd()

    AddStacktrace("SquadData:OnIdleEnd")

    if self.HasPerformedIdleState == true then

        if self.IdleState.Behaviour == eIDLE_STATE_BEHAVIOUR_WORSHIP_CHAOS then

            Anim_StopSquadAnim(self.SquadID, "sp_ritual")

        end

        if (self.IdleBehaviourController ~= nil) then

            self.IdleBehaviourController:Update()

        end

        for i = 1, table.getn(self.AppliedIdleModifiers) do

            pcall(Modifier_Remove, self.AppliedIdleModifiers[i])

        end

    end

    RemoveStacktrace()

end

function SquadData:SyncSquadDataStates(copyFromSnapshot)

    AddStacktrace("SquadData:SyncSquadDataStates")

    self.SquadLoadout = copyFromSnapshot.SquadLoadout
    self.SquadHasLeader = copyFromSnapshot.SquadHasLeader
    self.SquadLeaderCount = copyFromSnapshot.SquadLeaderCount
    self.SquadPosition = copyFromSnapshot.SquadPosition
    self.SquadIsAttached = copyFromSnapshot.SquadIsAttached
    self.OwnedByPlayer = copyFromSnapshot.OwnedByPlayer
    self.IsSelected_Unsynced = copyFromSnapshot.IsSelected_Unsynced -- Not online synced!
    self.SquadAvgHealth = copyFromSnapshot.SquadAvgHealth
    self.SquadAvgMorale = copyFromSnapshot.SquadAvgMorale
    self.SquadUpgradedWeapons = copyFromSnapshot.SquadUpgradedWeapons
    self.SquadActiveCommand = copyFromSnapshot.SquadActiveCommand

    RemoveStacktrace()

end

function SquadData:SyncGameStateToDataState()

    AddStacktrace("SquadData:SyncGameStateToDataState")

    -- Despawn and clear squad
    SGroup_DeSpawn(self.SquadGroupName)
    Squad_Destroy(self.SquadID)
    SGroup_Clear(self.SquadGroupID)

    -- Summon replacement squad at location with loadout
    self.SquadID = ActivateSummonSquadAbility(self.SquadBlueprint, self.OwnedByPlayer, self.SquadPosition,
        self.SquadLoadout)

    -- Setup new squad constants
    SGroup_Add(self.SquadGroupID, self.SquadID)
    self.SquadUniqueID = Squad_GetGameID(self.SquadID)

    for weapon in self.SquadValidWeapons do

        for i = 1, self.SquadUpgradedWeapons[weapon].Count do

            Squad_UpgradeWeapon(self.SquadID, self.SquadValidWeapons[weapon])

        end

    end

    -- Add leader if history had one
    if self.SquadHasLeader then

        if self.SquadMultiLeaderCount > 0 then

            for i = 1, self.SquadLeaderCount do

                -- Need to add functionality to record which types of Leader are in the squad, currently we pick at random
                Squad_AddLeaderAtIndex(self.SquadID, World_GetRand(1, self.SquadMultiLeaderCount))

            end

        else

            for i = 1, self.SquadLeaderCount do

                Squad_AddLeader(self.SquadID)

            end

        end

    end

    -- Set stats
    Squad_SetHealth(self.SquadID, self.SquadAvgHealth)
    Squad_SetMorale(self.SquadID, self.SquadAvgMorale)

    RemoveStacktrace()

end

function SquadData:CheckForDetachAndUpdateLoadout()

    AddStacktrace("SquadData:CheckForDetachAndUpdateLoadout")

    -- If we think we have been attched to, but no longer have an attached model, reduce the expected squad size by 1 to compensate for the detach 
    local isAttached = Squad_IsAttached(self.SquadID)
    if (self.SquadHasBeenAttachedTo and isAttached == false) then

        self.PreviousSquadLoadout = self.PreviousSquadLoadout - 1
        self.SquadHasBeenAttachedTo = false

    end

    RemoveStacktrace()

end

function SquadData:Deconstruct()

    AddStacktrace("SquadData:Deconstruct")

    if (self.HasAppliedSynapseScore) then

        self.OwnerPlayer:UnApplySynapseScore(g_SquadSynapseScore[self.SquadBlueprint].SquadScore)

    end

    if (self.HasAppliedSynapseLeaderScore) then

        self.OwnerPlayer:UnApplySynapseScore(g_SquadSynapseScore[self.SquadBlueprint].SquadLeaderScore)

    end

    -- Note we do not need to deconstruct the idle behaviour here as it handles itself
    self.XP:Deconstruct()

    --[[TODO: Workaround fix this later]]
    if (self.History.__index ~= nil) then

        self.History:Deconstruct()

    end

    SquadDataDelegates[eSQUAD_DELEGATES.OnSquadDeConstructed]:Fire({sID = self.SquadID --[[ID]] })

    RemoveStacktrace()

    DeconstructClass(self)

    self.__index = nil
    self = nil

end
