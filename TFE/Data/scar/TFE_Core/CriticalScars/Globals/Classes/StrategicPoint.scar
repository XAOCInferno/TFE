g_ListeningPostValidAddons = {"addon_sisters_holy_icon"} --Add the rest later

StrategicPoint = {}
function StrategicPoint:new (_ID, _OwnedBy, _InitTime)

	AddStacktrace("StrategicPoint:new")

    local StrategicPointObject = 
    {
	    ID = _ID,
	    OwnedBy = _OwnedBy,
	    InitTime = _InitTime,
        FullyMatured = false,
        HasListeningPost = false,
        ListeningPostAddonData = nil,
        EntityPosition = Entity_GetPosition(_ID)
    }
	
	self.__index = self

	local globalObject = setmetatable(StrategicPointObject, self)
	
	RegisterClass(StrategicPointObject, "StrategicPoint")
	
	RemoveStacktrace()
	
	return globalObject

end

function StrategicPoint:Update()

	AddStacktrace("StrategicPoint:Update")

    self:UpdateOwner()
    self:SetHasListeningPost()

    if(self.HasListeningPost) then

        self.ListeningPostAddonData:UpdateAddonsList()

    end
    
    RemoveStacktrace()

end

function StrategicPoint:UpdateOwner()

	AddStacktrace("StrategicPoint:UpdateOwner")

    if(not World_OwnsEntity(self.ID)) then
		
        local TmpOwner = Entity_GetPlayerOwner(self.ID)

        local OwnerPlayer = World_GetPlayerIndex(TmpOwner)

        if(self.OwnedBy ~= OwnerPlayer) then

            self.InitTime = g_WorldTime	
            self.OwnedBy = OwnerPlayer
            self.FullyMatured = false

        end

    elseif(self.OwnedBy ~= -1) then
        
        self.OwnedBy = -1
        self.InitTime = g_WorldTime
        self.FullyMatured = false

    end

    RemoveStacktrace()

end

function StrategicPoint:GetIfOwnershipChanged()

end

function StrategicPoint:GetHasListeningPost()

	AddStacktrace("StrategicPoint:GetHasListeningPost")
    
    local result = false

    if(Entity_StrategicPointHasStructure(self.ID)) then

        result = true
    
    end

    RemoveStacktrace()

    return result

end

function StrategicPoint:SetHasListeningPost()

	AddStacktrace("StrategicPoint:SetHasListeningPost")
    
    local newHasLP = self:GetHasListeningPost()

    if(self.HasListeningPost == true and newHasLP == false) then

        if(self.ListeningPostAddonData ~= nil) then
            
            self.ListeningPostAddonData:Deconstruct()
            self.ListeningPostAddonData = nil

        end

        self.HasListeningPost = false

    end

    if(newHasLP == true and self.HasListeningPost == false) then

        if(self.OwnedBy == -1) then
            
            self:UpdateOwner()

        end

        if(self.OwnedBy ~= -1) then
        
            local newLP = GetClosestLP(self.OwnedBy + 1, self.EntityPosition)

            if(newLP ~= nil) then

                self.HasListeningPost = true
                self.ListeningPostAddonData = EntityAddonManager:new(newLP, g_ListeningPostValidAddons)
                self.ListeningPostAddonData:LateConstructor()

            else

                Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "Cannot find LP although we have one!") 

            end

        else

            Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "We have LP but cannot find it as we don't know our owner!") 

        end

    end

    RemoveStacktrace()

end