g_ListeningPostValidAddons = {"addon_sisters_holy_icon"} --Add the rest later

StrategicPoint = {}
function StrategicPoint:new (_ID, _OwnedBy, _InitTime)

	AddStacktrace("StrategicPoint:new")

    local StrategicPointObject = 
    {
	    ID = _ID,
	    OwnedBy = _OwnedBy,
	    InitTime = _InitTime,
        FullyMatured = false,
        HasListeningPost = false,
        ListeningPostAddonData = nil,
        EntityPosition = Entity_GetPosition(_ID)
    }
	
	self.__index = self

	local globalObject = setmetatable(StrategicPointObject, self)
	
	RegisterClass(StrategicPointObject, "StrategicPoint")
	
	RemoveStacktrace()
	
	return globalObject

end

function StrategicPoint:Update()

	AddStacktrace("StrategicPoint:Update")

    self:UpdateOwner()
    self:SetListeningPostState()

    --Handle will check if we have LP, and that we have a valid LP
    if(self:HandleIsEntityAddonDataValid()) then

        self.ListeningPostAddonData:UpdateAddonsList()

    end
    
    RemoveStacktrace()

end

function StrategicPoint:UpdateOwner()

	AddStacktrace("StrategicPoint:UpdateOwner")

    if(not World_OwnsEntity(self.ID)) then
		
        local TmpOwner = Entity_GetPlayerOwner(self.ID)

        local OwnerPlayer = World_GetPlayerIndex(TmpOwner)

        if(self.OwnedBy ~= OwnerPlayer) then

            self.InitTime = g_WorldTime	
            self.OwnedBy = OwnerPlayer
            self.FullyMatured = false

        end

    elseif(self.OwnedBy ~= -1) then
        
        self.OwnedBy = -1
        self.InitTime = g_WorldTime
        self.FullyMatured = false

    end

    RemoveStacktrace()

end

--This is public facing
function StrategicPoint:GetHasListeningPost()

    return self:HandleIsEntityAddonDataValid()

end

--Only to be used internally, this is not public facing
function StrategicPoint:GetHasListeningPostInternal()

    return Entity_StrategicPointHasStructure(self.ID)

end

function StrategicPoint:SetListeningPostState()

	AddStacktrace("StrategicPoint:SetListeningPostState")    

    if(self:GetHasListeningPostInternal()) then
        
        self:SetHasGotListeningPost()

    else

        self:SetHasNotGotListeningPost()

    end    

    RemoveStacktrace()

end

--This function is called every update if the game tells us we have a listening post
--It will continue until LP has been found, otherwise it will early out at the first if statement 
function StrategicPoint:SetHasGotListeningPost()

	AddStacktrace("StrategicPoint:SetHasGotListeningPost")

    --Firstly check if the current LP has valid attached entity struct
    --The player can build an LP, lose it, and add a new one before this strategic point is updated
    --This will cause a crash due to invalid entity ID, so the bellow will check for that
    self:HandleIsEntityAddonDataValid()

    --Another "HasListeningPost" bool check as it can be set to false above
    if(self.HasListeningPost == false) then
        
        if(self.OwnedBy == -1) then
            
            self:UpdateOwner()

        end

        if(self.OwnedBy ~= -1) then
        
            local newLP = GetClosestLP(self.OwnedBy + 1, self.EntityPosition, 1)

            if(newLP ~= nil) then
                
                self.ListeningPostAddonData = EntityAddonManager:new(newLP, g_ListeningPostValidAddons)
                self.ListeningPostAddonData:LateConstructor()
                self.HasListeningPost = true

            else

                Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "Cannot find LP although we have one!") 

            end

        else

            Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "We have LP but cannot find it as we don't know our owner!") 

        end

    end

    RemoveStacktrace()

end

--This function is called every update if the game tells us we DON'T have a listening post
--It will early out if we don't have an LP in our data
function StrategicPoint:SetHasNotGotListeningPost()

	AddStacktrace("StrategicPoint:SetHasNotGotListeningPost")

    if(self.HasListeningPost == true) then

        self.HasListeningPost = false
            
        self.ListeningPostAddonData:Deconstruct()
        self.ListeningPostAddonData = nil

    end

    RemoveStacktrace()

end

--Gets if we have an LP and if that LP data is valid. Also handles if the struct is invalid
function StrategicPoint:HandleIsEntityAddonDataValid()
    
	AddStacktrace("StrategicPoint:HandleIsEntityAddonDataValid")

    local success = self.HasListeningPost

    if(success) then

        Check(self.ListeningPostAddonData)

        if(self.ListeningPostAddonData:GetIsAttachedToValidEntityStruct() == false) then
            
            --Our LP is invalid, so clear the broken data and act as if we don't have data so it can be added on next update
            self:SetHasNotGotListeningPost()
            success = false
            
        end

    end

    RemoveStacktrace()

    return success

end