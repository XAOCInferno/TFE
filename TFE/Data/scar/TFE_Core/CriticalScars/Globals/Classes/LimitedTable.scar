--[[
	Fixed length tables are unsorted 
	If maximum size is reached, insert will overflow and delete from index 0
	This is essentially a Queue
	Therefore consider usage carefully as data will be lost as FIFO based on order of insert not order of data
]]

FixedLengthTable = {}
function FixedLengthTable:new (_MaximumTableEntries, _DefaultDataEntry)

	AddStacktrace("FixedLengthTable:new")

    local FixedLengthTableObject = 
    {

		--Constants
		MaximumTableEntries = _MaximumTableEntries,

		--Variables
		Data = {},
		NextEntry = 1
		
	}

	for i = 1, _MaximumTableEntries do

		table.insert(FixedLengthTableObject.Data, _DefaultDataEntry)

	end

	self.__index = self

	local globalObject = setmetatable(FixedLengthTableObject, self)

	RegisterClass(globalObject, "FixedLengthTable")

	RemoveStacktrace()

	return globalObject

end 

function FixedLengthTable:Insert (_Object)

	AddStacktrace("FixedLengthTable:Insert")

	--Try and deconstruct a class that was inserted to this limited table before we overwrite it
	if(type(self.Data[self.NextEntry]) == "table") then

		if(self.Data[self.NextEntry].Deconstruct ~= nil) then
			
			self.Data[self.NextEntry]:Deconstruct()

		end

	end

	self.Data[self.NextEntry] = _Object
	
	self.NextEntry = math.mod(self.NextEntry, self.MaximumTableEntries) + 1

	RemoveStacktrace()

end 

function FixedLengthTable:GetFromIndex (_Index)

	AddStacktrace("FixedLengthTable:GetFromIndex")

	_Index = math.mod(_Index, self.MaximumTableEntries)

	RemoveStacktrace()

	return self.Data[self._Index]

end 

function FixedLengthTable:GetFromKey (_Key)

	return self.Data[_Key]

end 

function FixedLengthTable:Deconstruct()

	AddStacktrace("FixedLengthTable:Deconstruct")

	for i = 1, table.getn(self.Data) do

		if(self.Data[i].Deconstruct ~= nil) then

			self.Data[i]:Deconstruct()

		end

	end

	RemoveStacktrace()

	DeconstructClass(self)
	
	self.__index = nil
	self = nil

end