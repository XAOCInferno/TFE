--------------------
--Settings imports--
--------------------

import("TFE_Core/CriticalScars/Globals/Imports/Globals_Imports.scar")

--local GlobalUniqueSquadID = 0
local UsedUniqueGroupIDs = {}

---------------
--Main Script--
---------------
function Setup_GlobalsStorage()

	AddStacktrace("Setup_GlobalsStorage")

	Set_UpdatedGameTime()

	RemoveStacktrace()

end

function Set_UpdatedGameTime()

	AddStacktrace("Set_UpdatedGameTime")

	g_PreviousWorldTime = g_WorldTime
	g_WorldTime = World_GetGameTime()
	g_TimeSinceWorldTimeUpdate = g_WorldTime - g_PreviousWorldTime

	RemoveStacktrace()
	
end

function Setup_StrategicPoints()

	AddStacktrace("Setup_StrategicPoints")
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Starting: 'Setup_StrategicPoints'...")
	
	local SetupNewPoint = function(eEntityGroupID, i, eEntityID)
		
		table.insert( g_AllStrategicPointsStructs, StrategicPoint:new (eEntityID, -1, g_WorldTime) )
		g_NumberStratPoints = g_NumberStratPoints + 1

	end
	
	g_NumberStratPoints = 0
	World_GetStrategicPoints(EGroup_CreateIfNotFound( "tmpAllStratPoints" ) )
	EGroup_ForEachEx(EGroup_FromName("tmpAllStratPoints"),  SetupNewPoint, true, true)
	EGroup_Destroy("tmpAllStratPoints")
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE,  "Finished: 'Setup_StrategicPoints'!")

	RemoveStacktrace()

end


function Update_StrategicPoints()

	AddStacktrace("Update_StrategicPoints")
	
	for i = 1, g_NumberStratPoints do

		g_AllStrategicPointsStructs[i]:Update()

	end

	RemoveStacktrace()

end

function GetAllStrategicPointsOwnedByPlayer(_Player)

	AddStacktrace("GetAllStrategicPointsOwnedByPlayer")
	
	local AllOwnedStratPoints = {}
	for i = 1, TableLength(g_AllStrategicPointsStructs) do

		if(g_AllStrategicPointsStructs[i].OwnedBy == _Player.PlayerIndex) then

			table.insert(AllOwnedStratPoints, g_AllStrategicPointsStructs[i])

		end
	
	end

	RemoveStacktrace()

	return AllOwnedStratPoints

end

function GetNumberOfSpecificPlayerOwnedListeningPostAddons(_AddonName, _Player)

	AddStacktrace("GetNumberOfSpecificPlayerOwnedListeningPostAddons")

	local numberOfAddons = 0
	local playerOwnedStrategicPoints = GetAllStrategicPointsOwnedByPlayer(_Player)

	for i = 1, TableLength(playerOwnedStrategicPoints) do		

		if(playerOwnedStrategicPoints[i].HasListeningPost) then

			if(playerOwnedStrategicPoints.ListeningPostAddonData) then

				numberOfAddons = numberOfAddons + playerOwnedStrategicPoints.ListeningPostAddonData:GetAddonCount(_AddonName)

			end

		end

	end

	RemoveStacktrace()

	return numberOfAddons

end

--Used to tell the difference between a time and the world time, EG: get how long something has been alive for
function GetWorldLifetime(StartTime)

	--Simple Getter functions don't need StackTrace
	return g_WorldTime - StartTime

end

local function GetUniqueGroupInternal(BaseGroup, isSquadGroup)

	AddStacktrace("GetUniqueGroupInternal")

	--Get which internal function is used to check if this group exists
	local func = isSquadGroup and SGroup_Exists or EGroup_Exists

	--Get name either E for entity or S for squad
	local groupTypeAsString = isSquadGroup and "S" or "E"

	--If we haven't provided a base group name, then create a generic one
	BaseGName = BaseGroup or "Unique"..groupTypeAsString.."G"

	--If this is the first entry then add it to the data
	if(UsedUniqueGroupIDs[BaseGName] == nil) then

		UsedUniqueGroupIDs[BaseGName] = { NextIndex = 1 }

	end

	local UniqueG = ""
	local hasFoundUniqueGroupID = false
	--Our max group ID is 99,999 - this will not work correctly if we somehow exceed this number, although, I think the game would break first...
	for i = 1, 99999 do

		--Get the group then index by + 1, if we succeed here this indexed number will be used next time we have a duplicate entry
		UniqueG = BaseGName..GetTrailingGroupIDFromInt(UsedUniqueGroupIDs[BaseGName].NextIndex)
		UsedUniqueGroupIDs[BaseGName].NextIndex = UsedUniqueGroupIDs[BaseGName].NextIndex + 1 
		
		--Check if it exists, if so break out the loop
		local _, exists = pcall(func, UniqueG)
		if(exists == false) then

			hasFoundUniqueGroupID = true
			break

		end

	end

	if(hasFoundUniqueGroupID == false) then

		LogError("Could not find unique "..groupTypeAsString.."G for "..BaseGroup.." limit of 99999 somehow exceeded!")		

	end

	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Assigned Unique "..groupTypeAsString.."G: "..UniqueG)

	RemoveStacktrace()
	
	return UniqueG

end

--Do not simplify to 1 line as the stacktrace is useful for logging
function GetUniqueSG(BaseSGName)

	AddStacktrace("GetUniqueSG")
	
	local group = SGroup_Create(GetUniqueGroupInternal(BaseSGName, true))
	
	RemoveStacktrace()

	return group
	
end

--Do not simplify to 1 line as the stacktrace is useful for logging
function GetUniqueEG(BaseEGName)

	AddStacktrace("GetUniqueEG")
	
	local group = EGroup_Create(GetUniqueGroupInternal(BaseEGName, false))
	
	RemoveStacktrace()
	
	return group
	
end

--Will convert an int into ten-thousands format with leading zeros
--EG: 1 would be converted to 00001
function GetTrailingGroupIDFromInt(trailingInt)

	AddStacktrace("GetTrailingGroupIDFromInt")

	local trailingID = ""
	local length = math.floor(math.log10(trailingInt)+1)
	for i = length, 4 do

		trailingID = trailingID.."0"

	end

	trailingID = trailingID..trailingInt	

	RemoveStacktrace()

	return trailingID

end

--Previously used for random GroupIDs, depreciated
function Rdm_GetInts5()
	
	return World_GetRand(1,9), World_GetRand(1,9), World_GetRand(1,9), World_GetRand(1,9), World_GetRand(1,9) 
	
end
