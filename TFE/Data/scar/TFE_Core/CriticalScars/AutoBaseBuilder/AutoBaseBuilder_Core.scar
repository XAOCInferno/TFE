import("TFE_Core/CriticalScars/AutoBaseBuilder/Imports/AutoBaseBuilder_Imports.scar")

g_AllAutomaticBaseBuildingManagers = {}

--TODO: Generalise name of this
function TyranidsDebugActivateAutoConstructionAbility(_pos, _PlayerStruct, _structureEbps)

	--Assume fail as only 1 point of success in code
	local success = false

	--Create our squad/entity groups used to store the builder and the building
	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)

	--If user did not define a postion then default to player starting location
	if(_pos == nil) then
		
		Log(eLOG_LOG_TYPE_WARNING, eLOG_SIMPLE, "Autobuild targeted position is nil, this shouldn't happen. Defaulting to player start location.")
		_pos = _PlayerStruct.StartingPosition

	end

	--Convert the pos to a world pos so that the relic functions don't cry
	_pos = World_Pos(_pos.x,_pos.y,_pos.z)
	
	--Now, spawn our building in the players start location
	local building = Entity_Create( _structureEbps, _PlayerStruct.Player, _PlayerStruct.StartingPosition )

	--Check creating the building worked
	if(building ~= nil) then

		--Immediately despawn the building so it is not visible
		Entity_DeSpawn(building)

		--Add our building to the EGroup, we'll use this later
		EGroup_Add(UniqueBuildingEGroup, building)

		--Spawn in our dummy squad, this is done to prevent us from spawning in the Out of Bounds
		Util_CreateSquadsAtPositionRandom(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_dummy", _pos, 1)
		
		if(SGroup_Count(UniqueBuilderSGroup) == 0) then

			--If our dummy squad hasn't spawned then log warning and stop
			Log(eLOG_LOG_TYPE_WARNING, eLOG_SIMPLE, "Cannot build structure as dummy squad failed to spawn.")

		else

			--Get the position of the dummy. This will always be a valid position in the world as dummy is not a flyer
			_pos = SGroup_GetPosition(UniqueBuilderSGroup)

			--Now try get spawnable position from the dummy pos. This will likely not change the position
			_pos = World_GetSpawnablePosition(_pos, building)

			--We're done with the dummy, so clean it up
			SGroup_DestroyAllSquads(UniqueBuilderSGroupName)

			--Now spawn in our flying builder to get the job donee
			Util_CreateSquadsAtPositionRandom(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _PlayerStruct.StartingPosition, 1)

			if(SGroup_Count(UniqueBuilderSGroup) == 0) then

				--Our builder failed to spawn in, so log warning and stop
				Log(eLOG_LOG_TYPE_WARNING, eLOG_SIMPLE, "Cannot build structure as global builder failed to spawn.")

			else

				--We've done every pre-requisit step so mark this as a success
				success = true

				--Move our building to the safe position and spawn it into the world
				Entity_SetPosition(building, _pos)
				Entity_Spawn(building)

				--Reset construction to unconstructed
				Entity_ResetConstructionState(building)

				--Tell global builder to build the structure
				Command_SquadEntity( _PlayerStruct.Player, UniqueBuilderSGroup, SCMD_BuildStructure, UniqueBuildingEGroup )

				--TODO: Add tracking to the building / global builder which destroys the global builder after the building is started to be made
				--TODO: Merge global builder to the GlobalAbilities system, no reason for it to act differently

			end

		end

	else

		--Our building failed to spawn so log warning
		Log(eLOG_LOG_TYPE_WARNING, eLOG_SIMPLE, "Building entity failed to spawn.")

	end
	
	if(success == false) then

		SGroup_DestroyAllSquads(UniqueBuilderSGroupName)
		EGroup_DestroyAllEntities(UniqueBuildingEGroupName)

	end
	
	EGroup_Destroy(UniqueBuildingEGroupName)
	SGroup_Destroy(UniqueBuilderSGroupName)

	return success

end

--FML change this one later..
function TyranidsAutoConstructLP(_TargetPoint, _PlayerStruct)

	AddStacktrace("TyranidsAutoConstructLP")

	print("ATTEMPTING TO BUILD NIDS LP")
	local UniquePointEGroup = GetUniqueEG("tmpPointEGroup")
	local UniquePointEGroupName = EGroup_GetName(UniquePointEGroup)
	EGroup_Add(UniquePointEGroup, _TargetPoint.ID)

	local UniqueBuildingEGroup = GetUniqueEG("tmpBuildingEGroup")
	local UniqueBuilderSGroup = GetUniqueSG("tmpBuilderGroup")
	local UniqueBuildingEGroupName = EGroup_GetName(UniqueBuildingEGroup)
	local UniqueBuilderSGroupName =  SGroup_GetName(UniqueBuilderSGroup)

	_pos = Entity_GetPosition(_TargetPoint.ID)
	Util_CreateSquadsAtPositionRandom(_PlayerStruct.Player, UniqueBuilderSGroupName, "world_squad_global_builder", _pos, 1)

	Cmd_ConstructBlueprintOnEGroup(UniqueBuilderSGroupName, "tyranids_listening_post", UniquePointEGroupName)

	--table.insert(g_AllTrackedAbilityBuilders, GlobalAbilityBuilder:new( _PlayerStruct.Player, UniqueBuilderSGroup, UniqueBuilderSGroupName, UniqueBuildingEGroupName ))
	--g_AllTrackedAbilityBuildersCount = g_AllTrackedAbilityBuildersCount + 1

	RemoveStacktrace()

end

function Tyranids_GameSetup()

	AddStacktrace("Tyranids_GameSetup")
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Starting: 'Tyranids_GameSetup'...")
	
	for i = 1, g_PlayerCount do

		if(g_AllPlayers[i].RaceDetails.RaceName == "tyranids_race") then
			
			Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player: "..g_AllPlayers[i].PlayerIndex.."' is Tyranids, assigning them an AutomaticBaseBuildingManager.")
			local GauntStructure = { name = "tyranids_tech_gaunt", requiredAddon = "addon_tyranids_tech_gaunt", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local LictorStructure = { name = "tyranids_tech_lictor", requiredAddon = "addon_tyranids_tech_lictor", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local WarriorStructure = { name = "tyranids_tech_warrior", requiredAddon = "addon_tyranids_tech_warrior", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local RavenerStructure = { name = "tyranids_tech_ravener", requiredAddon = "addon_tyranids_tech_ravener", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 25 }
			local Tier2InfantryStructure = { name = "tyranids_tech_tier2_infantry", requiredAddon = "addon_tyranids_tech_tier2_infantry", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 35 }
			local GeneratorStructure = { name = "tyranids_generator", requiredAddon = "addon_tyranids_generator", numberPerAddon = 3, builtFromEntity = "tyranids_listening_post", distanceFromBuilding = 5 }
			local BasicVehiclesStructure = { name = "tyranids_tech_basic_vehicles", requiredAddon = "addon_tyranids_tech_basic_vehicles", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 45 }
			local AdvancedVehiclesStructure = { name = "tyranids_tech_advanced_vehicles", requiredAddon = "addon_tyranids_tech_advanced_vehicles", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 45 }
			local Tier4Structure = { name = "tyranids_tech_tier4", requiredAddon = "addon_tyranids_tech_tier4", numberPerAddon = 1, builtFromEntity = "tyranids_hq", distanceFromBuilding = 45 }
			local NewHQ = { name = "tyranids_hq", requiredAddon = "addon_tyranids_new_hq", numberPerAddon = 2, builtFromEntity = "tyranids_hq", distanceFromBuilding = 55 }
			local NidsBuildings = { GauntStructure, LictorStructure, WarriorStructure, RavenerStructure, Tier2InfantryStructure, GeneratorStructure, BasicVehiclesStructure, AdvancedVehiclesStructure, Tier4Structure, NewHQ }
			table.insert(g_AllAutomaticBaseBuildingManagers, AutomaticBaseBuildingManager:new(g_AllPlayers[i], NidsBuildings))

		else

			Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Player: "..g_AllPlayers[i].PlayerIndex.."' is not Tyranids.")

		end

	end
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Finished: 'Tyranids_GameSetup'...")

	--Rule_AddInterval(Update_AutomaticBaseBuildingManagers, 3)
	Rule_AddInterval(Update_AutomaticBaseBuildingManagers, 1)

	RemoveStacktrace()

end

function Update_AutomaticBaseBuildingManagers()

	AddStacktrace("Update_AutomaticBaseBuildingManagers")
	--if(World_GetRand(0,100) >= 45) then

		for i = 1, TableLength(g_AllAutomaticBaseBuildingManagers) do

			g_AllAutomaticBaseBuildingManagers[i]:Update()

		end

	--end

	RemoveStacktrace()

end
