--Class data for all entities. Entities encompases anything that's not in a squad. 
--Entities with this system does NOT refer to entities within a squad (individual troop models / units) 

EntityData = {}
function EntityData:new ( _eGameID, _eGroupID, _eIndex, _eID, _eRace, _eBP, _ePlayer, _eLP, _eGen, _eIsThermo )

	AddStacktrace("EntityData:new")

	local tmpEGroupID = _eGroupID
	
	if(_eGroupID == false) then

		tmpEGroupID = GetUniqueEG("EntityData_".._eBP)
		EGroup_Add(tmpEGroupID, _eID)

	end
	
	local tmpEGroupName = EGroup_GetName(tmpEGroupID)

    local EntityDataObject = 
    {

		--Constants
		EntityUniqueID = _eGameID,	
		EntityGroupID = tmpEGroupID,
		EntityGroupName = tmpEGroupName,	
		EntityIndex = _eIndex, 
		EntityID = _eID,	
		EntityUnitRace = _eRace,
		EntityBlueprint = _eBP,		
		EntityIsLP = _eLP,
		EntityIsGen = _eGen,
		EntityIsThermo = _eIsThermo,
		EntityIsStructure = Entity_IsBuilding(_eID),
		EntityCanMove = false,
		OwnedByPlayer = Entity_GetPlayerOwner(_eID), 		
		OwnerPlayer = _ePlayer, 
		HasSynapseScore = g_EntitySynapseScore[_eBP] ~= nil,

		--Variables
		EntityPosition = Entity_GetPosition(_eID),
		EntityPositionInt = Entity_GetPosition(_eID),
		EntityAvgHealth = EGroup_GetAvgHealth( tmpEGroupName ),
		EntityMaxHealth = Entity_GetHealthMax( _eID ),
		EntityInvulnerable = EGroup_GetHealthInvulnerable(tmpEGroupName, true),
		EntityConstructionPercent = 0.0,
		PreviouslyAttackedByPlayers = {},
		PreviouslyAttackedTime = 0,
		HasAppliedSynapseScore = false

	}

	self.__index = self

	local globalObject = setmetatable(EntityDataObject, self)

	RegisterClass(globalObject, "EntityData")

	globalObject:LateConstructor()

	RemoveStacktrace()

	return globalObject

end

function EntityData:LateConstructor() 

	--Eldar can move structures with relocation, so will need to update pos. Other factions cannot currently
	self.EntityCanMove = (self.EntityIsStructure == true) and (self.OwnerPlayer.RaceDetails.RaceName ~= "eldar_race")

end

function EntityData:Update()

	AddStacktrace("EntityData:Update")

	local entityIsValid = true
	local privateUpdate = function()
	
		entityIsValid = Entity_Exists(self.EntityID)
		
		if(entityIsValid) then

			--We don't need to update pos of structures as they generally don't move. We may need to do this for eldar who can move their structures
			if(self.EntityCanMove == true) then

				self:UpdatePosition()

			end

			if(self.EntityIsStructure) then

				self.EntityConstructionPercent = Entity_GetBuildingProgress( self.EntityID )

				if(self.HasSynapseScore) then

					if(self.HasAppliedSynapseScore == false) then

						if(self.EntityConstructionPercent >= 1) then

							self.HasAppliedSynapseScore = true
							self.OwnerPlayer:ApplySynapseScore(g_EntitySynapseScore[self.EntityBlueprint].EntityScore)

						end

					end

				end
		
			end

			self.EntityAvgHealth = EGroup_GetAvgHealth( self.EntityGroupName )
			self:SetIsEntityInvulnerable()

			--Get combat status
			if(Entity_IsUnderAttack(self.EntityID)) then

				local PlayersToRemove = {}
				for i = 1, g_PlayerCount do
					
					if(Entity_IsUnderAttackByPlayer(self.EntityID, g_AllPlayers[i].Player)) then
						
						local contains, _  = TableContains(self.PreviouslyAttackedByPlayers, g_AllPlayers[i])
		
						if(contains == false) then
		
							table.insert(self.PreviouslyAttackedByPlayers, g_AllPlayers[i])
		
						end
					
					end
				end

			elseif(GetWorldLifetime(self.PreviouslyAttackedTime) > g_CombatTimeWindow) then 
				
				--Entity not been attacked for awhile, so we will forget who was attacking them
				self.PreviouslyAttackedByPlayers = {}

			end

		end

	end

	entityIsValid = entityIsValid and DoBasicFunction(privateUpdate)

	if(entityIsValid == false) then

		RemoveStacktrace()

	end

	RemoveStacktrace()
	
	return entityIsValid

end

function EntityData:SetIsEntityInvulnerable()

	if(self.EntityBlueprint == "strategic_objective_struct" or self.EntityBlueprint == "strategic_point_flag" or self.EntityBlueprint == "relic_struct") then

		self.IsEntityInvulnerable = true

	else

		self.IsEntityInvulnerable = EGroup_GetHealthInvulnerable(self.EntityGroupName, false)

	end

end

function EntityData:UpdatePosition() 
	
	AddStacktrace("EntityData:UpdatePosition")

	self.EntityPosition = Entity_GetPosition(self.EntityID)
	self.EntityPositionInt.x = math.floor(self.EntityPosition.x)
	self.EntityPositionInt.y = math.floor(self.EntityPosition.y)
	self.EntityPositionInt.z = math.floor(self.EntityPosition.z)

	RemoveStacktrace()

end

function EntityData:EntityIsDead()

	AddStacktrace("EntityData:EntityIsDead")
	
	local isDead = false

	if(self.EntityInvulnerable == false and self.EntityAvgHealth <= 0 and self.EntityMaxHealth ~= 0) then

		isDead = true

	end

	RemoveStacktrace()
	
	return isDead

end

function EntityData:Deconstruct()

	AddStacktrace("EntityData:Deconstruct")

	if(self.HasAppliedSynapseScore) then
		
		self.OwnerPlayer:UnApplySynapseScore(g_EntitySynapseScore[self.EntityBlueprint].EntityScore)

	end

	DeconstructClass(self)
	
	self.__index = nil
	self = nil

	RemoveStacktrace()

end