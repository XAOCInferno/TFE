function Setup_UpkeepSystem()
	
	AddStacktrace("Setup_UpkeepSystem")
		
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Starting: 'Setup_UpkeepSystem'...")

	for i = 1, g_PlayerCount do

		import('TFE_Core/Subscars/Resources/Upkeep/races/'..g_AllPlayers[i].RaceDetails.RaceName..'.scar')

	end

	EventCue_DoEvent( 'warning', 'music/stinger_completeobjective', 'Army Upkeep Activated!', 'Your army will now drain resources.' )
	
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Finished: 'Setup_UpkeepSystem'!")

	RemoveStacktrace()

end


function Set_PlayerUpkeep()
	
	AddStacktrace("Set_PlayerUpkeep")
	
	for i = 1, g_PlayerCount do
	
		for j = 1, g_PlayerSquadCount[i] do
			
			local tmpStruct = g_AllSquadsData[i][j]		

			if(tmpStruct == nil) then
					
				LogOnce(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Struct for Player: "..i.." at position "..j.." is Nil!")				
				
			elseif(tmpStruct.SquadUniqueID == nil) then
				
				LogOnce(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "Struct: '"..tmpStruct.."' does not have a Unique ID!")		
				
			else

				local SquadLifetimeAsPercent = 1
				local SquadLifetime = GetWorldLifetime(tmpStruct.SquadInitTime) 

				if(SquadLifetime < g_TimeTakenForMaxUpkeep) then	

					SquadLifetimeAsPercent = SquadLifetime / g_MatureMaxLifetime

				end
				
				if(UnitCosting[tmpStruct.SquadUnitRace] ~= nil) then

					if(UnitCosting[tmpStruct.SquadUnitRace][tmpStruct.SquadBlueprint] ~= nil) then

						local InterpretedBlueprintCostDetails = { CostSquad = ResourceGroup:new(), CostEntity = ResourceGroup:new(), CostLeader = ResourceGroup:new(), }
						local MaxUpkeep = ResourceGroup:new()
						local ActualUpkeep = ResourceGroup:new()

						local LeaderCount = SGroup_CountLeaders(tmpStruct.SquadGroupName)

						local BlueprintCostDetails = UnitCosting[tmpStruct.SquadUnitRace][tmpStruct.SquadBlueprint]		
						
						InterpretedBlueprintCostDetails.CostEntity:SetFromBlueprint(BlueprintCostDetails.CostEntity)
						InterpretedBlueprintCostDetails.CostSquad:SetFromBlueprint(BlueprintCostDetails.CostSquad)
						InterpretedBlueprintCostDetails.CostLeader:SetFromBlueprint(BlueprintCostDetails.CostLeader)


						local loadout = tmpStruct.SquadLoadout

						if(tmpStruct.SquadHasAttachedToThis == true) then
							
							loadout = loadout - 1

						end

						InterpretedBlueprintCostDetails.CostEntity:MultiplyByFloat(loadout)
						InterpretedBlueprintCostDetails.CostLeader:MultiplyByFloat(LeaderCount)
						
						MaxUpkeep:Add(InterpretedBlueprintCostDetails.CostEntity)
						MaxUpkeep:Add(InterpretedBlueprintCostDetails.CostSquad)
						MaxUpkeep:Add(InterpretedBlueprintCostDetails.CostLeader)
						
						ActualUpkeep:Set(MaxUpkeep)
						ActualUpkeep:MultiplyByFloat(SquadLifetimeAsPercent)
						
						g_AllPlayers[i].CurrentAddResources:Add(ActualUpkeep)
						
					else

						LogOnce(eLOG_LOG_TYPE_WARNING, eLOG_VERBOSE, "SquadBP for ID: '"..tmpStruct.SquadUniqueID.."' does not have a Blueprint!")

					end

				else
				
					LogOnce(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "Race '"..tmpStruct.SquadUnitRace.."' does not have Upkeep data!")
					
				end	

			end

		end	

	end

	RemoveStacktrace()

end

if(DISABLE_UPKEEP == true) then

	function Setup_UpkeepSystem() end
	function Set_PlayerUpkeep() end

end

