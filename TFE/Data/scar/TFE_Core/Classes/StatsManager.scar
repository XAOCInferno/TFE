--Stats manager, child of a player, controls the player stats such as their kills and losses
--This was used more for achievements and can be perhaps used later for some kind of punishment / award for players who are leading overall

StatsManager = {}
function StatsManager:new (_Parent)

	AddStacktrace("StatsManager:new")

	local StatsManagerObject = 
	{
		--Constants
		Parent = _Parent,

		--Variables
		ActiveArmyCost = ResourceGroup:new(),
		ResourcesGathered = ResourceGroup:new(),
		--ResourcesGatheredScore = ResourceGroup:new(), --Seemingly causes a crash so we can't use this one (probably - requires investigation)
		ResourcesSpent = ResourceGroup:new(),
		ResourcesTributed = ResourceGroup:new(),
		
		--Note: Refactor Kills / Loss stats into their own tables
		EntitiesKilled = 0,
		StructuresKilled = 0,
		LPsKilled = 0,
		GensKilled = 0,
		ThermosKilled = 0,
		EntitiesLost = 0,
		StructuresLost = 0,
		LPsLost = 0,
		GensLost = 0,
		ThermosLost = 0,

		UnitsKilled = 0,
		LeadersKilled = 0,
		CommandersKilled = 0,
		SquadsKilled = 0,
		UnitsLost = 0,
		LeadersLost = 0,
		CommandersLost = 0,
		SquadsLost = 0,
		HasWon = false,

		TimestampedUnitKills = {},
		TimestampedUnitLosses = {},

		TimestampedEntityKills = {},
		TimestampedEntityLosses = {}

	}

	self.__index = self

	local globalObject = setmetatable(StatsManagerObject, self)

	RegisterClass(globalObject, "StatsManager")

	globalObject:LateConstructor()

	RemoveStacktrace()

	return globalObject

end

function StatsManager:LateConstructor()

	AddStacktrace("StatsManager:LateConstructor")

	self.ActiveArmyCost:SetZombieLifetime()
	self.ResourcesGathered:SetZombieLifetime()
	--self.ResourcesGatheredScore:SetZombieLifetime()
	self.ResourcesSpent:SetZombieLifetime()
	self.ResourcesTributed:SetZombieLifetime()

	RemoveStacktrace()

end

--1 or multiple kills have been detected and now should be applied as stats
function StatsManager:AddKills( _Units, _Leaders, _Commanders, _Squads, _DefenderSquadStruct )

	AddStacktrace("StatsManager:AddKills")

	--Update raw stats
	self.UnitsKilled = self.UnitsKilled + _Units
	self.LeadersKilled = self.LeadersKilled + _Leaders
	self.CommandersKilled = self.CommandersKilled + _Commanders
	self.SquadsKilled = self.SquadsKilled + _Squads

	--Get how many squads are in combat with the dead unit
	--Note: This does not take into account entities like turrets and will require small refactor
	local NumberAttackingSquads = table.getn(_DefenderSquadStruct.PreviouslyAttackedBySquads)
	
	--Set the estimated position of the squad who killed the target and applies reward XP
	local tmpKillerPosition = nil
	local tmpKiller = nil
	local criticalError = false
	if(NumberAttackingSquads > 0) then

		--Firstly, reward the killers
		for killerIndex = 1, NumberAttackingSquads do

			if(_DefenderSquadStruct.PreviouslyAttackedBySquads[killerIndex] ~= nil) then

				_DefenderSquadStruct.PreviouslyAttackedBySquads[killerIndex].XP:AddXP_CombatWithSquad(_DefenderSquadStruct.SquadBlueprint, _Units, _Leaders, _Squads, 1 / NumberAttackingSquads)

			else

				criticalError = true
				Log(eLOG_LOG_TYPE_ERROR, eLOG_FULL, "Cannot apply killer stats as the defender class is nil!") 

			end
		end

		if(criticalError == false) then
			--There are many attackers, pick a killer at random from among them
			tmpKillerPosition = TableGetRand(_DefenderSquadStruct.PreviouslyAttackedBySquads).SquadPosition
		end

	else

		--We can't find any killers 
		--Should probably do a "get closest enemy" check here
		tmpKillerPosition = _DefenderSquadStruct.SquadPosition

	end

	if(criticalError == false) then

		--Assign the stat as a recorded timestamp, used to determine kill rates 
		table.insert(self.TimestampedUnitKills, KillTimestamp:new (_Units, _Leaders, _Commanders, _Squads, tmpKillerPosition))

	end

	RemoveStacktrace()

end

--1 or more losses detected, assign them as stats
function StatsManager:AddLosses( _Units, _Leaders, _Commanders, _Squads )

	AddStacktrace("StatsManager:AddLosses") 

	--Update raw stats
	self.UnitsLost = self.UnitsLost + _Units
	self.LeadersLost = self.LeadersLost + _Leaders
	self.CommandersLost = self.CommandersLost + _Commanders
	self.SquadsLost = self.SquadsLost + _Squads

	--Assign the stat as a recorded timestamp, used to determine loss rates 
	--This table should probably be a class! Refactor it later
	table.insert(self.TimestampedUnitLosses, KillTimestamp:new (_Units, _Leaders, _Commanders, _Squads, nil))
	
	RemoveStacktrace()

end

--1 or more kills detected, assign them as stats
--This will need similar treatment as the squad kill equivallent of this function for "First Blood" achievement
function StatsManager:AddEntityKills( _Entities, _Structures, _LPs, _Gens, _Thermos )

	AddStacktrace("StatsManager:AddEntityKills")

	--Update raw stats
	self.EntitiesKilled = self.EntitiesKilled + _Entities
	self.StructuresKilled = self.StructuresKilled + _Structures
	self.LPsKilled = self.LPsKilled + _LPs
	self.GensKilled = self.GensKilled + _Gens
	self.ThermosKilled = self.ThermosKilled + _Thermos

	--Assign the stat as a recorded timestamp, used to determine kill rates 
	table.insert(self.TimestampedEntityKills, KillTimestamp:new (_Units, _Leaders, _Commanders, _Squads, nil))
	
	RemoveStacktrace()

end

--1 or more losses detected, assign them as stats
function StatsManager:AddEntityLosses( _Entities, _Structures, _LPs, _Gens, _Thermos )

	AddStacktrace("StatsManager:AddEntityLosses")
	
	self.EntitiesLost = self.EntitiesLost + _Entities
	self.StructuresLost = self.StructuresLost + _Structures
	self.LPsLost = self.LPsLost + _LPs
	self.GensLost = self.GensLost + _Gens
	self.ThermosLost = self.ThermosLost + _Thermos

	--Assign the stat as a recorded timestamp, used to determine loss rates 
	table.insert(self.TimestampedEntityLosses, KillTimestamp:new (_Units, _Leaders, _Commanders, _Squads, nil))

	RemoveStacktrace()

end

function StatsManager:GetUnitKillsSinceTime( _TimeWindow )
	
	return self:GetCombatStatsSinceTime(_TimeWindow, self.TimestampedUnitKills)

end

function StatsManager:GetUnitLossesSinceTime( _TimeWindow )

	return self:GetCombatStatsSinceTime(_TimeWindow, self.TimestampedUnitLosses)

end

function StatsManager:GetEntityKillsSinceTime( _TimeWindow )
	
	return self:GetCombatStatsSinceTime(_TimeWindow, self.TimestampedEntityKills)

end

function StatsManager:GetEntityLossesSinceTime( _TimeWindow )

	return self:GetCombatStatsSinceTime(_TimeWindow, self.TimestampedEntityLosses)

end

function StatsManager:GetCombatStatsSinceTime( _TimeWindow, _Tbl)

	AddStacktrace("StatsManager:GetCombatStatsSinceTime")
	
	--Assign initial variables
	local OnlyCountDeathsAfterThisTime = g_WorldTime - _TimeWindow
	local TotalStatsTables = table.getn(_Tbl)
	local TablesToReturn = {}

	if(TotalStatsTables > 0) then

		for i = 1, TotalStatsTables do
			
			--Iterate over the table in reverse as newer timestamps will be at the beginning
			if(_Tbl[TotalStatsTables - i + 1].Time > OnlyCountDeathsAfterThisTime) then

				--Stat is in a valid time range
				table.insert(TablesToReturn, _Tbl[TotalStatsTables - i])

			else

				--Stat is not in a valid time range. The table is ordered by time, so we can now break as all later times will be older
				break

			end

		end

	end

	RemoveStacktrace()

	return TablesToReturn

end


function StatsManager:Update()
	
	AddStacktrace("StatsManager:Update")

	--Update generic game stats each "tick"

	self.ActiveArmyCost:Set(ResourceGroup:new(0, Stats_ActiveArmyCost(self.Parent.Player, RT_Requisition), Stats_ActiveArmyCost(self.Parent.Player, RT_Power), Stats_ActiveArmyCost(self.Parent.Player, RT_Pop), 0, 0))
	self.ResourcesGathered:Set(ResourceGroup:new(0, Stats_PlayerResGathered(self.Parent.PlayerIndex, RT_Requisition), Stats_PlayerResGathered(self.Parent.PlayerIndex, RT_Power), Stats_PlayerResGathered(self.Parent.PlayerIndex, RT_Pop), 0, 0))
	--self.ResourcesGatheredScore:Set(ResourceGroup:new(0, Stats_PlayerResScore(self.Parent.PlayerIndex, RT_Requisition), Stats_PlayerResScore(self.Parent.PlayerIndex, RT_Power), Stats_PlayerResScore(self.Parent.PlayerIndex, RT_Pop), 0, 0))
	self.ResourcesSpent:Set(ResourceGroup:new(0, Stats_PlayerResSpent(self.Parent.PlayerIndex, RT_Requisition), Stats_PlayerResSpent(self.Parent.PlayerIndex, RT_Power), Stats_PlayerResSpent(self.Parent.PlayerIndex, RT_Pop), 0, 0))
	self.ResourcesTributed:Set(ResourceGroup:new(0, Stats_PlayerResTributed(self.Parent.PlayerIndex, RT_Requisition), Stats_PlayerResTributed(self.Parent.PlayerIndex, RT_Power), Stats_PlayerResTributed(self.Parent.PlayerIndex, RT_Pop), 0, 0))
	--self.StructuresLost = Stats_PlayerStructuresLost(self.Parent.PlayerIndex)
	--self.StructuresRazed = Stats_PlayerStructuresRazed(self.Parent.PlayerIndex)
	--self.UnitsKilled = Stats_PlayerUnitsKilled(self.Parent.PlayerIndex)
	--self.UnitsLost = Stats_PlayerUnitsLost(self.Parent.PlayerIndex)
	self.HasWon = Stats_PlayerWon(self.Parent.PlayerIndex)

	RemoveStacktrace()

end

function StatsManager:DebugDumpInfo()

	AddStacktrace("StatsManager:DebugDumpInfo")

	--Log all recorded stats for debugging

	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Army Cost: Red|"..self.ActiveArmyCost.RT_Red.."  Req|"..self.ActiveArmyCost.RT_Requisition.."  Power|"..self.ActiveArmyCost.RT_Power.."  Pop|"..self.ActiveArmyCost.RT_Pop.."  Faith|"..self.ActiveArmyCost.RT_Faith.."  Souls|"..self.ActiveArmyCost.RT_Souls)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Res Gathered: Red|"..self.ResourcesGathered.RT_Red.."  Req|"..self.ResourcesGathered.RT_Requisition.."  Power|"..self.ResourcesGathered.RT_Power.."  Pop|"..self.ResourcesGathered.RT_Pop.."  Faith|"..self.ResourcesGathered.RT_Faith.."  Souls|"..self.ResourcesGathered.RT_Souls)
	--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Res Gathered Score: Red|"..self.ResourcesGatheredScore.RT_Red.."  Req|"..self.ResourcesGatheredScore.RT_Requisition.."  Power|"..self.ResourcesGatheredScore.RT_Power.."  Pop|"..self.ResourcesGatheredScore.RT_Pop.."  Faith|"..self.ResourcesGatheredScore.RT_Faith.."  Souls|"..self.ResourcesGatheredScore.RT_Souls)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Res Spent: Red|"..self.ResourcesSpent.RT_Red.."  Req|"..self.ResourcesSpent.RT_Requisition.."  Power|"..self.ResourcesSpent.RT_Power.."  Pop|"..self.ResourcesSpent.RT_Pop.."  Faith|"..self.ResourcesSpent.RT_Faith.."  Souls|"..self.ResourcesSpent.RT_Souls)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Res Tributed: Red|"..self.ResourcesTributed.RT_Red.."  Req|"..self.ResourcesTributed.RT_Requisition.."  Power|"..self.ResourcesTributed.RT_Power.."  Pop|"..self.ResourcesTributed.RT_Pop.."  Faith|"..self.ResourcesTributed.RT_Faith.."  Souls|"..self.ResourcesTributed.RT_Souls)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Structures Lost: "..self.StructuresLost)
	--Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Structures Razed: "..self.StructuresRazed)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Units Killed: "..self.UnitsKilled)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Leaders Killed: "..self.LeadersKilled)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Commanders Killed: "..self.CommandersKilled)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Squads Killed: "..self.SquadsKilled)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Units Lost: "..self.UnitsLost)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Leaders Lost: "..self.LeadersLost)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Commanders Lost: "..self.CommandersLost)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Squads Lost: "..self.SquadsLost)
	Log(eLOG_TYPE_INFO, eLOG_SIMPLE, "Has Won: "..tostring(self.HasWon))

	RemoveStacktrace()

end