--Required scar
import("TFE_Core/Classes/NumberNode.scar")

--[[
	Thresholds are sorted lists  
]]

ThresholdsTable = {}
function ThresholdsTable:new ()
	
	AddStacktrace("ThresholdsTable:new")

    local ThresholdsTableObject = 
    {
		--Variables
		Data = {},
		DataLength = 0	
	}
	
	self.__index = self

	local globalObject = setmetatable(ThresholdsTableObject, self)
	
	RegisterClass(ThresholdsTableObject, "ThresholdsTable")
	
	RemoveStacktrace()
	
	return globalObject

end 

function ThresholdsTable:Insert (_WeightedKey, _Data)

	AddStacktrace("ThresholdsTable:Insert")

	local Added = false

	if self.DataLength == 0 then

		self.Data[1] = NumberNode:new(_WeightedKey, _Data)
		self.DataLength = self.DataLength + 1
		return

	end

	for i = 1, self.DataLength do			

		if _WeightedKey <= self.Data[i].WeightedKey then

			self:ShiftRightAndAddData(i, NumberNode:new(_WeightedKey, _Data))
			Added = true
			break

		end

	end

	if Added == false then
		
		self.Data[self.DataLength + 1] = NumberNode:new(_WeightedKey, _Data)
		self.DataLength = self.DataLength + 1

	end

	RemoveStacktrace()

end 

function ThresholdsTable:ShiftRightAndAddData(_StartKey, _DataToAdd)
	
	for i = 0, self.DataLength - _StartKey + 1 do
		
		self.Data[_StartKey + i + 1] = self.Data[_StartKey + i]

	end

	self.DataLength = self.DataLength + 1
	self.Data[_StartKey] = _DataToAdd

end